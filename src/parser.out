Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DO
    NEXT
    NOT
    NOT_OP
    SEMICOLON
    THEN
    TO_F
    TO_I
    TO_S
    YIELD

Grammar

Rule 0     S' -> start
Rule 1     start -> sentences
Rule 2     sentences -> sentence
Rule 3     sentences -> sentence sentences
Rule 4     function -> DEF ID body END
Rule 5     function -> DEF ID LPAREN args_opt RPAREN body END
Rule 6     arg -> ID
Rule 7     arg -> ID ASSIGN expression
Rule 8     arg -> STRING
Rule 9     arg -> INTEGER
Rule 10    arg -> FLOAT
Rule 11    arg -> BOOLEAN
Rule 12    arg -> TRUE
Rule 13    arg -> FALSE
Rule 14    arg -> NIL
Rule 15    args -> arg
Rule 16    args -> arg COMMA args
Rule 17    args_opt -> args
Rule 18    args_opt -> empty
Rule 19    body -> sentence
Rule 20    body -> sentence body
Rule 21    print -> PUTS factor
Rule 22    print -> PUTS STRING
Rule 23    class_def -> CLASS ID body END
Rule 24    sentence -> assignment
Rule 25    sentence -> expression
Rule 26    sentence -> print
Rule 27    sentence -> input
Rule 28    sentence -> condition
Rule 29    sentence -> while_loop
Rule 30    sentence -> for_loop
Rule 31    sentence -> array
Rule 32    sentence -> range_incl
Rule 33    sentence -> range_excl
Rule 34    sentence -> hash
Rule 35    sentence -> function
Rule 36    sentence -> class_def
Rule 37    sentence -> return_stmt
Rule 38    sentence -> break_stmt
Rule 39    sentence -> function_call_empty
Rule 40    sentence -> function_call_args
Rule 41    sentence -> methods
Rule 42    methods -> ID DOT ID
Rule 43    return_stmt -> RETURN factor
Rule 44    break_stmt -> BREAK
Rule 45    assignment -> ID ASSIGN expression
Rule 46    assignment -> VAR_INST ASSIGN expression
Rule 47    assignment -> ID PLUS ASSIGN expression
Rule 48    assignment -> ID MINUS ASSIGN expression
Rule 49    assignment -> ID TIMES ASSIGN expression
Rule 50    assignment -> ID DIVIDE ASSIGN expression
Rule 51    input -> PUTS STRING
Rule 52    input -> ID ASSIGN GETS method_chain
Rule 53    method_chain -> DOT ID
Rule 54    method_chain -> method_chain DOT ID
Rule 55    expression -> expression PLUS term
Rule 56    expression -> expression MINUS term
Rule 57    expression -> term
Rule 58    term -> term TIMES factor
Rule 59    term -> term DIVIDE factor
Rule 60    term -> term EXPONENT factor
Rule 61    term -> term MODULE factor
Rule 62    term -> factor
Rule 63    factor -> INTEGER
Rule 64    factor -> FLOAT
Rule 65    factor -> STRING
Rule 66    factor -> BOOLEAN
Rule 67    factor -> ID
Rule 68    factor -> VAR_INST
Rule 69    factor -> TRUE
Rule 70    factor -> FALSE
Rule 71    factor -> NIL
Rule 72    factor -> LPAREN expression RPAREN
Rule 73    factor -> logic_expression
Rule 74    factor -> range_incl
Rule 75    factor -> range_excl
Rule 76    factor -> function_call_args
Rule 77    factor -> function_call_empty
Rule 78    function_call_empty -> ID LPAREN RPAREN
Rule 79    function_call_args -> ID LPAREN args RPAREN
Rule 80    expression -> ID DOT ID LPAREN args_opt RPAREN
Rule 81    array -> ID ASSIGN LCORCH elements RCORCH
Rule 82    elements -> factor
Rule 83    elements -> factor COMMA elements
Rule 84    for_loop -> FOR ID IN range_incl body END
Rule 85    hash -> ID ASSIGN LBRACE hash_pairs RBRACE
Rule 86    hash_pairs -> STRING COLON factor
Rule 87    hash_pairs -> STRING COLON factor COMMA hash_pairs
Rule 88    while_loop -> WHILE logic_expression body END
Rule 89    range_incl -> LPAREN INTEGER RANGE_INCL INTEGER RPAREN
Rule 90    range_incl -> INTEGER RANGE_INCL INTEGER
Rule 91    range_excl -> LPAREN INTEGER RANGE_EXCL INTEGER RPAREN
Rule 92    range_excl -> INTEGER RANGE_EXCL INTEGER
Rule 93    condition -> IF logic_expression body END
Rule 94    condition -> IF logic_expression body ELSE body END
Rule 95    logic_expression -> factor logic_op factor
Rule 96    logic_expression -> factor logic_connector factor
Rule 97    logic_expression -> expression logic_op expression
Rule 98    logic_op -> EQUALS
Rule 99    logic_op -> NEQUALS
Rule 100   logic_op -> GREATEREQ
Rule 101   logic_op -> LESSEQ
Rule 102   logic_op -> GREATERT
Rule 103   logic_op -> LESST
Rule 104   logic_connector -> AND
Rule 105   logic_connector -> OR
Rule 106   logic_connector -> AND_OP
Rule 107   logic_connector -> OR_OP
Rule 108   empty -> <empty>

Terminals, with rules where they appear

AND                  : 104
AND_OP               : 106
ASSIGN               : 7 45 46 47 48 49 50 52 81 85
BOOLEAN              : 11 66
BREAK                : 44
CLASS                : 23
COLON                : 86 87
COMMA                : 16 83 87
DEF                  : 4 5
DIVIDE               : 50 59
DO                   : 
DOT                  : 42 53 54 80
ELSE                 : 94
END                  : 4 5 23 84 88 93 94
EQUALS               : 98
EXPONENT             : 60
FALSE                : 13 70
FLOAT                : 10 64
FOR                  : 84
GETS                 : 52
GREATEREQ            : 100
GREATERT             : 102
ID                   : 4 5 6 7 23 42 42 45 47 48 49 50 52 53 54 67 78 79 80 80 81 84 85
IF                   : 93 94
IN                   : 84
INTEGER              : 9 63 89 89 90 90 91 91 92 92
LBRACE               : 85
LCORCH               : 81
LESSEQ               : 101
LESST                : 103
LPAREN               : 5 72 78 79 80 89 91
MINUS                : 48 56
MODULE               : 61
NEQUALS              : 99
NEXT                 : 
NIL                  : 14 71
NOT                  : 
NOT_OP               : 
OR                   : 105
OR_OP                : 107
PLUS                 : 47 55
PUTS                 : 21 22 51
RANGE_EXCL           : 91 92
RANGE_INCL           : 89 90
RBRACE               : 85
RCORCH               : 81
RETURN               : 43
RPAREN               : 5 72 78 79 80 89 91
SEMICOLON            : 
STRING               : 8 22 51 65 86 87
THEN                 : 
TIMES                : 49 58
TO_F                 : 
TO_I                 : 
TO_S                 : 
TRUE                 : 12 69
VAR_INST             : 46 68
WHILE                : 88
YIELD                : 
error                : 

Nonterminals, with rules where they appear

arg                  : 15 16
args                 : 16 17 79
args_opt             : 5 80
array                : 31
assignment           : 24
body                 : 4 5 20 23 84 88 93 94 94
break_stmt           : 38
class_def            : 36
condition            : 28
elements             : 81 83
empty                : 18
expression           : 7 25 45 46 47 48 49 50 55 56 72 97 97
factor               : 21 43 58 59 60 61 62 82 83 86 87 95 95 96 96
for_loop             : 30
function             : 35
function_call_args   : 40 76
function_call_empty  : 39 77
hash                 : 34
hash_pairs           : 85 87
input                : 27
logic_connector      : 96
logic_expression     : 73 88 93 94
logic_op             : 95 97
method_chain         : 52 54
methods              : 41
print                : 26
range_excl           : 33 75
range_incl           : 32 74 84
return_stmt          : 37
sentence             : 2 3 19 20
sentences            : 1 3
start                : 0
term                 : 55 56 57 58 59 60 61
while_loop           : 29

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . sentences
    (2) sentences -> . sentence
    (3) sentences -> . sentence sentences
    (24) sentence -> . assignment
    (25) sentence -> . expression
    (26) sentence -> . print
    (27) sentence -> . input
    (28) sentence -> . condition
    (29) sentence -> . while_loop
    (30) sentence -> . for_loop
    (31) sentence -> . array
    (32) sentence -> . range_incl
    (33) sentence -> . range_excl
    (34) sentence -> . hash
    (35) sentence -> . function
    (36) sentence -> . class_def
    (37) sentence -> . return_stmt
    (38) sentence -> . break_stmt
    (39) sentence -> . function_call_empty
    (40) sentence -> . function_call_args
    (41) sentence -> . methods
    (45) assignment -> . ID ASSIGN expression
    (46) assignment -> . VAR_INST ASSIGN expression
    (47) assignment -> . ID PLUS ASSIGN expression
    (48) assignment -> . ID MINUS ASSIGN expression
    (49) assignment -> . ID TIMES ASSIGN expression
    (50) assignment -> . ID DIVIDE ASSIGN expression
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . term
    (80) expression -> . ID DOT ID LPAREN args_opt RPAREN
    (21) print -> . PUTS factor
    (22) print -> . PUTS STRING
    (51) input -> . PUTS STRING
    (52) input -> . ID ASSIGN GETS method_chain
    (93) condition -> . IF logic_expression body END
    (94) condition -> . IF logic_expression body ELSE body END
    (88) while_loop -> . WHILE logic_expression body END
    (84) for_loop -> . FOR ID IN range_incl body END
    (81) array -> . ID ASSIGN LCORCH elements RCORCH
    (89) range_incl -> . LPAREN INTEGER RANGE_INCL INTEGER RPAREN
    (90) range_incl -> . INTEGER RANGE_INCL INTEGER
    (91) range_excl -> . LPAREN INTEGER RANGE_EXCL INTEGER RPAREN
    (92) range_excl -> . INTEGER RANGE_EXCL INTEGER
    (85) hash -> . ID ASSIGN LBRACE hash_pairs RBRACE
    (4) function -> . DEF ID body END
    (5) function -> . DEF ID LPAREN args_opt RPAREN body END
    (23) class_def -> . CLASS ID body END
    (43) return_stmt -> . RETURN factor
    (44) break_stmt -> . BREAK
    (78) function_call_empty -> . ID LPAREN RPAREN
    (79) function_call_args -> . ID LPAREN args RPAREN
    (42) methods -> . ID DOT ID
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term EXPONENT factor
    (61) term -> . term MODULE factor
    (62) term -> . factor
    (63) factor -> . INTEGER
    (64) factor -> . FLOAT
    (65) factor -> . STRING
    (66) factor -> . BOOLEAN
    (67) factor -> . ID
    (68) factor -> . VAR_INST
    (69) factor -> . TRUE
    (70) factor -> . FALSE
    (71) factor -> . NIL
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . logic_expression
    (74) factor -> . range_incl
    (75) factor -> . range_excl
    (76) factor -> . function_call_args
    (77) factor -> . function_call_empty
    (95) logic_expression -> . factor logic_op factor
    (96) logic_expression -> . factor logic_connector factor
    (97) logic_expression -> . expression logic_op expression

    ID              shift and go to state 22
    VAR_INST        shift and go to state 23
    PUTS            shift and go to state 26
    IF              shift and go to state 29
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    LPAREN          shift and go to state 25
    INTEGER         shift and go to state 33
    DEF             shift and go to state 34
    CLASS           shift and go to state 35
    RETURN          shift and go to state 36
    BREAK           shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 28
    BOOLEAN         shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    NIL             shift and go to state 42

    start                          shift and go to state 1
    sentences                      shift and go to state 2
    sentence                       shift and go to state 3
    assignment                     shift and go to state 4
    expression                     shift and go to state 5
    print                          shift and go to state 6
    input                          shift and go to state 7
    condition                      shift and go to state 8
    while_loop                     shift and go to state 9
    for_loop                       shift and go to state 10
    array                          shift and go to state 11
    range_incl                     shift and go to state 12
    range_excl                     shift and go to state 13
    hash                           shift and go to state 14
    function                       shift and go to state 15
    class_def                      shift and go to state 16
    return_stmt                    shift and go to state 17
    break_stmt                     shift and go to state 18
    function_call_empty            shift and go to state 19
    function_call_args             shift and go to state 20
    methods                        shift and go to state 21
    term                           shift and go to state 24
    factor                         shift and go to state 27
    logic_expression               shift and go to state 30

state 1

    (0) S' -> start .



state 2

    (1) start -> sentences .

    $end            reduce using rule 1 (start -> sentences .)


state 3

    (2) sentences -> sentence .
    (3) sentences -> sentence . sentences
    (2) sentences -> . sentence
    (3) sentences -> . sentence sentences
    (24) sentence -> . assignment
    (25) sentence -> . expression
    (26) sentence -> . print
    (27) sentence -> . input
    (28) sentence -> . condition
    (29) sentence -> . while_loop
    (30) sentence -> . for_loop
    (31) sentence -> . array
    (32) sentence -> . range_incl
    (33) sentence -> . range_excl
    (34) sentence -> . hash
    (35) sentence -> . function
    (36) sentence -> . class_def
    (37) sentence -> . return_stmt
    (38) sentence -> . break_stmt
    (39) sentence -> . function_call_empty
    (40) sentence -> . function_call_args
    (41) sentence -> . methods
    (45) assignment -> . ID ASSIGN expression
    (46) assignment -> . VAR_INST ASSIGN expression
    (47) assignment -> . ID PLUS ASSIGN expression
    (48) assignment -> . ID MINUS ASSIGN expression
    (49) assignment -> . ID TIMES ASSIGN expression
    (50) assignment -> . ID DIVIDE ASSIGN expression
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . term
    (80) expression -> . ID DOT ID LPAREN args_opt RPAREN
    (21) print -> . PUTS factor
    (22) print -> . PUTS STRING
    (51) input -> . PUTS STRING
    (52) input -> . ID ASSIGN GETS method_chain
    (93) condition -> . IF logic_expression body END
    (94) condition -> . IF logic_expression body ELSE body END
    (88) while_loop -> . WHILE logic_expression body END
    (84) for_loop -> . FOR ID IN range_incl body END
    (81) array -> . ID ASSIGN LCORCH elements RCORCH
    (89) range_incl -> . LPAREN INTEGER RANGE_INCL INTEGER RPAREN
    (90) range_incl -> . INTEGER RANGE_INCL INTEGER
    (91) range_excl -> . LPAREN INTEGER RANGE_EXCL INTEGER RPAREN
    (92) range_excl -> . INTEGER RANGE_EXCL INTEGER
    (85) hash -> . ID ASSIGN LBRACE hash_pairs RBRACE
    (4) function -> . DEF ID body END
    (5) function -> . DEF ID LPAREN args_opt RPAREN body END
    (23) class_def -> . CLASS ID body END
    (43) return_stmt -> . RETURN factor
    (44) break_stmt -> . BREAK
    (78) function_call_empty -> . ID LPAREN RPAREN
    (79) function_call_args -> . ID LPAREN args RPAREN
    (42) methods -> . ID DOT ID
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term EXPONENT factor
    (61) term -> . term MODULE factor
    (62) term -> . factor
    (63) factor -> . INTEGER
    (64) factor -> . FLOAT
    (65) factor -> . STRING
    (66) factor -> . BOOLEAN
    (67) factor -> . ID
    (68) factor -> . VAR_INST
    (69) factor -> . TRUE
    (70) factor -> . FALSE
    (71) factor -> . NIL
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . logic_expression
    (74) factor -> . range_incl
    (75) factor -> . range_excl
    (76) factor -> . function_call_args
    (77) factor -> . function_call_empty
    (95) logic_expression -> . factor logic_op factor
    (96) logic_expression -> . factor logic_connector factor
    (97) logic_expression -> . expression logic_op expression

    $end            reduce using rule 2 (sentences -> sentence .)
    ID              shift and go to state 22
    VAR_INST        shift and go to state 23
    PUTS            shift and go to state 26
    IF              shift and go to state 29
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    LPAREN          shift and go to state 25
    INTEGER         shift and go to state 33
    DEF             shift and go to state 34
    CLASS           shift and go to state 35
    RETURN          shift and go to state 36
    BREAK           shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 28
    BOOLEAN         shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    NIL             shift and go to state 42

    sentence                       shift and go to state 3
    sentences                      shift and go to state 43
    assignment                     shift and go to state 4
    expression                     shift and go to state 5
    print                          shift and go to state 6
    input                          shift and go to state 7
    condition                      shift and go to state 8
    while_loop                     shift and go to state 9
    for_loop                       shift and go to state 10
    array                          shift and go to state 11
    range_incl                     shift and go to state 12
    range_excl                     shift and go to state 13
    hash                           shift and go to state 14
    function                       shift and go to state 15
    class_def                      shift and go to state 16
    return_stmt                    shift and go to state 17
    break_stmt                     shift and go to state 18
    function_call_empty            shift and go to state 19
    function_call_args             shift and go to state 20
    methods                        shift and go to state 21
    term                           shift and go to state 24
    factor                         shift and go to state 27
    logic_expression               shift and go to state 30

state 4

    (24) sentence -> assignment .

    ID              reduce using rule 24 (sentence -> assignment .)
    VAR_INST        reduce using rule 24 (sentence -> assignment .)
    PUTS            reduce using rule 24 (sentence -> assignment .)
    IF              reduce using rule 24 (sentence -> assignment .)
    WHILE           reduce using rule 24 (sentence -> assignment .)
    FOR             reduce using rule 24 (sentence -> assignment .)
    LPAREN          reduce using rule 24 (sentence -> assignment .)
    INTEGER         reduce using rule 24 (sentence -> assignment .)
    DEF             reduce using rule 24 (sentence -> assignment .)
    CLASS           reduce using rule 24 (sentence -> assignment .)
    RETURN          reduce using rule 24 (sentence -> assignment .)
    BREAK           reduce using rule 24 (sentence -> assignment .)
    FLOAT           reduce using rule 24 (sentence -> assignment .)
    STRING          reduce using rule 24 (sentence -> assignment .)
    BOOLEAN         reduce using rule 24 (sentence -> assignment .)
    TRUE            reduce using rule 24 (sentence -> assignment .)
    FALSE           reduce using rule 24 (sentence -> assignment .)
    NIL             reduce using rule 24 (sentence -> assignment .)
    $end            reduce using rule 24 (sentence -> assignment .)
    END             reduce using rule 24 (sentence -> assignment .)
    ELSE            reduce using rule 24 (sentence -> assignment .)


state 5

    (25) sentence -> expression .
    (55) expression -> expression . PLUS term
    (56) expression -> expression . MINUS term
    (97) logic_expression -> expression . logic_op expression
    (98) logic_op -> . EQUALS
    (99) logic_op -> . NEQUALS
    (100) logic_op -> . GREATEREQ
    (101) logic_op -> . LESSEQ
    (102) logic_op -> . GREATERT
    (103) logic_op -> . LESST

    ID              reduce using rule 25 (sentence -> expression .)
    VAR_INST        reduce using rule 25 (sentence -> expression .)
    PUTS            reduce using rule 25 (sentence -> expression .)
    IF              reduce using rule 25 (sentence -> expression .)
    WHILE           reduce using rule 25 (sentence -> expression .)
    FOR             reduce using rule 25 (sentence -> expression .)
    LPAREN          reduce using rule 25 (sentence -> expression .)
    INTEGER         reduce using rule 25 (sentence -> expression .)
    DEF             reduce using rule 25 (sentence -> expression .)
    CLASS           reduce using rule 25 (sentence -> expression .)
    RETURN          reduce using rule 25 (sentence -> expression .)
    BREAK           reduce using rule 25 (sentence -> expression .)
    FLOAT           reduce using rule 25 (sentence -> expression .)
    STRING          reduce using rule 25 (sentence -> expression .)
    BOOLEAN         reduce using rule 25 (sentence -> expression .)
    TRUE            reduce using rule 25 (sentence -> expression .)
    FALSE           reduce using rule 25 (sentence -> expression .)
    NIL             reduce using rule 25 (sentence -> expression .)
    $end            reduce using rule 25 (sentence -> expression .)
    END             reduce using rule 25 (sentence -> expression .)
    ELSE            reduce using rule 25 (sentence -> expression .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    EQUALS          shift and go to state 47
    NEQUALS         shift and go to state 48
    GREATEREQ       shift and go to state 49
    LESSEQ          shift and go to state 50
    GREATERT        shift and go to state 51
    LESST           shift and go to state 52

    logic_op                       shift and go to state 46

state 6

    (26) sentence -> print .

    ID              reduce using rule 26 (sentence -> print .)
    VAR_INST        reduce using rule 26 (sentence -> print .)
    PUTS            reduce using rule 26 (sentence -> print .)
    IF              reduce using rule 26 (sentence -> print .)
    WHILE           reduce using rule 26 (sentence -> print .)
    FOR             reduce using rule 26 (sentence -> print .)
    LPAREN          reduce using rule 26 (sentence -> print .)
    INTEGER         reduce using rule 26 (sentence -> print .)
    DEF             reduce using rule 26 (sentence -> print .)
    CLASS           reduce using rule 26 (sentence -> print .)
    RETURN          reduce using rule 26 (sentence -> print .)
    BREAK           reduce using rule 26 (sentence -> print .)
    FLOAT           reduce using rule 26 (sentence -> print .)
    STRING          reduce using rule 26 (sentence -> print .)
    BOOLEAN         reduce using rule 26 (sentence -> print .)
    TRUE            reduce using rule 26 (sentence -> print .)
    FALSE           reduce using rule 26 (sentence -> print .)
    NIL             reduce using rule 26 (sentence -> print .)
    $end            reduce using rule 26 (sentence -> print .)
    END             reduce using rule 26 (sentence -> print .)
    ELSE            reduce using rule 26 (sentence -> print .)


state 7

    (27) sentence -> input .

    ID              reduce using rule 27 (sentence -> input .)
    VAR_INST        reduce using rule 27 (sentence -> input .)
    PUTS            reduce using rule 27 (sentence -> input .)
    IF              reduce using rule 27 (sentence -> input .)
    WHILE           reduce using rule 27 (sentence -> input .)
    FOR             reduce using rule 27 (sentence -> input .)
    LPAREN          reduce using rule 27 (sentence -> input .)
    INTEGER         reduce using rule 27 (sentence -> input .)
    DEF             reduce using rule 27 (sentence -> input .)
    CLASS           reduce using rule 27 (sentence -> input .)
    RETURN          reduce using rule 27 (sentence -> input .)
    BREAK           reduce using rule 27 (sentence -> input .)
    FLOAT           reduce using rule 27 (sentence -> input .)
    STRING          reduce using rule 27 (sentence -> input .)
    BOOLEAN         reduce using rule 27 (sentence -> input .)
    TRUE            reduce using rule 27 (sentence -> input .)
    FALSE           reduce using rule 27 (sentence -> input .)
    NIL             reduce using rule 27 (sentence -> input .)
    $end            reduce using rule 27 (sentence -> input .)
    END             reduce using rule 27 (sentence -> input .)
    ELSE            reduce using rule 27 (sentence -> input .)


state 8

    (28) sentence -> condition .

    ID              reduce using rule 28 (sentence -> condition .)
    VAR_INST        reduce using rule 28 (sentence -> condition .)
    PUTS            reduce using rule 28 (sentence -> condition .)
    IF              reduce using rule 28 (sentence -> condition .)
    WHILE           reduce using rule 28 (sentence -> condition .)
    FOR             reduce using rule 28 (sentence -> condition .)
    LPAREN          reduce using rule 28 (sentence -> condition .)
    INTEGER         reduce using rule 28 (sentence -> condition .)
    DEF             reduce using rule 28 (sentence -> condition .)
    CLASS           reduce using rule 28 (sentence -> condition .)
    RETURN          reduce using rule 28 (sentence -> condition .)
    BREAK           reduce using rule 28 (sentence -> condition .)
    FLOAT           reduce using rule 28 (sentence -> condition .)
    STRING          reduce using rule 28 (sentence -> condition .)
    BOOLEAN         reduce using rule 28 (sentence -> condition .)
    TRUE            reduce using rule 28 (sentence -> condition .)
    FALSE           reduce using rule 28 (sentence -> condition .)
    NIL             reduce using rule 28 (sentence -> condition .)
    $end            reduce using rule 28 (sentence -> condition .)
    END             reduce using rule 28 (sentence -> condition .)
    ELSE            reduce using rule 28 (sentence -> condition .)


state 9

    (29) sentence -> while_loop .

    ID              reduce using rule 29 (sentence -> while_loop .)
    VAR_INST        reduce using rule 29 (sentence -> while_loop .)
    PUTS            reduce using rule 29 (sentence -> while_loop .)
    IF              reduce using rule 29 (sentence -> while_loop .)
    WHILE           reduce using rule 29 (sentence -> while_loop .)
    FOR             reduce using rule 29 (sentence -> while_loop .)
    LPAREN          reduce using rule 29 (sentence -> while_loop .)
    INTEGER         reduce using rule 29 (sentence -> while_loop .)
    DEF             reduce using rule 29 (sentence -> while_loop .)
    CLASS           reduce using rule 29 (sentence -> while_loop .)
    RETURN          reduce using rule 29 (sentence -> while_loop .)
    BREAK           reduce using rule 29 (sentence -> while_loop .)
    FLOAT           reduce using rule 29 (sentence -> while_loop .)
    STRING          reduce using rule 29 (sentence -> while_loop .)
    BOOLEAN         reduce using rule 29 (sentence -> while_loop .)
    TRUE            reduce using rule 29 (sentence -> while_loop .)
    FALSE           reduce using rule 29 (sentence -> while_loop .)
    NIL             reduce using rule 29 (sentence -> while_loop .)
    $end            reduce using rule 29 (sentence -> while_loop .)
    END             reduce using rule 29 (sentence -> while_loop .)
    ELSE            reduce using rule 29 (sentence -> while_loop .)


state 10

    (30) sentence -> for_loop .

    ID              reduce using rule 30 (sentence -> for_loop .)
    VAR_INST        reduce using rule 30 (sentence -> for_loop .)
    PUTS            reduce using rule 30 (sentence -> for_loop .)
    IF              reduce using rule 30 (sentence -> for_loop .)
    WHILE           reduce using rule 30 (sentence -> for_loop .)
    FOR             reduce using rule 30 (sentence -> for_loop .)
    LPAREN          reduce using rule 30 (sentence -> for_loop .)
    INTEGER         reduce using rule 30 (sentence -> for_loop .)
    DEF             reduce using rule 30 (sentence -> for_loop .)
    CLASS           reduce using rule 30 (sentence -> for_loop .)
    RETURN          reduce using rule 30 (sentence -> for_loop .)
    BREAK           reduce using rule 30 (sentence -> for_loop .)
    FLOAT           reduce using rule 30 (sentence -> for_loop .)
    STRING          reduce using rule 30 (sentence -> for_loop .)
    BOOLEAN         reduce using rule 30 (sentence -> for_loop .)
    TRUE            reduce using rule 30 (sentence -> for_loop .)
    FALSE           reduce using rule 30 (sentence -> for_loop .)
    NIL             reduce using rule 30 (sentence -> for_loop .)
    $end            reduce using rule 30 (sentence -> for_loop .)
    END             reduce using rule 30 (sentence -> for_loop .)
    ELSE            reduce using rule 30 (sentence -> for_loop .)


state 11

    (31) sentence -> array .

    ID              reduce using rule 31 (sentence -> array .)
    VAR_INST        reduce using rule 31 (sentence -> array .)
    PUTS            reduce using rule 31 (sentence -> array .)
    IF              reduce using rule 31 (sentence -> array .)
    WHILE           reduce using rule 31 (sentence -> array .)
    FOR             reduce using rule 31 (sentence -> array .)
    LPAREN          reduce using rule 31 (sentence -> array .)
    INTEGER         reduce using rule 31 (sentence -> array .)
    DEF             reduce using rule 31 (sentence -> array .)
    CLASS           reduce using rule 31 (sentence -> array .)
    RETURN          reduce using rule 31 (sentence -> array .)
    BREAK           reduce using rule 31 (sentence -> array .)
    FLOAT           reduce using rule 31 (sentence -> array .)
    STRING          reduce using rule 31 (sentence -> array .)
    BOOLEAN         reduce using rule 31 (sentence -> array .)
    TRUE            reduce using rule 31 (sentence -> array .)
    FALSE           reduce using rule 31 (sentence -> array .)
    NIL             reduce using rule 31 (sentence -> array .)
    $end            reduce using rule 31 (sentence -> array .)
    END             reduce using rule 31 (sentence -> array .)
    ELSE            reduce using rule 31 (sentence -> array .)


state 12

    (32) sentence -> range_incl .
    (74) factor -> range_incl .

  ! reduce/reduce conflict for ID resolved using rule 32 (sentence -> range_incl .)
  ! reduce/reduce conflict for VAR_INST resolved using rule 32 (sentence -> range_incl .)
  ! reduce/reduce conflict for PUTS resolved using rule 32 (sentence -> range_incl .)
  ! reduce/reduce conflict for IF resolved using rule 32 (sentence -> range_incl .)
  ! reduce/reduce conflict for WHILE resolved using rule 32 (sentence -> range_incl .)
  ! reduce/reduce conflict for FOR resolved using rule 32 (sentence -> range_incl .)
  ! reduce/reduce conflict for LPAREN resolved using rule 32 (sentence -> range_incl .)
  ! reduce/reduce conflict for INTEGER resolved using rule 32 (sentence -> range_incl .)
  ! reduce/reduce conflict for DEF resolved using rule 32 (sentence -> range_incl .)
  ! reduce/reduce conflict for CLASS resolved using rule 32 (sentence -> range_incl .)
  ! reduce/reduce conflict for RETURN resolved using rule 32 (sentence -> range_incl .)
  ! reduce/reduce conflict for BREAK resolved using rule 32 (sentence -> range_incl .)
  ! reduce/reduce conflict for FLOAT resolved using rule 32 (sentence -> range_incl .)
  ! reduce/reduce conflict for STRING resolved using rule 32 (sentence -> range_incl .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 32 (sentence -> range_incl .)
  ! reduce/reduce conflict for TRUE resolved using rule 32 (sentence -> range_incl .)
  ! reduce/reduce conflict for FALSE resolved using rule 32 (sentence -> range_incl .)
  ! reduce/reduce conflict for NIL resolved using rule 32 (sentence -> range_incl .)
  ! reduce/reduce conflict for $end resolved using rule 32 (sentence -> range_incl .)
  ! reduce/reduce conflict for END resolved using rule 32 (sentence -> range_incl .)
  ! reduce/reduce conflict for ELSE resolved using rule 32 (sentence -> range_incl .)
    ID              reduce using rule 32 (sentence -> range_incl .)
    VAR_INST        reduce using rule 32 (sentence -> range_incl .)
    PUTS            reduce using rule 32 (sentence -> range_incl .)
    IF              reduce using rule 32 (sentence -> range_incl .)
    WHILE           reduce using rule 32 (sentence -> range_incl .)
    FOR             reduce using rule 32 (sentence -> range_incl .)
    LPAREN          reduce using rule 32 (sentence -> range_incl .)
    INTEGER         reduce using rule 32 (sentence -> range_incl .)
    DEF             reduce using rule 32 (sentence -> range_incl .)
    CLASS           reduce using rule 32 (sentence -> range_incl .)
    RETURN          reduce using rule 32 (sentence -> range_incl .)
    BREAK           reduce using rule 32 (sentence -> range_incl .)
    FLOAT           reduce using rule 32 (sentence -> range_incl .)
    STRING          reduce using rule 32 (sentence -> range_incl .)
    BOOLEAN         reduce using rule 32 (sentence -> range_incl .)
    TRUE            reduce using rule 32 (sentence -> range_incl .)
    FALSE           reduce using rule 32 (sentence -> range_incl .)
    NIL             reduce using rule 32 (sentence -> range_incl .)
    $end            reduce using rule 32 (sentence -> range_incl .)
    END             reduce using rule 32 (sentence -> range_incl .)
    ELSE            reduce using rule 32 (sentence -> range_incl .)
    EQUALS          reduce using rule 74 (factor -> range_incl .)
    NEQUALS         reduce using rule 74 (factor -> range_incl .)
    GREATEREQ       reduce using rule 74 (factor -> range_incl .)
    LESSEQ          reduce using rule 74 (factor -> range_incl .)
    GREATERT        reduce using rule 74 (factor -> range_incl .)
    LESST           reduce using rule 74 (factor -> range_incl .)
    AND             reduce using rule 74 (factor -> range_incl .)
    OR              reduce using rule 74 (factor -> range_incl .)
    AND_OP          reduce using rule 74 (factor -> range_incl .)
    OR_OP           reduce using rule 74 (factor -> range_incl .)
    TIMES           reduce using rule 74 (factor -> range_incl .)
    DIVIDE          reduce using rule 74 (factor -> range_incl .)
    EXPONENT        reduce using rule 74 (factor -> range_incl .)
    MODULE          reduce using rule 74 (factor -> range_incl .)
    PLUS            reduce using rule 74 (factor -> range_incl .)
    MINUS           reduce using rule 74 (factor -> range_incl .)

  ! ID              [ reduce using rule 74 (factor -> range_incl .) ]
  ! VAR_INST        [ reduce using rule 74 (factor -> range_incl .) ]
  ! PUTS            [ reduce using rule 74 (factor -> range_incl .) ]
  ! IF              [ reduce using rule 74 (factor -> range_incl .) ]
  ! WHILE           [ reduce using rule 74 (factor -> range_incl .) ]
  ! FOR             [ reduce using rule 74 (factor -> range_incl .) ]
  ! LPAREN          [ reduce using rule 74 (factor -> range_incl .) ]
  ! INTEGER         [ reduce using rule 74 (factor -> range_incl .) ]
  ! DEF             [ reduce using rule 74 (factor -> range_incl .) ]
  ! CLASS           [ reduce using rule 74 (factor -> range_incl .) ]
  ! RETURN          [ reduce using rule 74 (factor -> range_incl .) ]
  ! BREAK           [ reduce using rule 74 (factor -> range_incl .) ]
  ! FLOAT           [ reduce using rule 74 (factor -> range_incl .) ]
  ! STRING          [ reduce using rule 74 (factor -> range_incl .) ]
  ! BOOLEAN         [ reduce using rule 74 (factor -> range_incl .) ]
  ! TRUE            [ reduce using rule 74 (factor -> range_incl .) ]
  ! FALSE           [ reduce using rule 74 (factor -> range_incl .) ]
  ! NIL             [ reduce using rule 74 (factor -> range_incl .) ]
  ! $end            [ reduce using rule 74 (factor -> range_incl .) ]
  ! END             [ reduce using rule 74 (factor -> range_incl .) ]
  ! ELSE            [ reduce using rule 74 (factor -> range_incl .) ]


state 13

    (33) sentence -> range_excl .
    (75) factor -> range_excl .

  ! reduce/reduce conflict for ID resolved using rule 33 (sentence -> range_excl .)
  ! reduce/reduce conflict for VAR_INST resolved using rule 33 (sentence -> range_excl .)
  ! reduce/reduce conflict for PUTS resolved using rule 33 (sentence -> range_excl .)
  ! reduce/reduce conflict for IF resolved using rule 33 (sentence -> range_excl .)
  ! reduce/reduce conflict for WHILE resolved using rule 33 (sentence -> range_excl .)
  ! reduce/reduce conflict for FOR resolved using rule 33 (sentence -> range_excl .)
  ! reduce/reduce conflict for LPAREN resolved using rule 33 (sentence -> range_excl .)
  ! reduce/reduce conflict for INTEGER resolved using rule 33 (sentence -> range_excl .)
  ! reduce/reduce conflict for DEF resolved using rule 33 (sentence -> range_excl .)
  ! reduce/reduce conflict for CLASS resolved using rule 33 (sentence -> range_excl .)
  ! reduce/reduce conflict for RETURN resolved using rule 33 (sentence -> range_excl .)
  ! reduce/reduce conflict for BREAK resolved using rule 33 (sentence -> range_excl .)
  ! reduce/reduce conflict for FLOAT resolved using rule 33 (sentence -> range_excl .)
  ! reduce/reduce conflict for STRING resolved using rule 33 (sentence -> range_excl .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 33 (sentence -> range_excl .)
  ! reduce/reduce conflict for TRUE resolved using rule 33 (sentence -> range_excl .)
  ! reduce/reduce conflict for FALSE resolved using rule 33 (sentence -> range_excl .)
  ! reduce/reduce conflict for NIL resolved using rule 33 (sentence -> range_excl .)
  ! reduce/reduce conflict for $end resolved using rule 33 (sentence -> range_excl .)
  ! reduce/reduce conflict for END resolved using rule 33 (sentence -> range_excl .)
  ! reduce/reduce conflict for ELSE resolved using rule 33 (sentence -> range_excl .)
    ID              reduce using rule 33 (sentence -> range_excl .)
    VAR_INST        reduce using rule 33 (sentence -> range_excl .)
    PUTS            reduce using rule 33 (sentence -> range_excl .)
    IF              reduce using rule 33 (sentence -> range_excl .)
    WHILE           reduce using rule 33 (sentence -> range_excl .)
    FOR             reduce using rule 33 (sentence -> range_excl .)
    LPAREN          reduce using rule 33 (sentence -> range_excl .)
    INTEGER         reduce using rule 33 (sentence -> range_excl .)
    DEF             reduce using rule 33 (sentence -> range_excl .)
    CLASS           reduce using rule 33 (sentence -> range_excl .)
    RETURN          reduce using rule 33 (sentence -> range_excl .)
    BREAK           reduce using rule 33 (sentence -> range_excl .)
    FLOAT           reduce using rule 33 (sentence -> range_excl .)
    STRING          reduce using rule 33 (sentence -> range_excl .)
    BOOLEAN         reduce using rule 33 (sentence -> range_excl .)
    TRUE            reduce using rule 33 (sentence -> range_excl .)
    FALSE           reduce using rule 33 (sentence -> range_excl .)
    NIL             reduce using rule 33 (sentence -> range_excl .)
    $end            reduce using rule 33 (sentence -> range_excl .)
    END             reduce using rule 33 (sentence -> range_excl .)
    ELSE            reduce using rule 33 (sentence -> range_excl .)
    EQUALS          reduce using rule 75 (factor -> range_excl .)
    NEQUALS         reduce using rule 75 (factor -> range_excl .)
    GREATEREQ       reduce using rule 75 (factor -> range_excl .)
    LESSEQ          reduce using rule 75 (factor -> range_excl .)
    GREATERT        reduce using rule 75 (factor -> range_excl .)
    LESST           reduce using rule 75 (factor -> range_excl .)
    AND             reduce using rule 75 (factor -> range_excl .)
    OR              reduce using rule 75 (factor -> range_excl .)
    AND_OP          reduce using rule 75 (factor -> range_excl .)
    OR_OP           reduce using rule 75 (factor -> range_excl .)
    TIMES           reduce using rule 75 (factor -> range_excl .)
    DIVIDE          reduce using rule 75 (factor -> range_excl .)
    EXPONENT        reduce using rule 75 (factor -> range_excl .)
    MODULE          reduce using rule 75 (factor -> range_excl .)
    PLUS            reduce using rule 75 (factor -> range_excl .)
    MINUS           reduce using rule 75 (factor -> range_excl .)

  ! ID              [ reduce using rule 75 (factor -> range_excl .) ]
  ! VAR_INST        [ reduce using rule 75 (factor -> range_excl .) ]
  ! PUTS            [ reduce using rule 75 (factor -> range_excl .) ]
  ! IF              [ reduce using rule 75 (factor -> range_excl .) ]
  ! WHILE           [ reduce using rule 75 (factor -> range_excl .) ]
  ! FOR             [ reduce using rule 75 (factor -> range_excl .) ]
  ! LPAREN          [ reduce using rule 75 (factor -> range_excl .) ]
  ! INTEGER         [ reduce using rule 75 (factor -> range_excl .) ]
  ! DEF             [ reduce using rule 75 (factor -> range_excl .) ]
  ! CLASS           [ reduce using rule 75 (factor -> range_excl .) ]
  ! RETURN          [ reduce using rule 75 (factor -> range_excl .) ]
  ! BREAK           [ reduce using rule 75 (factor -> range_excl .) ]
  ! FLOAT           [ reduce using rule 75 (factor -> range_excl .) ]
  ! STRING          [ reduce using rule 75 (factor -> range_excl .) ]
  ! BOOLEAN         [ reduce using rule 75 (factor -> range_excl .) ]
  ! TRUE            [ reduce using rule 75 (factor -> range_excl .) ]
  ! FALSE           [ reduce using rule 75 (factor -> range_excl .) ]
  ! NIL             [ reduce using rule 75 (factor -> range_excl .) ]
  ! $end            [ reduce using rule 75 (factor -> range_excl .) ]
  ! END             [ reduce using rule 75 (factor -> range_excl .) ]
  ! ELSE            [ reduce using rule 75 (factor -> range_excl .) ]


state 14

    (34) sentence -> hash .

    ID              reduce using rule 34 (sentence -> hash .)
    VAR_INST        reduce using rule 34 (sentence -> hash .)
    PUTS            reduce using rule 34 (sentence -> hash .)
    IF              reduce using rule 34 (sentence -> hash .)
    WHILE           reduce using rule 34 (sentence -> hash .)
    FOR             reduce using rule 34 (sentence -> hash .)
    LPAREN          reduce using rule 34 (sentence -> hash .)
    INTEGER         reduce using rule 34 (sentence -> hash .)
    DEF             reduce using rule 34 (sentence -> hash .)
    CLASS           reduce using rule 34 (sentence -> hash .)
    RETURN          reduce using rule 34 (sentence -> hash .)
    BREAK           reduce using rule 34 (sentence -> hash .)
    FLOAT           reduce using rule 34 (sentence -> hash .)
    STRING          reduce using rule 34 (sentence -> hash .)
    BOOLEAN         reduce using rule 34 (sentence -> hash .)
    TRUE            reduce using rule 34 (sentence -> hash .)
    FALSE           reduce using rule 34 (sentence -> hash .)
    NIL             reduce using rule 34 (sentence -> hash .)
    $end            reduce using rule 34 (sentence -> hash .)
    END             reduce using rule 34 (sentence -> hash .)
    ELSE            reduce using rule 34 (sentence -> hash .)


state 15

    (35) sentence -> function .

    ID              reduce using rule 35 (sentence -> function .)
    VAR_INST        reduce using rule 35 (sentence -> function .)
    PUTS            reduce using rule 35 (sentence -> function .)
    IF              reduce using rule 35 (sentence -> function .)
    WHILE           reduce using rule 35 (sentence -> function .)
    FOR             reduce using rule 35 (sentence -> function .)
    LPAREN          reduce using rule 35 (sentence -> function .)
    INTEGER         reduce using rule 35 (sentence -> function .)
    DEF             reduce using rule 35 (sentence -> function .)
    CLASS           reduce using rule 35 (sentence -> function .)
    RETURN          reduce using rule 35 (sentence -> function .)
    BREAK           reduce using rule 35 (sentence -> function .)
    FLOAT           reduce using rule 35 (sentence -> function .)
    STRING          reduce using rule 35 (sentence -> function .)
    BOOLEAN         reduce using rule 35 (sentence -> function .)
    TRUE            reduce using rule 35 (sentence -> function .)
    FALSE           reduce using rule 35 (sentence -> function .)
    NIL             reduce using rule 35 (sentence -> function .)
    $end            reduce using rule 35 (sentence -> function .)
    END             reduce using rule 35 (sentence -> function .)
    ELSE            reduce using rule 35 (sentence -> function .)


state 16

    (36) sentence -> class_def .

    ID              reduce using rule 36 (sentence -> class_def .)
    VAR_INST        reduce using rule 36 (sentence -> class_def .)
    PUTS            reduce using rule 36 (sentence -> class_def .)
    IF              reduce using rule 36 (sentence -> class_def .)
    WHILE           reduce using rule 36 (sentence -> class_def .)
    FOR             reduce using rule 36 (sentence -> class_def .)
    LPAREN          reduce using rule 36 (sentence -> class_def .)
    INTEGER         reduce using rule 36 (sentence -> class_def .)
    DEF             reduce using rule 36 (sentence -> class_def .)
    CLASS           reduce using rule 36 (sentence -> class_def .)
    RETURN          reduce using rule 36 (sentence -> class_def .)
    BREAK           reduce using rule 36 (sentence -> class_def .)
    FLOAT           reduce using rule 36 (sentence -> class_def .)
    STRING          reduce using rule 36 (sentence -> class_def .)
    BOOLEAN         reduce using rule 36 (sentence -> class_def .)
    TRUE            reduce using rule 36 (sentence -> class_def .)
    FALSE           reduce using rule 36 (sentence -> class_def .)
    NIL             reduce using rule 36 (sentence -> class_def .)
    $end            reduce using rule 36 (sentence -> class_def .)
    END             reduce using rule 36 (sentence -> class_def .)
    ELSE            reduce using rule 36 (sentence -> class_def .)


state 17

    (37) sentence -> return_stmt .

    ID              reduce using rule 37 (sentence -> return_stmt .)
    VAR_INST        reduce using rule 37 (sentence -> return_stmt .)
    PUTS            reduce using rule 37 (sentence -> return_stmt .)
    IF              reduce using rule 37 (sentence -> return_stmt .)
    WHILE           reduce using rule 37 (sentence -> return_stmt .)
    FOR             reduce using rule 37 (sentence -> return_stmt .)
    LPAREN          reduce using rule 37 (sentence -> return_stmt .)
    INTEGER         reduce using rule 37 (sentence -> return_stmt .)
    DEF             reduce using rule 37 (sentence -> return_stmt .)
    CLASS           reduce using rule 37 (sentence -> return_stmt .)
    RETURN          reduce using rule 37 (sentence -> return_stmt .)
    BREAK           reduce using rule 37 (sentence -> return_stmt .)
    FLOAT           reduce using rule 37 (sentence -> return_stmt .)
    STRING          reduce using rule 37 (sentence -> return_stmt .)
    BOOLEAN         reduce using rule 37 (sentence -> return_stmt .)
    TRUE            reduce using rule 37 (sentence -> return_stmt .)
    FALSE           reduce using rule 37 (sentence -> return_stmt .)
    NIL             reduce using rule 37 (sentence -> return_stmt .)
    $end            reduce using rule 37 (sentence -> return_stmt .)
    END             reduce using rule 37 (sentence -> return_stmt .)
    ELSE            reduce using rule 37 (sentence -> return_stmt .)


state 18

    (38) sentence -> break_stmt .

    ID              reduce using rule 38 (sentence -> break_stmt .)
    VAR_INST        reduce using rule 38 (sentence -> break_stmt .)
    PUTS            reduce using rule 38 (sentence -> break_stmt .)
    IF              reduce using rule 38 (sentence -> break_stmt .)
    WHILE           reduce using rule 38 (sentence -> break_stmt .)
    FOR             reduce using rule 38 (sentence -> break_stmt .)
    LPAREN          reduce using rule 38 (sentence -> break_stmt .)
    INTEGER         reduce using rule 38 (sentence -> break_stmt .)
    DEF             reduce using rule 38 (sentence -> break_stmt .)
    CLASS           reduce using rule 38 (sentence -> break_stmt .)
    RETURN          reduce using rule 38 (sentence -> break_stmt .)
    BREAK           reduce using rule 38 (sentence -> break_stmt .)
    FLOAT           reduce using rule 38 (sentence -> break_stmt .)
    STRING          reduce using rule 38 (sentence -> break_stmt .)
    BOOLEAN         reduce using rule 38 (sentence -> break_stmt .)
    TRUE            reduce using rule 38 (sentence -> break_stmt .)
    FALSE           reduce using rule 38 (sentence -> break_stmt .)
    NIL             reduce using rule 38 (sentence -> break_stmt .)
    $end            reduce using rule 38 (sentence -> break_stmt .)
    END             reduce using rule 38 (sentence -> break_stmt .)
    ELSE            reduce using rule 38 (sentence -> break_stmt .)


state 19

    (39) sentence -> function_call_empty .
    (77) factor -> function_call_empty .

  ! reduce/reduce conflict for ID resolved using rule 39 (sentence -> function_call_empty .)
  ! reduce/reduce conflict for VAR_INST resolved using rule 39 (sentence -> function_call_empty .)
  ! reduce/reduce conflict for PUTS resolved using rule 39 (sentence -> function_call_empty .)
  ! reduce/reduce conflict for IF resolved using rule 39 (sentence -> function_call_empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 39 (sentence -> function_call_empty .)
  ! reduce/reduce conflict for FOR resolved using rule 39 (sentence -> function_call_empty .)
  ! reduce/reduce conflict for LPAREN resolved using rule 39 (sentence -> function_call_empty .)
  ! reduce/reduce conflict for INTEGER resolved using rule 39 (sentence -> function_call_empty .)
  ! reduce/reduce conflict for DEF resolved using rule 39 (sentence -> function_call_empty .)
  ! reduce/reduce conflict for CLASS resolved using rule 39 (sentence -> function_call_empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 39 (sentence -> function_call_empty .)
  ! reduce/reduce conflict for BREAK resolved using rule 39 (sentence -> function_call_empty .)
  ! reduce/reduce conflict for FLOAT resolved using rule 39 (sentence -> function_call_empty .)
  ! reduce/reduce conflict for STRING resolved using rule 39 (sentence -> function_call_empty .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 39 (sentence -> function_call_empty .)
  ! reduce/reduce conflict for TRUE resolved using rule 39 (sentence -> function_call_empty .)
  ! reduce/reduce conflict for FALSE resolved using rule 39 (sentence -> function_call_empty .)
  ! reduce/reduce conflict for NIL resolved using rule 39 (sentence -> function_call_empty .)
  ! reduce/reduce conflict for $end resolved using rule 39 (sentence -> function_call_empty .)
  ! reduce/reduce conflict for END resolved using rule 39 (sentence -> function_call_empty .)
  ! reduce/reduce conflict for ELSE resolved using rule 39 (sentence -> function_call_empty .)
    ID              reduce using rule 39 (sentence -> function_call_empty .)
    VAR_INST        reduce using rule 39 (sentence -> function_call_empty .)
    PUTS            reduce using rule 39 (sentence -> function_call_empty .)
    IF              reduce using rule 39 (sentence -> function_call_empty .)
    WHILE           reduce using rule 39 (sentence -> function_call_empty .)
    FOR             reduce using rule 39 (sentence -> function_call_empty .)
    LPAREN          reduce using rule 39 (sentence -> function_call_empty .)
    INTEGER         reduce using rule 39 (sentence -> function_call_empty .)
    DEF             reduce using rule 39 (sentence -> function_call_empty .)
    CLASS           reduce using rule 39 (sentence -> function_call_empty .)
    RETURN          reduce using rule 39 (sentence -> function_call_empty .)
    BREAK           reduce using rule 39 (sentence -> function_call_empty .)
    FLOAT           reduce using rule 39 (sentence -> function_call_empty .)
    STRING          reduce using rule 39 (sentence -> function_call_empty .)
    BOOLEAN         reduce using rule 39 (sentence -> function_call_empty .)
    TRUE            reduce using rule 39 (sentence -> function_call_empty .)
    FALSE           reduce using rule 39 (sentence -> function_call_empty .)
    NIL             reduce using rule 39 (sentence -> function_call_empty .)
    $end            reduce using rule 39 (sentence -> function_call_empty .)
    END             reduce using rule 39 (sentence -> function_call_empty .)
    ELSE            reduce using rule 39 (sentence -> function_call_empty .)
    EQUALS          reduce using rule 77 (factor -> function_call_empty .)
    NEQUALS         reduce using rule 77 (factor -> function_call_empty .)
    GREATEREQ       reduce using rule 77 (factor -> function_call_empty .)
    LESSEQ          reduce using rule 77 (factor -> function_call_empty .)
    GREATERT        reduce using rule 77 (factor -> function_call_empty .)
    LESST           reduce using rule 77 (factor -> function_call_empty .)
    AND             reduce using rule 77 (factor -> function_call_empty .)
    OR              reduce using rule 77 (factor -> function_call_empty .)
    AND_OP          reduce using rule 77 (factor -> function_call_empty .)
    OR_OP           reduce using rule 77 (factor -> function_call_empty .)
    TIMES           reduce using rule 77 (factor -> function_call_empty .)
    DIVIDE          reduce using rule 77 (factor -> function_call_empty .)
    EXPONENT        reduce using rule 77 (factor -> function_call_empty .)
    MODULE          reduce using rule 77 (factor -> function_call_empty .)
    PLUS            reduce using rule 77 (factor -> function_call_empty .)
    MINUS           reduce using rule 77 (factor -> function_call_empty .)

  ! ID              [ reduce using rule 77 (factor -> function_call_empty .) ]
  ! VAR_INST        [ reduce using rule 77 (factor -> function_call_empty .) ]
  ! PUTS            [ reduce using rule 77 (factor -> function_call_empty .) ]
  ! IF              [ reduce using rule 77 (factor -> function_call_empty .) ]
  ! WHILE           [ reduce using rule 77 (factor -> function_call_empty .) ]
  ! FOR             [ reduce using rule 77 (factor -> function_call_empty .) ]
  ! LPAREN          [ reduce using rule 77 (factor -> function_call_empty .) ]
  ! INTEGER         [ reduce using rule 77 (factor -> function_call_empty .) ]
  ! DEF             [ reduce using rule 77 (factor -> function_call_empty .) ]
  ! CLASS           [ reduce using rule 77 (factor -> function_call_empty .) ]
  ! RETURN          [ reduce using rule 77 (factor -> function_call_empty .) ]
  ! BREAK           [ reduce using rule 77 (factor -> function_call_empty .) ]
  ! FLOAT           [ reduce using rule 77 (factor -> function_call_empty .) ]
  ! STRING          [ reduce using rule 77 (factor -> function_call_empty .) ]
  ! BOOLEAN         [ reduce using rule 77 (factor -> function_call_empty .) ]
  ! TRUE            [ reduce using rule 77 (factor -> function_call_empty .) ]
  ! FALSE           [ reduce using rule 77 (factor -> function_call_empty .) ]
  ! NIL             [ reduce using rule 77 (factor -> function_call_empty .) ]
  ! $end            [ reduce using rule 77 (factor -> function_call_empty .) ]
  ! END             [ reduce using rule 77 (factor -> function_call_empty .) ]
  ! ELSE            [ reduce using rule 77 (factor -> function_call_empty .) ]


state 20

    (40) sentence -> function_call_args .
    (76) factor -> function_call_args .

  ! reduce/reduce conflict for ID resolved using rule 40 (sentence -> function_call_args .)
  ! reduce/reduce conflict for VAR_INST resolved using rule 40 (sentence -> function_call_args .)
  ! reduce/reduce conflict for PUTS resolved using rule 40 (sentence -> function_call_args .)
  ! reduce/reduce conflict for IF resolved using rule 40 (sentence -> function_call_args .)
  ! reduce/reduce conflict for WHILE resolved using rule 40 (sentence -> function_call_args .)
  ! reduce/reduce conflict for FOR resolved using rule 40 (sentence -> function_call_args .)
  ! reduce/reduce conflict for LPAREN resolved using rule 40 (sentence -> function_call_args .)
  ! reduce/reduce conflict for INTEGER resolved using rule 40 (sentence -> function_call_args .)
  ! reduce/reduce conflict for DEF resolved using rule 40 (sentence -> function_call_args .)
  ! reduce/reduce conflict for CLASS resolved using rule 40 (sentence -> function_call_args .)
  ! reduce/reduce conflict for RETURN resolved using rule 40 (sentence -> function_call_args .)
  ! reduce/reduce conflict for BREAK resolved using rule 40 (sentence -> function_call_args .)
  ! reduce/reduce conflict for FLOAT resolved using rule 40 (sentence -> function_call_args .)
  ! reduce/reduce conflict for STRING resolved using rule 40 (sentence -> function_call_args .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 40 (sentence -> function_call_args .)
  ! reduce/reduce conflict for TRUE resolved using rule 40 (sentence -> function_call_args .)
  ! reduce/reduce conflict for FALSE resolved using rule 40 (sentence -> function_call_args .)
  ! reduce/reduce conflict for NIL resolved using rule 40 (sentence -> function_call_args .)
  ! reduce/reduce conflict for $end resolved using rule 40 (sentence -> function_call_args .)
  ! reduce/reduce conflict for END resolved using rule 40 (sentence -> function_call_args .)
  ! reduce/reduce conflict for ELSE resolved using rule 40 (sentence -> function_call_args .)
    ID              reduce using rule 40 (sentence -> function_call_args .)
    VAR_INST        reduce using rule 40 (sentence -> function_call_args .)
    PUTS            reduce using rule 40 (sentence -> function_call_args .)
    IF              reduce using rule 40 (sentence -> function_call_args .)
    WHILE           reduce using rule 40 (sentence -> function_call_args .)
    FOR             reduce using rule 40 (sentence -> function_call_args .)
    LPAREN          reduce using rule 40 (sentence -> function_call_args .)
    INTEGER         reduce using rule 40 (sentence -> function_call_args .)
    DEF             reduce using rule 40 (sentence -> function_call_args .)
    CLASS           reduce using rule 40 (sentence -> function_call_args .)
    RETURN          reduce using rule 40 (sentence -> function_call_args .)
    BREAK           reduce using rule 40 (sentence -> function_call_args .)
    FLOAT           reduce using rule 40 (sentence -> function_call_args .)
    STRING          reduce using rule 40 (sentence -> function_call_args .)
    BOOLEAN         reduce using rule 40 (sentence -> function_call_args .)
    TRUE            reduce using rule 40 (sentence -> function_call_args .)
    FALSE           reduce using rule 40 (sentence -> function_call_args .)
    NIL             reduce using rule 40 (sentence -> function_call_args .)
    $end            reduce using rule 40 (sentence -> function_call_args .)
    END             reduce using rule 40 (sentence -> function_call_args .)
    ELSE            reduce using rule 40 (sentence -> function_call_args .)
    EQUALS          reduce using rule 76 (factor -> function_call_args .)
    NEQUALS         reduce using rule 76 (factor -> function_call_args .)
    GREATEREQ       reduce using rule 76 (factor -> function_call_args .)
    LESSEQ          reduce using rule 76 (factor -> function_call_args .)
    GREATERT        reduce using rule 76 (factor -> function_call_args .)
    LESST           reduce using rule 76 (factor -> function_call_args .)
    AND             reduce using rule 76 (factor -> function_call_args .)
    OR              reduce using rule 76 (factor -> function_call_args .)
    AND_OP          reduce using rule 76 (factor -> function_call_args .)
    OR_OP           reduce using rule 76 (factor -> function_call_args .)
    TIMES           reduce using rule 76 (factor -> function_call_args .)
    DIVIDE          reduce using rule 76 (factor -> function_call_args .)
    EXPONENT        reduce using rule 76 (factor -> function_call_args .)
    MODULE          reduce using rule 76 (factor -> function_call_args .)
    PLUS            reduce using rule 76 (factor -> function_call_args .)
    MINUS           reduce using rule 76 (factor -> function_call_args .)

  ! ID              [ reduce using rule 76 (factor -> function_call_args .) ]
  ! VAR_INST        [ reduce using rule 76 (factor -> function_call_args .) ]
  ! PUTS            [ reduce using rule 76 (factor -> function_call_args .) ]
  ! IF              [ reduce using rule 76 (factor -> function_call_args .) ]
  ! WHILE           [ reduce using rule 76 (factor -> function_call_args .) ]
  ! FOR             [ reduce using rule 76 (factor -> function_call_args .) ]
  ! LPAREN          [ reduce using rule 76 (factor -> function_call_args .) ]
  ! INTEGER         [ reduce using rule 76 (factor -> function_call_args .) ]
  ! DEF             [ reduce using rule 76 (factor -> function_call_args .) ]
  ! CLASS           [ reduce using rule 76 (factor -> function_call_args .) ]
  ! RETURN          [ reduce using rule 76 (factor -> function_call_args .) ]
  ! BREAK           [ reduce using rule 76 (factor -> function_call_args .) ]
  ! FLOAT           [ reduce using rule 76 (factor -> function_call_args .) ]
  ! STRING          [ reduce using rule 76 (factor -> function_call_args .) ]
  ! BOOLEAN         [ reduce using rule 76 (factor -> function_call_args .) ]
  ! TRUE            [ reduce using rule 76 (factor -> function_call_args .) ]
  ! FALSE           [ reduce using rule 76 (factor -> function_call_args .) ]
  ! NIL             [ reduce using rule 76 (factor -> function_call_args .) ]
  ! $end            [ reduce using rule 76 (factor -> function_call_args .) ]
  ! END             [ reduce using rule 76 (factor -> function_call_args .) ]
  ! ELSE            [ reduce using rule 76 (factor -> function_call_args .) ]


state 21

    (41) sentence -> methods .

    ID              reduce using rule 41 (sentence -> methods .)
    VAR_INST        reduce using rule 41 (sentence -> methods .)
    PUTS            reduce using rule 41 (sentence -> methods .)
    IF              reduce using rule 41 (sentence -> methods .)
    WHILE           reduce using rule 41 (sentence -> methods .)
    FOR             reduce using rule 41 (sentence -> methods .)
    LPAREN          reduce using rule 41 (sentence -> methods .)
    INTEGER         reduce using rule 41 (sentence -> methods .)
    DEF             reduce using rule 41 (sentence -> methods .)
    CLASS           reduce using rule 41 (sentence -> methods .)
    RETURN          reduce using rule 41 (sentence -> methods .)
    BREAK           reduce using rule 41 (sentence -> methods .)
    FLOAT           reduce using rule 41 (sentence -> methods .)
    STRING          reduce using rule 41 (sentence -> methods .)
    BOOLEAN         reduce using rule 41 (sentence -> methods .)
    TRUE            reduce using rule 41 (sentence -> methods .)
    FALSE           reduce using rule 41 (sentence -> methods .)
    NIL             reduce using rule 41 (sentence -> methods .)
    $end            reduce using rule 41 (sentence -> methods .)
    END             reduce using rule 41 (sentence -> methods .)
    ELSE            reduce using rule 41 (sentence -> methods .)


state 22

    (45) assignment -> ID . ASSIGN expression
    (47) assignment -> ID . PLUS ASSIGN expression
    (48) assignment -> ID . MINUS ASSIGN expression
    (49) assignment -> ID . TIMES ASSIGN expression
    (50) assignment -> ID . DIVIDE ASSIGN expression
    (80) expression -> ID . DOT ID LPAREN args_opt RPAREN
    (52) input -> ID . ASSIGN GETS method_chain
    (81) array -> ID . ASSIGN LCORCH elements RCORCH
    (85) hash -> ID . ASSIGN LBRACE hash_pairs RBRACE
    (78) function_call_empty -> ID . LPAREN RPAREN
    (79) function_call_args -> ID . LPAREN args RPAREN
    (42) methods -> ID . DOT ID
    (67) factor -> ID .

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    ASSIGN          shift and go to state 53
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 56
    DIVIDE          shift and go to state 57
    DOT             shift and go to state 58
    LPAREN          shift and go to state 59
    EQUALS          reduce using rule 67 (factor -> ID .)
    NEQUALS         reduce using rule 67 (factor -> ID .)
    GREATEREQ       reduce using rule 67 (factor -> ID .)
    LESSEQ          reduce using rule 67 (factor -> ID .)
    GREATERT        reduce using rule 67 (factor -> ID .)
    LESST           reduce using rule 67 (factor -> ID .)
    AND             reduce using rule 67 (factor -> ID .)
    OR              reduce using rule 67 (factor -> ID .)
    AND_OP          reduce using rule 67 (factor -> ID .)
    OR_OP           reduce using rule 67 (factor -> ID .)
    EXPONENT        reduce using rule 67 (factor -> ID .)
    MODULE          reduce using rule 67 (factor -> ID .)
    ID              reduce using rule 67 (factor -> ID .)
    VAR_INST        reduce using rule 67 (factor -> ID .)
    PUTS            reduce using rule 67 (factor -> ID .)
    IF              reduce using rule 67 (factor -> ID .)
    WHILE           reduce using rule 67 (factor -> ID .)
    FOR             reduce using rule 67 (factor -> ID .)
    INTEGER         reduce using rule 67 (factor -> ID .)
    DEF             reduce using rule 67 (factor -> ID .)
    CLASS           reduce using rule 67 (factor -> ID .)
    RETURN          reduce using rule 67 (factor -> ID .)
    BREAK           reduce using rule 67 (factor -> ID .)
    FLOAT           reduce using rule 67 (factor -> ID .)
    STRING          reduce using rule 67 (factor -> ID .)
    BOOLEAN         reduce using rule 67 (factor -> ID .)
    TRUE            reduce using rule 67 (factor -> ID .)
    FALSE           reduce using rule 67 (factor -> ID .)
    NIL             reduce using rule 67 (factor -> ID .)
    $end            reduce using rule 67 (factor -> ID .)
    END             reduce using rule 67 (factor -> ID .)
    ELSE            reduce using rule 67 (factor -> ID .)

  ! TIMES           [ reduce using rule 67 (factor -> ID .) ]
  ! DIVIDE          [ reduce using rule 67 (factor -> ID .) ]
  ! PLUS            [ reduce using rule 67 (factor -> ID .) ]
  ! MINUS           [ reduce using rule 67 (factor -> ID .) ]
  ! LPAREN          [ reduce using rule 67 (factor -> ID .) ]


state 23

    (46) assignment -> VAR_INST . ASSIGN expression
    (68) factor -> VAR_INST .

    ASSIGN          shift and go to state 60
    EQUALS          reduce using rule 68 (factor -> VAR_INST .)
    NEQUALS         reduce using rule 68 (factor -> VAR_INST .)
    GREATEREQ       reduce using rule 68 (factor -> VAR_INST .)
    LESSEQ          reduce using rule 68 (factor -> VAR_INST .)
    GREATERT        reduce using rule 68 (factor -> VAR_INST .)
    LESST           reduce using rule 68 (factor -> VAR_INST .)
    AND             reduce using rule 68 (factor -> VAR_INST .)
    OR              reduce using rule 68 (factor -> VAR_INST .)
    AND_OP          reduce using rule 68 (factor -> VAR_INST .)
    OR_OP           reduce using rule 68 (factor -> VAR_INST .)
    TIMES           reduce using rule 68 (factor -> VAR_INST .)
    DIVIDE          reduce using rule 68 (factor -> VAR_INST .)
    EXPONENT        reduce using rule 68 (factor -> VAR_INST .)
    MODULE          reduce using rule 68 (factor -> VAR_INST .)
    PLUS            reduce using rule 68 (factor -> VAR_INST .)
    MINUS           reduce using rule 68 (factor -> VAR_INST .)
    ID              reduce using rule 68 (factor -> VAR_INST .)
    VAR_INST        reduce using rule 68 (factor -> VAR_INST .)
    PUTS            reduce using rule 68 (factor -> VAR_INST .)
    IF              reduce using rule 68 (factor -> VAR_INST .)
    WHILE           reduce using rule 68 (factor -> VAR_INST .)
    FOR             reduce using rule 68 (factor -> VAR_INST .)
    LPAREN          reduce using rule 68 (factor -> VAR_INST .)
    INTEGER         reduce using rule 68 (factor -> VAR_INST .)
    DEF             reduce using rule 68 (factor -> VAR_INST .)
    CLASS           reduce using rule 68 (factor -> VAR_INST .)
    RETURN          reduce using rule 68 (factor -> VAR_INST .)
    BREAK           reduce using rule 68 (factor -> VAR_INST .)
    FLOAT           reduce using rule 68 (factor -> VAR_INST .)
    STRING          reduce using rule 68 (factor -> VAR_INST .)
    BOOLEAN         reduce using rule 68 (factor -> VAR_INST .)
    TRUE            reduce using rule 68 (factor -> VAR_INST .)
    FALSE           reduce using rule 68 (factor -> VAR_INST .)
    NIL             reduce using rule 68 (factor -> VAR_INST .)
    $end            reduce using rule 68 (factor -> VAR_INST .)
    END             reduce using rule 68 (factor -> VAR_INST .)
    ELSE            reduce using rule 68 (factor -> VAR_INST .)


state 24

    (57) expression -> term .
    (58) term -> term . TIMES factor
    (59) term -> term . DIVIDE factor
    (60) term -> term . EXPONENT factor
    (61) term -> term . MODULE factor

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EXPONENT resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
    PLUS            reduce using rule 57 (expression -> term .)
    MINUS           reduce using rule 57 (expression -> term .)
    EQUALS          reduce using rule 57 (expression -> term .)
    NEQUALS         reduce using rule 57 (expression -> term .)
    GREATEREQ       reduce using rule 57 (expression -> term .)
    LESSEQ          reduce using rule 57 (expression -> term .)
    GREATERT        reduce using rule 57 (expression -> term .)
    LESST           reduce using rule 57 (expression -> term .)
    ID              reduce using rule 57 (expression -> term .)
    VAR_INST        reduce using rule 57 (expression -> term .)
    PUTS            reduce using rule 57 (expression -> term .)
    IF              reduce using rule 57 (expression -> term .)
    WHILE           reduce using rule 57 (expression -> term .)
    FOR             reduce using rule 57 (expression -> term .)
    LPAREN          reduce using rule 57 (expression -> term .)
    INTEGER         reduce using rule 57 (expression -> term .)
    DEF             reduce using rule 57 (expression -> term .)
    CLASS           reduce using rule 57 (expression -> term .)
    RETURN          reduce using rule 57 (expression -> term .)
    BREAK           reduce using rule 57 (expression -> term .)
    FLOAT           reduce using rule 57 (expression -> term .)
    STRING          reduce using rule 57 (expression -> term .)
    BOOLEAN         reduce using rule 57 (expression -> term .)
    TRUE            reduce using rule 57 (expression -> term .)
    FALSE           reduce using rule 57 (expression -> term .)
    NIL             reduce using rule 57 (expression -> term .)
    $end            reduce using rule 57 (expression -> term .)
    RPAREN          reduce using rule 57 (expression -> term .)
    AND             reduce using rule 57 (expression -> term .)
    OR              reduce using rule 57 (expression -> term .)
    AND_OP          reduce using rule 57 (expression -> term .)
    OR_OP           reduce using rule 57 (expression -> term .)
    END             reduce using rule 57 (expression -> term .)
    ELSE            reduce using rule 57 (expression -> term .)
    COMMA           reduce using rule 57 (expression -> term .)
    RCORCH          reduce using rule 57 (expression -> term .)
    RBRACE          reduce using rule 57 (expression -> term .)
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    EXPONENT        shift and go to state 63
    MODULE          shift and go to state 64

  ! TIMES           [ reduce using rule 57 (expression -> term .) ]
  ! DIVIDE          [ reduce using rule 57 (expression -> term .) ]
  ! EXPONENT        [ reduce using rule 57 (expression -> term .) ]
  ! MODULE          [ reduce using rule 57 (expression -> term .) ]


state 25

    (89) range_incl -> LPAREN . INTEGER RANGE_INCL INTEGER RPAREN
    (91) range_excl -> LPAREN . INTEGER RANGE_EXCL INTEGER RPAREN
    (72) factor -> LPAREN . expression RPAREN
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . term
    (80) expression -> . ID DOT ID LPAREN args_opt RPAREN
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term EXPONENT factor
    (61) term -> . term MODULE factor
    (62) term -> . factor
    (63) factor -> . INTEGER
    (64) factor -> . FLOAT
    (65) factor -> . STRING
    (66) factor -> . BOOLEAN
    (67) factor -> . ID
    (68) factor -> . VAR_INST
    (69) factor -> . TRUE
    (70) factor -> . FALSE
    (71) factor -> . NIL
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . logic_expression
    (74) factor -> . range_incl
    (75) factor -> . range_excl
    (76) factor -> . function_call_args
    (77) factor -> . function_call_empty
    (95) logic_expression -> . factor logic_op factor
    (96) logic_expression -> . factor logic_connector factor
    (97) logic_expression -> . expression logic_op expression
    (89) range_incl -> . LPAREN INTEGER RANGE_INCL INTEGER RPAREN
    (90) range_incl -> . INTEGER RANGE_INCL INTEGER
    (91) range_excl -> . LPAREN INTEGER RANGE_EXCL INTEGER RPAREN
    (92) range_excl -> . INTEGER RANGE_EXCL INTEGER
    (79) function_call_args -> . ID LPAREN args RPAREN
    (78) function_call_empty -> . ID LPAREN RPAREN

    INTEGER         shift and go to state 66
    ID              shift and go to state 68
    FLOAT           shift and go to state 38
    STRING          shift and go to state 28
    BOOLEAN         shift and go to state 39
    VAR_INST        shift and go to state 69
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    NIL             shift and go to state 42
    LPAREN          shift and go to state 65

    expression                     shift and go to state 67
    term                           shift and go to state 24
    factor                         shift and go to state 27
    logic_expression               shift and go to state 30
    range_incl                     shift and go to state 70
    range_excl                     shift and go to state 71
    function_call_args             shift and go to state 72
    function_call_empty            shift and go to state 73

state 26

    (21) print -> PUTS . factor
    (22) print -> PUTS . STRING
    (51) input -> PUTS . STRING
    (63) factor -> . INTEGER
    (64) factor -> . FLOAT
    (65) factor -> . STRING
    (66) factor -> . BOOLEAN
    (67) factor -> . ID
    (68) factor -> . VAR_INST
    (69) factor -> . TRUE
    (70) factor -> . FALSE
    (71) factor -> . NIL
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . logic_expression
    (74) factor -> . range_incl
    (75) factor -> . range_excl
    (76) factor -> . function_call_args
    (77) factor -> . function_call_empty
    (95) logic_expression -> . factor logic_op factor
    (96) logic_expression -> . factor logic_connector factor
    (97) logic_expression -> . expression logic_op expression
    (89) range_incl -> . LPAREN INTEGER RANGE_INCL INTEGER RPAREN
    (90) range_incl -> . INTEGER RANGE_INCL INTEGER
    (91) range_excl -> . LPAREN INTEGER RANGE_EXCL INTEGER RPAREN
    (92) range_excl -> . INTEGER RANGE_EXCL INTEGER
    (79) function_call_args -> . ID LPAREN args RPAREN
    (78) function_call_empty -> . ID LPAREN RPAREN
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . term
    (80) expression -> . ID DOT ID LPAREN args_opt RPAREN
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term EXPONENT factor
    (61) term -> . term MODULE factor
    (62) term -> . factor

    STRING          shift and go to state 75
    INTEGER         shift and go to state 76
    FLOAT           shift and go to state 38
    BOOLEAN         shift and go to state 39
    ID              shift and go to state 77
    VAR_INST        shift and go to state 69
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    NIL             shift and go to state 42
    LPAREN          shift and go to state 65

    factor                         shift and go to state 74
    expression                     shift and go to state 78
    logic_expression               shift and go to state 30
    range_incl                     shift and go to state 70
    range_excl                     shift and go to state 71
    function_call_args             shift and go to state 72
    function_call_empty            shift and go to state 73
    term                           shift and go to state 24

state 27

    (62) term -> factor .
    (95) logic_expression -> factor . logic_op factor
    (96) logic_expression -> factor . logic_connector factor
    (98) logic_op -> . EQUALS
    (99) logic_op -> . NEQUALS
    (100) logic_op -> . GREATEREQ
    (101) logic_op -> . LESSEQ
    (102) logic_op -> . GREATERT
    (103) logic_op -> . LESST
    (104) logic_connector -> . AND
    (105) logic_connector -> . OR
    (106) logic_connector -> . AND_OP
    (107) logic_connector -> . OR_OP

  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NEQUALS resolved as shift
  ! shift/reduce conflict for GREATEREQ resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for GREATERT resolved as shift
  ! shift/reduce conflict for LESST resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
    TIMES           reduce using rule 62 (term -> factor .)
    DIVIDE          reduce using rule 62 (term -> factor .)
    EXPONENT        reduce using rule 62 (term -> factor .)
    MODULE          reduce using rule 62 (term -> factor .)
    PLUS            reduce using rule 62 (term -> factor .)
    MINUS           reduce using rule 62 (term -> factor .)
    ID              reduce using rule 62 (term -> factor .)
    VAR_INST        reduce using rule 62 (term -> factor .)
    PUTS            reduce using rule 62 (term -> factor .)
    IF              reduce using rule 62 (term -> factor .)
    WHILE           reduce using rule 62 (term -> factor .)
    FOR             reduce using rule 62 (term -> factor .)
    LPAREN          reduce using rule 62 (term -> factor .)
    INTEGER         reduce using rule 62 (term -> factor .)
    DEF             reduce using rule 62 (term -> factor .)
    CLASS           reduce using rule 62 (term -> factor .)
    RETURN          reduce using rule 62 (term -> factor .)
    BREAK           reduce using rule 62 (term -> factor .)
    FLOAT           reduce using rule 62 (term -> factor .)
    STRING          reduce using rule 62 (term -> factor .)
    BOOLEAN         reduce using rule 62 (term -> factor .)
    TRUE            reduce using rule 62 (term -> factor .)
    FALSE           reduce using rule 62 (term -> factor .)
    NIL             reduce using rule 62 (term -> factor .)
    $end            reduce using rule 62 (term -> factor .)
    RPAREN          reduce using rule 62 (term -> factor .)
    END             reduce using rule 62 (term -> factor .)
    ELSE            reduce using rule 62 (term -> factor .)
    COMMA           reduce using rule 62 (term -> factor .)
    RCORCH          reduce using rule 62 (term -> factor .)
    RBRACE          reduce using rule 62 (term -> factor .)
    EQUALS          shift and go to state 47
    NEQUALS         shift and go to state 48
    GREATEREQ       shift and go to state 49
    LESSEQ          shift and go to state 50
    GREATERT        shift and go to state 51
    LESST           shift and go to state 52
    AND             shift and go to state 81
    OR              shift and go to state 82
    AND_OP          shift and go to state 83
    OR_OP           shift and go to state 84

  ! EQUALS          [ reduce using rule 62 (term -> factor .) ]
  ! NEQUALS         [ reduce using rule 62 (term -> factor .) ]
  ! GREATEREQ       [ reduce using rule 62 (term -> factor .) ]
  ! LESSEQ          [ reduce using rule 62 (term -> factor .) ]
  ! GREATERT        [ reduce using rule 62 (term -> factor .) ]
  ! LESST           [ reduce using rule 62 (term -> factor .) ]
  ! AND             [ reduce using rule 62 (term -> factor .) ]
  ! OR              [ reduce using rule 62 (term -> factor .) ]
  ! AND_OP          [ reduce using rule 62 (term -> factor .) ]
  ! OR_OP           [ reduce using rule 62 (term -> factor .) ]

    logic_op                       shift and go to state 79
    logic_connector                shift and go to state 80

state 28

    (65) factor -> STRING .

    EQUALS          reduce using rule 65 (factor -> STRING .)
    NEQUALS         reduce using rule 65 (factor -> STRING .)
    GREATEREQ       reduce using rule 65 (factor -> STRING .)
    LESSEQ          reduce using rule 65 (factor -> STRING .)
    GREATERT        reduce using rule 65 (factor -> STRING .)
    LESST           reduce using rule 65 (factor -> STRING .)
    AND             reduce using rule 65 (factor -> STRING .)
    OR              reduce using rule 65 (factor -> STRING .)
    AND_OP          reduce using rule 65 (factor -> STRING .)
    OR_OP           reduce using rule 65 (factor -> STRING .)
    TIMES           reduce using rule 65 (factor -> STRING .)
    DIVIDE          reduce using rule 65 (factor -> STRING .)
    EXPONENT        reduce using rule 65 (factor -> STRING .)
    MODULE          reduce using rule 65 (factor -> STRING .)
    PLUS            reduce using rule 65 (factor -> STRING .)
    MINUS           reduce using rule 65 (factor -> STRING .)
    ID              reduce using rule 65 (factor -> STRING .)
    VAR_INST        reduce using rule 65 (factor -> STRING .)
    PUTS            reduce using rule 65 (factor -> STRING .)
    IF              reduce using rule 65 (factor -> STRING .)
    WHILE           reduce using rule 65 (factor -> STRING .)
    FOR             reduce using rule 65 (factor -> STRING .)
    LPAREN          reduce using rule 65 (factor -> STRING .)
    INTEGER         reduce using rule 65 (factor -> STRING .)
    DEF             reduce using rule 65 (factor -> STRING .)
    CLASS           reduce using rule 65 (factor -> STRING .)
    RETURN          reduce using rule 65 (factor -> STRING .)
    BREAK           reduce using rule 65 (factor -> STRING .)
    FLOAT           reduce using rule 65 (factor -> STRING .)
    STRING          reduce using rule 65 (factor -> STRING .)
    BOOLEAN         reduce using rule 65 (factor -> STRING .)
    TRUE            reduce using rule 65 (factor -> STRING .)
    FALSE           reduce using rule 65 (factor -> STRING .)
    NIL             reduce using rule 65 (factor -> STRING .)
    $end            reduce using rule 65 (factor -> STRING .)
    RPAREN          reduce using rule 65 (factor -> STRING .)
    END             reduce using rule 65 (factor -> STRING .)
    ELSE            reduce using rule 65 (factor -> STRING .)
    COMMA           reduce using rule 65 (factor -> STRING .)
    RCORCH          reduce using rule 65 (factor -> STRING .)
    RBRACE          reduce using rule 65 (factor -> STRING .)


state 29

    (93) condition -> IF . logic_expression body END
    (94) condition -> IF . logic_expression body ELSE body END
    (95) logic_expression -> . factor logic_op factor
    (96) logic_expression -> . factor logic_connector factor
    (97) logic_expression -> . expression logic_op expression
    (63) factor -> . INTEGER
    (64) factor -> . FLOAT
    (65) factor -> . STRING
    (66) factor -> . BOOLEAN
    (67) factor -> . ID
    (68) factor -> . VAR_INST
    (69) factor -> . TRUE
    (70) factor -> . FALSE
    (71) factor -> . NIL
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . logic_expression
    (74) factor -> . range_incl
    (75) factor -> . range_excl
    (76) factor -> . function_call_args
    (77) factor -> . function_call_empty
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . term
    (80) expression -> . ID DOT ID LPAREN args_opt RPAREN
    (89) range_incl -> . LPAREN INTEGER RANGE_INCL INTEGER RPAREN
    (90) range_incl -> . INTEGER RANGE_INCL INTEGER
    (91) range_excl -> . LPAREN INTEGER RANGE_EXCL INTEGER RPAREN
    (92) range_excl -> . INTEGER RANGE_EXCL INTEGER
    (79) function_call_args -> . ID LPAREN args RPAREN
    (78) function_call_empty -> . ID LPAREN RPAREN
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term EXPONENT factor
    (61) term -> . term MODULE factor
    (62) term -> . factor

    INTEGER         shift and go to state 76
    FLOAT           shift and go to state 38
    STRING          shift and go to state 28
    BOOLEAN         shift and go to state 39
    ID              shift and go to state 87
    VAR_INST        shift and go to state 69
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    NIL             shift and go to state 42
    LPAREN          shift and go to state 65

    logic_expression               shift and go to state 85
    factor                         shift and go to state 86
    expression                     shift and go to state 78
    range_incl                     shift and go to state 70
    range_excl                     shift and go to state 71
    function_call_args             shift and go to state 72
    function_call_empty            shift and go to state 73
    term                           shift and go to state 24

state 30

    (73) factor -> logic_expression .

    EQUALS          reduce using rule 73 (factor -> logic_expression .)
    NEQUALS         reduce using rule 73 (factor -> logic_expression .)
    GREATEREQ       reduce using rule 73 (factor -> logic_expression .)
    LESSEQ          reduce using rule 73 (factor -> logic_expression .)
    GREATERT        reduce using rule 73 (factor -> logic_expression .)
    LESST           reduce using rule 73 (factor -> logic_expression .)
    AND             reduce using rule 73 (factor -> logic_expression .)
    OR              reduce using rule 73 (factor -> logic_expression .)
    AND_OP          reduce using rule 73 (factor -> logic_expression .)
    OR_OP           reduce using rule 73 (factor -> logic_expression .)
    TIMES           reduce using rule 73 (factor -> logic_expression .)
    DIVIDE          reduce using rule 73 (factor -> logic_expression .)
    EXPONENT        reduce using rule 73 (factor -> logic_expression .)
    MODULE          reduce using rule 73 (factor -> logic_expression .)
    PLUS            reduce using rule 73 (factor -> logic_expression .)
    MINUS           reduce using rule 73 (factor -> logic_expression .)
    ID              reduce using rule 73 (factor -> logic_expression .)
    VAR_INST        reduce using rule 73 (factor -> logic_expression .)
    PUTS            reduce using rule 73 (factor -> logic_expression .)
    IF              reduce using rule 73 (factor -> logic_expression .)
    WHILE           reduce using rule 73 (factor -> logic_expression .)
    FOR             reduce using rule 73 (factor -> logic_expression .)
    LPAREN          reduce using rule 73 (factor -> logic_expression .)
    INTEGER         reduce using rule 73 (factor -> logic_expression .)
    DEF             reduce using rule 73 (factor -> logic_expression .)
    CLASS           reduce using rule 73 (factor -> logic_expression .)
    RETURN          reduce using rule 73 (factor -> logic_expression .)
    BREAK           reduce using rule 73 (factor -> logic_expression .)
    FLOAT           reduce using rule 73 (factor -> logic_expression .)
    STRING          reduce using rule 73 (factor -> logic_expression .)
    BOOLEAN         reduce using rule 73 (factor -> logic_expression .)
    TRUE            reduce using rule 73 (factor -> logic_expression .)
    FALSE           reduce using rule 73 (factor -> logic_expression .)
    NIL             reduce using rule 73 (factor -> logic_expression .)
    $end            reduce using rule 73 (factor -> logic_expression .)
    RPAREN          reduce using rule 73 (factor -> logic_expression .)
    END             reduce using rule 73 (factor -> logic_expression .)
    ELSE            reduce using rule 73 (factor -> logic_expression .)
    COMMA           reduce using rule 73 (factor -> logic_expression .)
    RCORCH          reduce using rule 73 (factor -> logic_expression .)
    RBRACE          reduce using rule 73 (factor -> logic_expression .)


state 31

    (88) while_loop -> WHILE . logic_expression body END
    (95) logic_expression -> . factor logic_op factor
    (96) logic_expression -> . factor logic_connector factor
    (97) logic_expression -> . expression logic_op expression
    (63) factor -> . INTEGER
    (64) factor -> . FLOAT
    (65) factor -> . STRING
    (66) factor -> . BOOLEAN
    (67) factor -> . ID
    (68) factor -> . VAR_INST
    (69) factor -> . TRUE
    (70) factor -> . FALSE
    (71) factor -> . NIL
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . logic_expression
    (74) factor -> . range_incl
    (75) factor -> . range_excl
    (76) factor -> . function_call_args
    (77) factor -> . function_call_empty
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . term
    (80) expression -> . ID DOT ID LPAREN args_opt RPAREN
    (89) range_incl -> . LPAREN INTEGER RANGE_INCL INTEGER RPAREN
    (90) range_incl -> . INTEGER RANGE_INCL INTEGER
    (91) range_excl -> . LPAREN INTEGER RANGE_EXCL INTEGER RPAREN
    (92) range_excl -> . INTEGER RANGE_EXCL INTEGER
    (79) function_call_args -> . ID LPAREN args RPAREN
    (78) function_call_empty -> . ID LPAREN RPAREN
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term EXPONENT factor
    (61) term -> . term MODULE factor
    (62) term -> . factor

    INTEGER         shift and go to state 76
    FLOAT           shift and go to state 38
    STRING          shift and go to state 28
    BOOLEAN         shift and go to state 39
    ID              shift and go to state 87
    VAR_INST        shift and go to state 69
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    NIL             shift and go to state 42
    LPAREN          shift and go to state 65

    logic_expression               shift and go to state 88
    factor                         shift and go to state 86
    expression                     shift and go to state 78
    range_incl                     shift and go to state 70
    range_excl                     shift and go to state 71
    function_call_args             shift and go to state 72
    function_call_empty            shift and go to state 73
    term                           shift and go to state 24

state 32

    (84) for_loop -> FOR . ID IN range_incl body END

    ID              shift and go to state 89


state 33

    (90) range_incl -> INTEGER . RANGE_INCL INTEGER
    (92) range_excl -> INTEGER . RANGE_EXCL INTEGER
    (63) factor -> INTEGER .

    RANGE_INCL      shift and go to state 90
    RANGE_EXCL      shift and go to state 91
    EQUALS          reduce using rule 63 (factor -> INTEGER .)
    NEQUALS         reduce using rule 63 (factor -> INTEGER .)
    GREATEREQ       reduce using rule 63 (factor -> INTEGER .)
    LESSEQ          reduce using rule 63 (factor -> INTEGER .)
    GREATERT        reduce using rule 63 (factor -> INTEGER .)
    LESST           reduce using rule 63 (factor -> INTEGER .)
    AND             reduce using rule 63 (factor -> INTEGER .)
    OR              reduce using rule 63 (factor -> INTEGER .)
    AND_OP          reduce using rule 63 (factor -> INTEGER .)
    OR_OP           reduce using rule 63 (factor -> INTEGER .)
    TIMES           reduce using rule 63 (factor -> INTEGER .)
    DIVIDE          reduce using rule 63 (factor -> INTEGER .)
    EXPONENT        reduce using rule 63 (factor -> INTEGER .)
    MODULE          reduce using rule 63 (factor -> INTEGER .)
    PLUS            reduce using rule 63 (factor -> INTEGER .)
    MINUS           reduce using rule 63 (factor -> INTEGER .)
    ID              reduce using rule 63 (factor -> INTEGER .)
    VAR_INST        reduce using rule 63 (factor -> INTEGER .)
    PUTS            reduce using rule 63 (factor -> INTEGER .)
    IF              reduce using rule 63 (factor -> INTEGER .)
    WHILE           reduce using rule 63 (factor -> INTEGER .)
    FOR             reduce using rule 63 (factor -> INTEGER .)
    LPAREN          reduce using rule 63 (factor -> INTEGER .)
    INTEGER         reduce using rule 63 (factor -> INTEGER .)
    DEF             reduce using rule 63 (factor -> INTEGER .)
    CLASS           reduce using rule 63 (factor -> INTEGER .)
    RETURN          reduce using rule 63 (factor -> INTEGER .)
    BREAK           reduce using rule 63 (factor -> INTEGER .)
    FLOAT           reduce using rule 63 (factor -> INTEGER .)
    STRING          reduce using rule 63 (factor -> INTEGER .)
    BOOLEAN         reduce using rule 63 (factor -> INTEGER .)
    TRUE            reduce using rule 63 (factor -> INTEGER .)
    FALSE           reduce using rule 63 (factor -> INTEGER .)
    NIL             reduce using rule 63 (factor -> INTEGER .)
    $end            reduce using rule 63 (factor -> INTEGER .)
    END             reduce using rule 63 (factor -> INTEGER .)
    ELSE            reduce using rule 63 (factor -> INTEGER .)


state 34

    (4) function -> DEF . ID body END
    (5) function -> DEF . ID LPAREN args_opt RPAREN body END

    ID              shift and go to state 92


state 35

    (23) class_def -> CLASS . ID body END

    ID              shift and go to state 93


state 36

    (43) return_stmt -> RETURN . factor
    (63) factor -> . INTEGER
    (64) factor -> . FLOAT
    (65) factor -> . STRING
    (66) factor -> . BOOLEAN
    (67) factor -> . ID
    (68) factor -> . VAR_INST
    (69) factor -> . TRUE
    (70) factor -> . FALSE
    (71) factor -> . NIL
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . logic_expression
    (74) factor -> . range_incl
    (75) factor -> . range_excl
    (76) factor -> . function_call_args
    (77) factor -> . function_call_empty
    (95) logic_expression -> . factor logic_op factor
    (96) logic_expression -> . factor logic_connector factor
    (97) logic_expression -> . expression logic_op expression
    (89) range_incl -> . LPAREN INTEGER RANGE_INCL INTEGER RPAREN
    (90) range_incl -> . INTEGER RANGE_INCL INTEGER
    (91) range_excl -> . LPAREN INTEGER RANGE_EXCL INTEGER RPAREN
    (92) range_excl -> . INTEGER RANGE_EXCL INTEGER
    (79) function_call_args -> . ID LPAREN args RPAREN
    (78) function_call_empty -> . ID LPAREN RPAREN
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . term
    (80) expression -> . ID DOT ID LPAREN args_opt RPAREN
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term EXPONENT factor
    (61) term -> . term MODULE factor
    (62) term -> . factor

    INTEGER         shift and go to state 76
    FLOAT           shift and go to state 38
    STRING          shift and go to state 28
    BOOLEAN         shift and go to state 39
    ID              shift and go to state 77
    VAR_INST        shift and go to state 69
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    NIL             shift and go to state 42
    LPAREN          shift and go to state 65

    factor                         shift and go to state 94
    expression                     shift and go to state 78
    logic_expression               shift and go to state 30
    range_incl                     shift and go to state 70
    range_excl                     shift and go to state 71
    function_call_args             shift and go to state 72
    function_call_empty            shift and go to state 73
    term                           shift and go to state 24

state 37

    (44) break_stmt -> BREAK .

    ID              reduce using rule 44 (break_stmt -> BREAK .)
    VAR_INST        reduce using rule 44 (break_stmt -> BREAK .)
    PUTS            reduce using rule 44 (break_stmt -> BREAK .)
    IF              reduce using rule 44 (break_stmt -> BREAK .)
    WHILE           reduce using rule 44 (break_stmt -> BREAK .)
    FOR             reduce using rule 44 (break_stmt -> BREAK .)
    LPAREN          reduce using rule 44 (break_stmt -> BREAK .)
    INTEGER         reduce using rule 44 (break_stmt -> BREAK .)
    DEF             reduce using rule 44 (break_stmt -> BREAK .)
    CLASS           reduce using rule 44 (break_stmt -> BREAK .)
    RETURN          reduce using rule 44 (break_stmt -> BREAK .)
    BREAK           reduce using rule 44 (break_stmt -> BREAK .)
    FLOAT           reduce using rule 44 (break_stmt -> BREAK .)
    STRING          reduce using rule 44 (break_stmt -> BREAK .)
    BOOLEAN         reduce using rule 44 (break_stmt -> BREAK .)
    TRUE            reduce using rule 44 (break_stmt -> BREAK .)
    FALSE           reduce using rule 44 (break_stmt -> BREAK .)
    NIL             reduce using rule 44 (break_stmt -> BREAK .)
    $end            reduce using rule 44 (break_stmt -> BREAK .)
    END             reduce using rule 44 (break_stmt -> BREAK .)
    ELSE            reduce using rule 44 (break_stmt -> BREAK .)


state 38

    (64) factor -> FLOAT .

    EQUALS          reduce using rule 64 (factor -> FLOAT .)
    NEQUALS         reduce using rule 64 (factor -> FLOAT .)
    GREATEREQ       reduce using rule 64 (factor -> FLOAT .)
    LESSEQ          reduce using rule 64 (factor -> FLOAT .)
    GREATERT        reduce using rule 64 (factor -> FLOAT .)
    LESST           reduce using rule 64 (factor -> FLOAT .)
    AND             reduce using rule 64 (factor -> FLOAT .)
    OR              reduce using rule 64 (factor -> FLOAT .)
    AND_OP          reduce using rule 64 (factor -> FLOAT .)
    OR_OP           reduce using rule 64 (factor -> FLOAT .)
    TIMES           reduce using rule 64 (factor -> FLOAT .)
    DIVIDE          reduce using rule 64 (factor -> FLOAT .)
    EXPONENT        reduce using rule 64 (factor -> FLOAT .)
    MODULE          reduce using rule 64 (factor -> FLOAT .)
    PLUS            reduce using rule 64 (factor -> FLOAT .)
    MINUS           reduce using rule 64 (factor -> FLOAT .)
    ID              reduce using rule 64 (factor -> FLOAT .)
    VAR_INST        reduce using rule 64 (factor -> FLOAT .)
    PUTS            reduce using rule 64 (factor -> FLOAT .)
    IF              reduce using rule 64 (factor -> FLOAT .)
    WHILE           reduce using rule 64 (factor -> FLOAT .)
    FOR             reduce using rule 64 (factor -> FLOAT .)
    LPAREN          reduce using rule 64 (factor -> FLOAT .)
    INTEGER         reduce using rule 64 (factor -> FLOAT .)
    DEF             reduce using rule 64 (factor -> FLOAT .)
    CLASS           reduce using rule 64 (factor -> FLOAT .)
    RETURN          reduce using rule 64 (factor -> FLOAT .)
    BREAK           reduce using rule 64 (factor -> FLOAT .)
    FLOAT           reduce using rule 64 (factor -> FLOAT .)
    STRING          reduce using rule 64 (factor -> FLOAT .)
    BOOLEAN         reduce using rule 64 (factor -> FLOAT .)
    TRUE            reduce using rule 64 (factor -> FLOAT .)
    FALSE           reduce using rule 64 (factor -> FLOAT .)
    NIL             reduce using rule 64 (factor -> FLOAT .)
    $end            reduce using rule 64 (factor -> FLOAT .)
    RPAREN          reduce using rule 64 (factor -> FLOAT .)
    END             reduce using rule 64 (factor -> FLOAT .)
    ELSE            reduce using rule 64 (factor -> FLOAT .)
    COMMA           reduce using rule 64 (factor -> FLOAT .)
    RCORCH          reduce using rule 64 (factor -> FLOAT .)
    RBRACE          reduce using rule 64 (factor -> FLOAT .)


state 39

    (66) factor -> BOOLEAN .

    EQUALS          reduce using rule 66 (factor -> BOOLEAN .)
    NEQUALS         reduce using rule 66 (factor -> BOOLEAN .)
    GREATEREQ       reduce using rule 66 (factor -> BOOLEAN .)
    LESSEQ          reduce using rule 66 (factor -> BOOLEAN .)
    GREATERT        reduce using rule 66 (factor -> BOOLEAN .)
    LESST           reduce using rule 66 (factor -> BOOLEAN .)
    AND             reduce using rule 66 (factor -> BOOLEAN .)
    OR              reduce using rule 66 (factor -> BOOLEAN .)
    AND_OP          reduce using rule 66 (factor -> BOOLEAN .)
    OR_OP           reduce using rule 66 (factor -> BOOLEAN .)
    TIMES           reduce using rule 66 (factor -> BOOLEAN .)
    DIVIDE          reduce using rule 66 (factor -> BOOLEAN .)
    EXPONENT        reduce using rule 66 (factor -> BOOLEAN .)
    MODULE          reduce using rule 66 (factor -> BOOLEAN .)
    PLUS            reduce using rule 66 (factor -> BOOLEAN .)
    MINUS           reduce using rule 66 (factor -> BOOLEAN .)
    ID              reduce using rule 66 (factor -> BOOLEAN .)
    VAR_INST        reduce using rule 66 (factor -> BOOLEAN .)
    PUTS            reduce using rule 66 (factor -> BOOLEAN .)
    IF              reduce using rule 66 (factor -> BOOLEAN .)
    WHILE           reduce using rule 66 (factor -> BOOLEAN .)
    FOR             reduce using rule 66 (factor -> BOOLEAN .)
    LPAREN          reduce using rule 66 (factor -> BOOLEAN .)
    INTEGER         reduce using rule 66 (factor -> BOOLEAN .)
    DEF             reduce using rule 66 (factor -> BOOLEAN .)
    CLASS           reduce using rule 66 (factor -> BOOLEAN .)
    RETURN          reduce using rule 66 (factor -> BOOLEAN .)
    BREAK           reduce using rule 66 (factor -> BOOLEAN .)
    FLOAT           reduce using rule 66 (factor -> BOOLEAN .)
    STRING          reduce using rule 66 (factor -> BOOLEAN .)
    BOOLEAN         reduce using rule 66 (factor -> BOOLEAN .)
    TRUE            reduce using rule 66 (factor -> BOOLEAN .)
    FALSE           reduce using rule 66 (factor -> BOOLEAN .)
    NIL             reduce using rule 66 (factor -> BOOLEAN .)
    $end            reduce using rule 66 (factor -> BOOLEAN .)
    RPAREN          reduce using rule 66 (factor -> BOOLEAN .)
    END             reduce using rule 66 (factor -> BOOLEAN .)
    ELSE            reduce using rule 66 (factor -> BOOLEAN .)
    COMMA           reduce using rule 66 (factor -> BOOLEAN .)
    RCORCH          reduce using rule 66 (factor -> BOOLEAN .)
    RBRACE          reduce using rule 66 (factor -> BOOLEAN .)


state 40

    (69) factor -> TRUE .

    EQUALS          reduce using rule 69 (factor -> TRUE .)
    NEQUALS         reduce using rule 69 (factor -> TRUE .)
    GREATEREQ       reduce using rule 69 (factor -> TRUE .)
    LESSEQ          reduce using rule 69 (factor -> TRUE .)
    GREATERT        reduce using rule 69 (factor -> TRUE .)
    LESST           reduce using rule 69 (factor -> TRUE .)
    AND             reduce using rule 69 (factor -> TRUE .)
    OR              reduce using rule 69 (factor -> TRUE .)
    AND_OP          reduce using rule 69 (factor -> TRUE .)
    OR_OP           reduce using rule 69 (factor -> TRUE .)
    TIMES           reduce using rule 69 (factor -> TRUE .)
    DIVIDE          reduce using rule 69 (factor -> TRUE .)
    EXPONENT        reduce using rule 69 (factor -> TRUE .)
    MODULE          reduce using rule 69 (factor -> TRUE .)
    PLUS            reduce using rule 69 (factor -> TRUE .)
    MINUS           reduce using rule 69 (factor -> TRUE .)
    ID              reduce using rule 69 (factor -> TRUE .)
    VAR_INST        reduce using rule 69 (factor -> TRUE .)
    PUTS            reduce using rule 69 (factor -> TRUE .)
    IF              reduce using rule 69 (factor -> TRUE .)
    WHILE           reduce using rule 69 (factor -> TRUE .)
    FOR             reduce using rule 69 (factor -> TRUE .)
    LPAREN          reduce using rule 69 (factor -> TRUE .)
    INTEGER         reduce using rule 69 (factor -> TRUE .)
    DEF             reduce using rule 69 (factor -> TRUE .)
    CLASS           reduce using rule 69 (factor -> TRUE .)
    RETURN          reduce using rule 69 (factor -> TRUE .)
    BREAK           reduce using rule 69 (factor -> TRUE .)
    FLOAT           reduce using rule 69 (factor -> TRUE .)
    STRING          reduce using rule 69 (factor -> TRUE .)
    BOOLEAN         reduce using rule 69 (factor -> TRUE .)
    TRUE            reduce using rule 69 (factor -> TRUE .)
    FALSE           reduce using rule 69 (factor -> TRUE .)
    NIL             reduce using rule 69 (factor -> TRUE .)
    $end            reduce using rule 69 (factor -> TRUE .)
    RPAREN          reduce using rule 69 (factor -> TRUE .)
    END             reduce using rule 69 (factor -> TRUE .)
    ELSE            reduce using rule 69 (factor -> TRUE .)
    COMMA           reduce using rule 69 (factor -> TRUE .)
    RCORCH          reduce using rule 69 (factor -> TRUE .)
    RBRACE          reduce using rule 69 (factor -> TRUE .)


state 41

    (70) factor -> FALSE .

    EQUALS          reduce using rule 70 (factor -> FALSE .)
    NEQUALS         reduce using rule 70 (factor -> FALSE .)
    GREATEREQ       reduce using rule 70 (factor -> FALSE .)
    LESSEQ          reduce using rule 70 (factor -> FALSE .)
    GREATERT        reduce using rule 70 (factor -> FALSE .)
    LESST           reduce using rule 70 (factor -> FALSE .)
    AND             reduce using rule 70 (factor -> FALSE .)
    OR              reduce using rule 70 (factor -> FALSE .)
    AND_OP          reduce using rule 70 (factor -> FALSE .)
    OR_OP           reduce using rule 70 (factor -> FALSE .)
    TIMES           reduce using rule 70 (factor -> FALSE .)
    DIVIDE          reduce using rule 70 (factor -> FALSE .)
    EXPONENT        reduce using rule 70 (factor -> FALSE .)
    MODULE          reduce using rule 70 (factor -> FALSE .)
    PLUS            reduce using rule 70 (factor -> FALSE .)
    MINUS           reduce using rule 70 (factor -> FALSE .)
    ID              reduce using rule 70 (factor -> FALSE .)
    VAR_INST        reduce using rule 70 (factor -> FALSE .)
    PUTS            reduce using rule 70 (factor -> FALSE .)
    IF              reduce using rule 70 (factor -> FALSE .)
    WHILE           reduce using rule 70 (factor -> FALSE .)
    FOR             reduce using rule 70 (factor -> FALSE .)
    LPAREN          reduce using rule 70 (factor -> FALSE .)
    INTEGER         reduce using rule 70 (factor -> FALSE .)
    DEF             reduce using rule 70 (factor -> FALSE .)
    CLASS           reduce using rule 70 (factor -> FALSE .)
    RETURN          reduce using rule 70 (factor -> FALSE .)
    BREAK           reduce using rule 70 (factor -> FALSE .)
    FLOAT           reduce using rule 70 (factor -> FALSE .)
    STRING          reduce using rule 70 (factor -> FALSE .)
    BOOLEAN         reduce using rule 70 (factor -> FALSE .)
    TRUE            reduce using rule 70 (factor -> FALSE .)
    FALSE           reduce using rule 70 (factor -> FALSE .)
    NIL             reduce using rule 70 (factor -> FALSE .)
    $end            reduce using rule 70 (factor -> FALSE .)
    RPAREN          reduce using rule 70 (factor -> FALSE .)
    END             reduce using rule 70 (factor -> FALSE .)
    ELSE            reduce using rule 70 (factor -> FALSE .)
    COMMA           reduce using rule 70 (factor -> FALSE .)
    RCORCH          reduce using rule 70 (factor -> FALSE .)
    RBRACE          reduce using rule 70 (factor -> FALSE .)


state 42

    (71) factor -> NIL .

    EQUALS          reduce using rule 71 (factor -> NIL .)
    NEQUALS         reduce using rule 71 (factor -> NIL .)
    GREATEREQ       reduce using rule 71 (factor -> NIL .)
    LESSEQ          reduce using rule 71 (factor -> NIL .)
    GREATERT        reduce using rule 71 (factor -> NIL .)
    LESST           reduce using rule 71 (factor -> NIL .)
    AND             reduce using rule 71 (factor -> NIL .)
    OR              reduce using rule 71 (factor -> NIL .)
    AND_OP          reduce using rule 71 (factor -> NIL .)
    OR_OP           reduce using rule 71 (factor -> NIL .)
    TIMES           reduce using rule 71 (factor -> NIL .)
    DIVIDE          reduce using rule 71 (factor -> NIL .)
    EXPONENT        reduce using rule 71 (factor -> NIL .)
    MODULE          reduce using rule 71 (factor -> NIL .)
    PLUS            reduce using rule 71 (factor -> NIL .)
    MINUS           reduce using rule 71 (factor -> NIL .)
    ID              reduce using rule 71 (factor -> NIL .)
    VAR_INST        reduce using rule 71 (factor -> NIL .)
    PUTS            reduce using rule 71 (factor -> NIL .)
    IF              reduce using rule 71 (factor -> NIL .)
    WHILE           reduce using rule 71 (factor -> NIL .)
    FOR             reduce using rule 71 (factor -> NIL .)
    LPAREN          reduce using rule 71 (factor -> NIL .)
    INTEGER         reduce using rule 71 (factor -> NIL .)
    DEF             reduce using rule 71 (factor -> NIL .)
    CLASS           reduce using rule 71 (factor -> NIL .)
    RETURN          reduce using rule 71 (factor -> NIL .)
    BREAK           reduce using rule 71 (factor -> NIL .)
    FLOAT           reduce using rule 71 (factor -> NIL .)
    STRING          reduce using rule 71 (factor -> NIL .)
    BOOLEAN         reduce using rule 71 (factor -> NIL .)
    TRUE            reduce using rule 71 (factor -> NIL .)
    FALSE           reduce using rule 71 (factor -> NIL .)
    NIL             reduce using rule 71 (factor -> NIL .)
    $end            reduce using rule 71 (factor -> NIL .)
    RPAREN          reduce using rule 71 (factor -> NIL .)
    END             reduce using rule 71 (factor -> NIL .)
    ELSE            reduce using rule 71 (factor -> NIL .)
    COMMA           reduce using rule 71 (factor -> NIL .)
    RCORCH          reduce using rule 71 (factor -> NIL .)
    RBRACE          reduce using rule 71 (factor -> NIL .)


state 43

    (3) sentences -> sentence sentences .

    $end            reduce using rule 3 (sentences -> sentence sentences .)


state 44

    (55) expression -> expression PLUS . term
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term EXPONENT factor
    (61) term -> . term MODULE factor
    (62) term -> . factor
    (63) factor -> . INTEGER
    (64) factor -> . FLOAT
    (65) factor -> . STRING
    (66) factor -> . BOOLEAN
    (67) factor -> . ID
    (68) factor -> . VAR_INST
    (69) factor -> . TRUE
    (70) factor -> . FALSE
    (71) factor -> . NIL
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . logic_expression
    (74) factor -> . range_incl
    (75) factor -> . range_excl
    (76) factor -> . function_call_args
    (77) factor -> . function_call_empty
    (95) logic_expression -> . factor logic_op factor
    (96) logic_expression -> . factor logic_connector factor
    (97) logic_expression -> . expression logic_op expression
    (89) range_incl -> . LPAREN INTEGER RANGE_INCL INTEGER RPAREN
    (90) range_incl -> . INTEGER RANGE_INCL INTEGER
    (91) range_excl -> . LPAREN INTEGER RANGE_EXCL INTEGER RPAREN
    (92) range_excl -> . INTEGER RANGE_EXCL INTEGER
    (79) function_call_args -> . ID LPAREN args RPAREN
    (78) function_call_empty -> . ID LPAREN RPAREN
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . term
    (80) expression -> . ID DOT ID LPAREN args_opt RPAREN

    INTEGER         shift and go to state 76
    FLOAT           shift and go to state 38
    STRING          shift and go to state 28
    BOOLEAN         shift and go to state 39
    ID              shift and go to state 77
    VAR_INST        shift and go to state 69
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    NIL             shift and go to state 42
    LPAREN          shift and go to state 65

    expression                     shift and go to state 78
    term                           shift and go to state 95
    factor                         shift and go to state 27
    logic_expression               shift and go to state 30
    range_incl                     shift and go to state 70
    range_excl                     shift and go to state 71
    function_call_args             shift and go to state 72
    function_call_empty            shift and go to state 73

state 45

    (56) expression -> expression MINUS . term
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term EXPONENT factor
    (61) term -> . term MODULE factor
    (62) term -> . factor
    (63) factor -> . INTEGER
    (64) factor -> . FLOAT
    (65) factor -> . STRING
    (66) factor -> . BOOLEAN
    (67) factor -> . ID
    (68) factor -> . VAR_INST
    (69) factor -> . TRUE
    (70) factor -> . FALSE
    (71) factor -> . NIL
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . logic_expression
    (74) factor -> . range_incl
    (75) factor -> . range_excl
    (76) factor -> . function_call_args
    (77) factor -> . function_call_empty
    (95) logic_expression -> . factor logic_op factor
    (96) logic_expression -> . factor logic_connector factor
    (97) logic_expression -> . expression logic_op expression
    (89) range_incl -> . LPAREN INTEGER RANGE_INCL INTEGER RPAREN
    (90) range_incl -> . INTEGER RANGE_INCL INTEGER
    (91) range_excl -> . LPAREN INTEGER RANGE_EXCL INTEGER RPAREN
    (92) range_excl -> . INTEGER RANGE_EXCL INTEGER
    (79) function_call_args -> . ID LPAREN args RPAREN
    (78) function_call_empty -> . ID LPAREN RPAREN
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . term
    (80) expression -> . ID DOT ID LPAREN args_opt RPAREN

    INTEGER         shift and go to state 76
    FLOAT           shift and go to state 38
    STRING          shift and go to state 28
    BOOLEAN         shift and go to state 39
    ID              shift and go to state 77
    VAR_INST        shift and go to state 69
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    NIL             shift and go to state 42
    LPAREN          shift and go to state 65

    expression                     shift and go to state 78
    term                           shift and go to state 96
    factor                         shift and go to state 27
    logic_expression               shift and go to state 30
    range_incl                     shift and go to state 70
    range_excl                     shift and go to state 71
    function_call_args             shift and go to state 72
    function_call_empty            shift and go to state 73

state 46

    (97) logic_expression -> expression logic_op . expression
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . term
    (80) expression -> . ID DOT ID LPAREN args_opt RPAREN
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term EXPONENT factor
    (61) term -> . term MODULE factor
    (62) term -> . factor
    (63) factor -> . INTEGER
    (64) factor -> . FLOAT
    (65) factor -> . STRING
    (66) factor -> . BOOLEAN
    (67) factor -> . ID
    (68) factor -> . VAR_INST
    (69) factor -> . TRUE
    (70) factor -> . FALSE
    (71) factor -> . NIL
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . logic_expression
    (74) factor -> . range_incl
    (75) factor -> . range_excl
    (76) factor -> . function_call_args
    (77) factor -> . function_call_empty
    (95) logic_expression -> . factor logic_op factor
    (96) logic_expression -> . factor logic_connector factor
    (97) logic_expression -> . expression logic_op expression
    (89) range_incl -> . LPAREN INTEGER RANGE_INCL INTEGER RPAREN
    (90) range_incl -> . INTEGER RANGE_INCL INTEGER
    (91) range_excl -> . LPAREN INTEGER RANGE_EXCL INTEGER RPAREN
    (92) range_excl -> . INTEGER RANGE_EXCL INTEGER
    (79) function_call_args -> . ID LPAREN args RPAREN
    (78) function_call_empty -> . ID LPAREN RPAREN

    ID              shift and go to state 68
    INTEGER         shift and go to state 76
    FLOAT           shift and go to state 38
    STRING          shift and go to state 28
    BOOLEAN         shift and go to state 39
    VAR_INST        shift and go to state 69
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    NIL             shift and go to state 42
    LPAREN          shift and go to state 65

    expression                     shift and go to state 97
    term                           shift and go to state 24
    factor                         shift and go to state 27
    logic_expression               shift and go to state 30
    range_incl                     shift and go to state 70
    range_excl                     shift and go to state 71
    function_call_args             shift and go to state 72
    function_call_empty            shift and go to state 73

state 47

    (98) logic_op -> EQUALS .

    ID              reduce using rule 98 (logic_op -> EQUALS .)
    INTEGER         reduce using rule 98 (logic_op -> EQUALS .)
    FLOAT           reduce using rule 98 (logic_op -> EQUALS .)
    STRING          reduce using rule 98 (logic_op -> EQUALS .)
    BOOLEAN         reduce using rule 98 (logic_op -> EQUALS .)
    VAR_INST        reduce using rule 98 (logic_op -> EQUALS .)
    TRUE            reduce using rule 98 (logic_op -> EQUALS .)
    FALSE           reduce using rule 98 (logic_op -> EQUALS .)
    NIL             reduce using rule 98 (logic_op -> EQUALS .)
    LPAREN          reduce using rule 98 (logic_op -> EQUALS .)


state 48

    (99) logic_op -> NEQUALS .

    ID              reduce using rule 99 (logic_op -> NEQUALS .)
    INTEGER         reduce using rule 99 (logic_op -> NEQUALS .)
    FLOAT           reduce using rule 99 (logic_op -> NEQUALS .)
    STRING          reduce using rule 99 (logic_op -> NEQUALS .)
    BOOLEAN         reduce using rule 99 (logic_op -> NEQUALS .)
    VAR_INST        reduce using rule 99 (logic_op -> NEQUALS .)
    TRUE            reduce using rule 99 (logic_op -> NEQUALS .)
    FALSE           reduce using rule 99 (logic_op -> NEQUALS .)
    NIL             reduce using rule 99 (logic_op -> NEQUALS .)
    LPAREN          reduce using rule 99 (logic_op -> NEQUALS .)


state 49

    (100) logic_op -> GREATEREQ .

    ID              reduce using rule 100 (logic_op -> GREATEREQ .)
    INTEGER         reduce using rule 100 (logic_op -> GREATEREQ .)
    FLOAT           reduce using rule 100 (logic_op -> GREATEREQ .)
    STRING          reduce using rule 100 (logic_op -> GREATEREQ .)
    BOOLEAN         reduce using rule 100 (logic_op -> GREATEREQ .)
    VAR_INST        reduce using rule 100 (logic_op -> GREATEREQ .)
    TRUE            reduce using rule 100 (logic_op -> GREATEREQ .)
    FALSE           reduce using rule 100 (logic_op -> GREATEREQ .)
    NIL             reduce using rule 100 (logic_op -> GREATEREQ .)
    LPAREN          reduce using rule 100 (logic_op -> GREATEREQ .)


state 50

    (101) logic_op -> LESSEQ .

    ID              reduce using rule 101 (logic_op -> LESSEQ .)
    INTEGER         reduce using rule 101 (logic_op -> LESSEQ .)
    FLOAT           reduce using rule 101 (logic_op -> LESSEQ .)
    STRING          reduce using rule 101 (logic_op -> LESSEQ .)
    BOOLEAN         reduce using rule 101 (logic_op -> LESSEQ .)
    VAR_INST        reduce using rule 101 (logic_op -> LESSEQ .)
    TRUE            reduce using rule 101 (logic_op -> LESSEQ .)
    FALSE           reduce using rule 101 (logic_op -> LESSEQ .)
    NIL             reduce using rule 101 (logic_op -> LESSEQ .)
    LPAREN          reduce using rule 101 (logic_op -> LESSEQ .)


state 51

    (102) logic_op -> GREATERT .

    ID              reduce using rule 102 (logic_op -> GREATERT .)
    INTEGER         reduce using rule 102 (logic_op -> GREATERT .)
    FLOAT           reduce using rule 102 (logic_op -> GREATERT .)
    STRING          reduce using rule 102 (logic_op -> GREATERT .)
    BOOLEAN         reduce using rule 102 (logic_op -> GREATERT .)
    VAR_INST        reduce using rule 102 (logic_op -> GREATERT .)
    TRUE            reduce using rule 102 (logic_op -> GREATERT .)
    FALSE           reduce using rule 102 (logic_op -> GREATERT .)
    NIL             reduce using rule 102 (logic_op -> GREATERT .)
    LPAREN          reduce using rule 102 (logic_op -> GREATERT .)


state 52

    (103) logic_op -> LESST .

    ID              reduce using rule 103 (logic_op -> LESST .)
    INTEGER         reduce using rule 103 (logic_op -> LESST .)
    FLOAT           reduce using rule 103 (logic_op -> LESST .)
    STRING          reduce using rule 103 (logic_op -> LESST .)
    BOOLEAN         reduce using rule 103 (logic_op -> LESST .)
    VAR_INST        reduce using rule 103 (logic_op -> LESST .)
    TRUE            reduce using rule 103 (logic_op -> LESST .)
    FALSE           reduce using rule 103 (logic_op -> LESST .)
    NIL             reduce using rule 103 (logic_op -> LESST .)
    LPAREN          reduce using rule 103 (logic_op -> LESST .)


state 53

    (45) assignment -> ID ASSIGN . expression
    (52) input -> ID ASSIGN . GETS method_chain
    (81) array -> ID ASSIGN . LCORCH elements RCORCH
    (85) hash -> ID ASSIGN . LBRACE hash_pairs RBRACE
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . term
    (80) expression -> . ID DOT ID LPAREN args_opt RPAREN
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term EXPONENT factor
    (61) term -> . term MODULE factor
    (62) term -> . factor
    (63) factor -> . INTEGER
    (64) factor -> . FLOAT
    (65) factor -> . STRING
    (66) factor -> . BOOLEAN
    (67) factor -> . ID
    (68) factor -> . VAR_INST
    (69) factor -> . TRUE
    (70) factor -> . FALSE
    (71) factor -> . NIL
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . logic_expression
    (74) factor -> . range_incl
    (75) factor -> . range_excl
    (76) factor -> . function_call_args
    (77) factor -> . function_call_empty
    (95) logic_expression -> . factor logic_op factor
    (96) logic_expression -> . factor logic_connector factor
    (97) logic_expression -> . expression logic_op expression
    (89) range_incl -> . LPAREN INTEGER RANGE_INCL INTEGER RPAREN
    (90) range_incl -> . INTEGER RANGE_INCL INTEGER
    (91) range_excl -> . LPAREN INTEGER RANGE_EXCL INTEGER RPAREN
    (92) range_excl -> . INTEGER RANGE_EXCL INTEGER
    (79) function_call_args -> . ID LPAREN args RPAREN
    (78) function_call_empty -> . ID LPAREN RPAREN

    GETS            shift and go to state 99
    LCORCH          shift and go to state 100
    LBRACE          shift and go to state 101
    ID              shift and go to state 68
    INTEGER         shift and go to state 76
    FLOAT           shift and go to state 38
    STRING          shift and go to state 28
    BOOLEAN         shift and go to state 39
    VAR_INST        shift and go to state 69
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    NIL             shift and go to state 42
    LPAREN          shift and go to state 65

    expression                     shift and go to state 98
    term                           shift and go to state 24
    factor                         shift and go to state 27
    logic_expression               shift and go to state 30
    range_incl                     shift and go to state 70
    range_excl                     shift and go to state 71
    function_call_args             shift and go to state 72
    function_call_empty            shift and go to state 73

state 54

    (47) assignment -> ID PLUS . ASSIGN expression

    ASSIGN          shift and go to state 102


state 55

    (48) assignment -> ID MINUS . ASSIGN expression

    ASSIGN          shift and go to state 103


state 56

    (49) assignment -> ID TIMES . ASSIGN expression

    ASSIGN          shift and go to state 104


state 57

    (50) assignment -> ID DIVIDE . ASSIGN expression

    ASSIGN          shift and go to state 105


state 58

    (80) expression -> ID DOT . ID LPAREN args_opt RPAREN
    (42) methods -> ID DOT . ID

    ID              shift and go to state 106


state 59

    (78) function_call_empty -> ID LPAREN . RPAREN
    (79) function_call_args -> ID LPAREN . args RPAREN
    (15) args -> . arg
    (16) args -> . arg COMMA args
    (6) arg -> . ID
    (7) arg -> . ID ASSIGN expression
    (8) arg -> . STRING
    (9) arg -> . INTEGER
    (10) arg -> . FLOAT
    (11) arg -> . BOOLEAN
    (12) arg -> . TRUE
    (13) arg -> . FALSE
    (14) arg -> . NIL

    RPAREN          shift and go to state 108
    ID              shift and go to state 107
    STRING          shift and go to state 111
    INTEGER         shift and go to state 112
    FLOAT           shift and go to state 113
    BOOLEAN         shift and go to state 114
    TRUE            shift and go to state 115
    FALSE           shift and go to state 116
    NIL             shift and go to state 117

    args                           shift and go to state 109
    arg                            shift and go to state 110

state 60

    (46) assignment -> VAR_INST ASSIGN . expression
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . term
    (80) expression -> . ID DOT ID LPAREN args_opt RPAREN
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term EXPONENT factor
    (61) term -> . term MODULE factor
    (62) term -> . factor
    (63) factor -> . INTEGER
    (64) factor -> . FLOAT
    (65) factor -> . STRING
    (66) factor -> . BOOLEAN
    (67) factor -> . ID
    (68) factor -> . VAR_INST
    (69) factor -> . TRUE
    (70) factor -> . FALSE
    (71) factor -> . NIL
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . logic_expression
    (74) factor -> . range_incl
    (75) factor -> . range_excl
    (76) factor -> . function_call_args
    (77) factor -> . function_call_empty
    (95) logic_expression -> . factor logic_op factor
    (96) logic_expression -> . factor logic_connector factor
    (97) logic_expression -> . expression logic_op expression
    (89) range_incl -> . LPAREN INTEGER RANGE_INCL INTEGER RPAREN
    (90) range_incl -> . INTEGER RANGE_INCL INTEGER
    (91) range_excl -> . LPAREN INTEGER RANGE_EXCL INTEGER RPAREN
    (92) range_excl -> . INTEGER RANGE_EXCL INTEGER
    (79) function_call_args -> . ID LPAREN args RPAREN
    (78) function_call_empty -> . ID LPAREN RPAREN

    ID              shift and go to state 68
    INTEGER         shift and go to state 76
    FLOAT           shift and go to state 38
    STRING          shift and go to state 28
    BOOLEAN         shift and go to state 39
    VAR_INST        shift and go to state 69
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    NIL             shift and go to state 42
    LPAREN          shift and go to state 65

    expression                     shift and go to state 118
    term                           shift and go to state 24
    factor                         shift and go to state 27
    logic_expression               shift and go to state 30
    range_incl                     shift and go to state 70
    range_excl                     shift and go to state 71
    function_call_args             shift and go to state 72
    function_call_empty            shift and go to state 73

state 61

    (58) term -> term TIMES . factor
    (63) factor -> . INTEGER
    (64) factor -> . FLOAT
    (65) factor -> . STRING
    (66) factor -> . BOOLEAN
    (67) factor -> . ID
    (68) factor -> . VAR_INST
    (69) factor -> . TRUE
    (70) factor -> . FALSE
    (71) factor -> . NIL
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . logic_expression
    (74) factor -> . range_incl
    (75) factor -> . range_excl
    (76) factor -> . function_call_args
    (77) factor -> . function_call_empty
    (95) logic_expression -> . factor logic_op factor
    (96) logic_expression -> . factor logic_connector factor
    (97) logic_expression -> . expression logic_op expression
    (89) range_incl -> . LPAREN INTEGER RANGE_INCL INTEGER RPAREN
    (90) range_incl -> . INTEGER RANGE_INCL INTEGER
    (91) range_excl -> . LPAREN INTEGER RANGE_EXCL INTEGER RPAREN
    (92) range_excl -> . INTEGER RANGE_EXCL INTEGER
    (79) function_call_args -> . ID LPAREN args RPAREN
    (78) function_call_empty -> . ID LPAREN RPAREN
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . term
    (80) expression -> . ID DOT ID LPAREN args_opt RPAREN
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term EXPONENT factor
    (61) term -> . term MODULE factor
    (62) term -> . factor

    INTEGER         shift and go to state 76
    FLOAT           shift and go to state 38
    STRING          shift and go to state 28
    BOOLEAN         shift and go to state 39
    ID              shift and go to state 77
    VAR_INST        shift and go to state 69
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    NIL             shift and go to state 42
    LPAREN          shift and go to state 65

    term                           shift and go to state 24
    factor                         shift and go to state 119
    expression                     shift and go to state 78
    logic_expression               shift and go to state 30
    range_incl                     shift and go to state 70
    range_excl                     shift and go to state 71
    function_call_args             shift and go to state 72
    function_call_empty            shift and go to state 73

state 62

    (59) term -> term DIVIDE . factor
    (63) factor -> . INTEGER
    (64) factor -> . FLOAT
    (65) factor -> . STRING
    (66) factor -> . BOOLEAN
    (67) factor -> . ID
    (68) factor -> . VAR_INST
    (69) factor -> . TRUE
    (70) factor -> . FALSE
    (71) factor -> . NIL
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . logic_expression
    (74) factor -> . range_incl
    (75) factor -> . range_excl
    (76) factor -> . function_call_args
    (77) factor -> . function_call_empty
    (95) logic_expression -> . factor logic_op factor
    (96) logic_expression -> . factor logic_connector factor
    (97) logic_expression -> . expression logic_op expression
    (89) range_incl -> . LPAREN INTEGER RANGE_INCL INTEGER RPAREN
    (90) range_incl -> . INTEGER RANGE_INCL INTEGER
    (91) range_excl -> . LPAREN INTEGER RANGE_EXCL INTEGER RPAREN
    (92) range_excl -> . INTEGER RANGE_EXCL INTEGER
    (79) function_call_args -> . ID LPAREN args RPAREN
    (78) function_call_empty -> . ID LPAREN RPAREN
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . term
    (80) expression -> . ID DOT ID LPAREN args_opt RPAREN
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term EXPONENT factor
    (61) term -> . term MODULE factor
    (62) term -> . factor

    INTEGER         shift and go to state 76
    FLOAT           shift and go to state 38
    STRING          shift and go to state 28
    BOOLEAN         shift and go to state 39
    ID              shift and go to state 77
    VAR_INST        shift and go to state 69
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    NIL             shift and go to state 42
    LPAREN          shift and go to state 65

    term                           shift and go to state 24
    factor                         shift and go to state 120
    expression                     shift and go to state 78
    logic_expression               shift and go to state 30
    range_incl                     shift and go to state 70
    range_excl                     shift and go to state 71
    function_call_args             shift and go to state 72
    function_call_empty            shift and go to state 73

state 63

    (60) term -> term EXPONENT . factor
    (63) factor -> . INTEGER
    (64) factor -> . FLOAT
    (65) factor -> . STRING
    (66) factor -> . BOOLEAN
    (67) factor -> . ID
    (68) factor -> . VAR_INST
    (69) factor -> . TRUE
    (70) factor -> . FALSE
    (71) factor -> . NIL
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . logic_expression
    (74) factor -> . range_incl
    (75) factor -> . range_excl
    (76) factor -> . function_call_args
    (77) factor -> . function_call_empty
    (95) logic_expression -> . factor logic_op factor
    (96) logic_expression -> . factor logic_connector factor
    (97) logic_expression -> . expression logic_op expression
    (89) range_incl -> . LPAREN INTEGER RANGE_INCL INTEGER RPAREN
    (90) range_incl -> . INTEGER RANGE_INCL INTEGER
    (91) range_excl -> . LPAREN INTEGER RANGE_EXCL INTEGER RPAREN
    (92) range_excl -> . INTEGER RANGE_EXCL INTEGER
    (79) function_call_args -> . ID LPAREN args RPAREN
    (78) function_call_empty -> . ID LPAREN RPAREN
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . term
    (80) expression -> . ID DOT ID LPAREN args_opt RPAREN
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term EXPONENT factor
    (61) term -> . term MODULE factor
    (62) term -> . factor

    INTEGER         shift and go to state 76
    FLOAT           shift and go to state 38
    STRING          shift and go to state 28
    BOOLEAN         shift and go to state 39
    ID              shift and go to state 77
    VAR_INST        shift and go to state 69
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    NIL             shift and go to state 42
    LPAREN          shift and go to state 65

    term                           shift and go to state 24
    factor                         shift and go to state 121
    expression                     shift and go to state 78
    logic_expression               shift and go to state 30
    range_incl                     shift and go to state 70
    range_excl                     shift and go to state 71
    function_call_args             shift and go to state 72
    function_call_empty            shift and go to state 73

state 64

    (61) term -> term MODULE . factor
    (63) factor -> . INTEGER
    (64) factor -> . FLOAT
    (65) factor -> . STRING
    (66) factor -> . BOOLEAN
    (67) factor -> . ID
    (68) factor -> . VAR_INST
    (69) factor -> . TRUE
    (70) factor -> . FALSE
    (71) factor -> . NIL
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . logic_expression
    (74) factor -> . range_incl
    (75) factor -> . range_excl
    (76) factor -> . function_call_args
    (77) factor -> . function_call_empty
    (95) logic_expression -> . factor logic_op factor
    (96) logic_expression -> . factor logic_connector factor
    (97) logic_expression -> . expression logic_op expression
    (89) range_incl -> . LPAREN INTEGER RANGE_INCL INTEGER RPAREN
    (90) range_incl -> . INTEGER RANGE_INCL INTEGER
    (91) range_excl -> . LPAREN INTEGER RANGE_EXCL INTEGER RPAREN
    (92) range_excl -> . INTEGER RANGE_EXCL INTEGER
    (79) function_call_args -> . ID LPAREN args RPAREN
    (78) function_call_empty -> . ID LPAREN RPAREN
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . term
    (80) expression -> . ID DOT ID LPAREN args_opt RPAREN
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term EXPONENT factor
    (61) term -> . term MODULE factor
    (62) term -> . factor

    INTEGER         shift and go to state 76
    FLOAT           shift and go to state 38
    STRING          shift and go to state 28
    BOOLEAN         shift and go to state 39
    ID              shift and go to state 77
    VAR_INST        shift and go to state 69
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    NIL             shift and go to state 42
    LPAREN          shift and go to state 65

    term                           shift and go to state 24
    factor                         shift and go to state 122
    expression                     shift and go to state 78
    logic_expression               shift and go to state 30
    range_incl                     shift and go to state 70
    range_excl                     shift and go to state 71
    function_call_args             shift and go to state 72
    function_call_empty            shift and go to state 73

state 65

    (72) factor -> LPAREN . expression RPAREN
    (89) range_incl -> LPAREN . INTEGER RANGE_INCL INTEGER RPAREN
    (91) range_excl -> LPAREN . INTEGER RANGE_EXCL INTEGER RPAREN
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . term
    (80) expression -> . ID DOT ID LPAREN args_opt RPAREN
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term EXPONENT factor
    (61) term -> . term MODULE factor
    (62) term -> . factor
    (63) factor -> . INTEGER
    (64) factor -> . FLOAT
    (65) factor -> . STRING
    (66) factor -> . BOOLEAN
    (67) factor -> . ID
    (68) factor -> . VAR_INST
    (69) factor -> . TRUE
    (70) factor -> . FALSE
    (71) factor -> . NIL
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . logic_expression
    (74) factor -> . range_incl
    (75) factor -> . range_excl
    (76) factor -> . function_call_args
    (77) factor -> . function_call_empty
    (95) logic_expression -> . factor logic_op factor
    (96) logic_expression -> . factor logic_connector factor
    (97) logic_expression -> . expression logic_op expression
    (89) range_incl -> . LPAREN INTEGER RANGE_INCL INTEGER RPAREN
    (90) range_incl -> . INTEGER RANGE_INCL INTEGER
    (91) range_excl -> . LPAREN INTEGER RANGE_EXCL INTEGER RPAREN
    (92) range_excl -> . INTEGER RANGE_EXCL INTEGER
    (79) function_call_args -> . ID LPAREN args RPAREN
    (78) function_call_empty -> . ID LPAREN RPAREN

    INTEGER         shift and go to state 66
    ID              shift and go to state 68
    FLOAT           shift and go to state 38
    STRING          shift and go to state 28
    BOOLEAN         shift and go to state 39
    VAR_INST        shift and go to state 69
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    NIL             shift and go to state 42
    LPAREN          shift and go to state 65

    expression                     shift and go to state 67
    term                           shift and go to state 24
    factor                         shift and go to state 27
    logic_expression               shift and go to state 30
    range_incl                     shift and go to state 70
    range_excl                     shift and go to state 71
    function_call_args             shift and go to state 72
    function_call_empty            shift and go to state 73

state 66

    (89) range_incl -> LPAREN INTEGER . RANGE_INCL INTEGER RPAREN
    (91) range_excl -> LPAREN INTEGER . RANGE_EXCL INTEGER RPAREN
    (63) factor -> INTEGER .
    (90) range_incl -> INTEGER . RANGE_INCL INTEGER
    (92) range_excl -> INTEGER . RANGE_EXCL INTEGER

    RANGE_INCL      shift and go to state 123
    RANGE_EXCL      shift and go to state 124
    EQUALS          reduce using rule 63 (factor -> INTEGER .)
    NEQUALS         reduce using rule 63 (factor -> INTEGER .)
    GREATEREQ       reduce using rule 63 (factor -> INTEGER .)
    LESSEQ          reduce using rule 63 (factor -> INTEGER .)
    GREATERT        reduce using rule 63 (factor -> INTEGER .)
    LESST           reduce using rule 63 (factor -> INTEGER .)
    AND             reduce using rule 63 (factor -> INTEGER .)
    OR              reduce using rule 63 (factor -> INTEGER .)
    AND_OP          reduce using rule 63 (factor -> INTEGER .)
    OR_OP           reduce using rule 63 (factor -> INTEGER .)
    TIMES           reduce using rule 63 (factor -> INTEGER .)
    DIVIDE          reduce using rule 63 (factor -> INTEGER .)
    EXPONENT        reduce using rule 63 (factor -> INTEGER .)
    MODULE          reduce using rule 63 (factor -> INTEGER .)
    RPAREN          reduce using rule 63 (factor -> INTEGER .)
    PLUS            reduce using rule 63 (factor -> INTEGER .)
    MINUS           reduce using rule 63 (factor -> INTEGER .)


state 67

    (72) factor -> LPAREN expression . RPAREN
    (55) expression -> expression . PLUS term
    (56) expression -> expression . MINUS term
    (97) logic_expression -> expression . logic_op expression
    (98) logic_op -> . EQUALS
    (99) logic_op -> . NEQUALS
    (100) logic_op -> . GREATEREQ
    (101) logic_op -> . LESSEQ
    (102) logic_op -> . GREATERT
    (103) logic_op -> . LESST

    RPAREN          shift and go to state 125
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    EQUALS          shift and go to state 47
    NEQUALS         shift and go to state 48
    GREATEREQ       shift and go to state 49
    LESSEQ          shift and go to state 50
    GREATERT        shift and go to state 51
    LESST           shift and go to state 52

    logic_op                       shift and go to state 46

state 68

    (80) expression -> ID . DOT ID LPAREN args_opt RPAREN
    (67) factor -> ID .
    (79) function_call_args -> ID . LPAREN args RPAREN
    (78) function_call_empty -> ID . LPAREN RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    DOT             shift and go to state 126
    EQUALS          reduce using rule 67 (factor -> ID .)
    NEQUALS         reduce using rule 67 (factor -> ID .)
    GREATEREQ       reduce using rule 67 (factor -> ID .)
    LESSEQ          reduce using rule 67 (factor -> ID .)
    GREATERT        reduce using rule 67 (factor -> ID .)
    LESST           reduce using rule 67 (factor -> ID .)
    AND             reduce using rule 67 (factor -> ID .)
    OR              reduce using rule 67 (factor -> ID .)
    AND_OP          reduce using rule 67 (factor -> ID .)
    OR_OP           reduce using rule 67 (factor -> ID .)
    TIMES           reduce using rule 67 (factor -> ID .)
    DIVIDE          reduce using rule 67 (factor -> ID .)
    EXPONENT        reduce using rule 67 (factor -> ID .)
    MODULE          reduce using rule 67 (factor -> ID .)
    RPAREN          reduce using rule 67 (factor -> ID .)
    PLUS            reduce using rule 67 (factor -> ID .)
    MINUS           reduce using rule 67 (factor -> ID .)
    ID              reduce using rule 67 (factor -> ID .)
    VAR_INST        reduce using rule 67 (factor -> ID .)
    PUTS            reduce using rule 67 (factor -> ID .)
    IF              reduce using rule 67 (factor -> ID .)
    WHILE           reduce using rule 67 (factor -> ID .)
    FOR             reduce using rule 67 (factor -> ID .)
    INTEGER         reduce using rule 67 (factor -> ID .)
    DEF             reduce using rule 67 (factor -> ID .)
    CLASS           reduce using rule 67 (factor -> ID .)
    RETURN          reduce using rule 67 (factor -> ID .)
    BREAK           reduce using rule 67 (factor -> ID .)
    FLOAT           reduce using rule 67 (factor -> ID .)
    STRING          reduce using rule 67 (factor -> ID .)
    BOOLEAN         reduce using rule 67 (factor -> ID .)
    TRUE            reduce using rule 67 (factor -> ID .)
    FALSE           reduce using rule 67 (factor -> ID .)
    NIL             reduce using rule 67 (factor -> ID .)
    $end            reduce using rule 67 (factor -> ID .)
    END             reduce using rule 67 (factor -> ID .)
    ELSE            reduce using rule 67 (factor -> ID .)
    COMMA           reduce using rule 67 (factor -> ID .)
    RCORCH          reduce using rule 67 (factor -> ID .)
    RBRACE          reduce using rule 67 (factor -> ID .)
    LPAREN          shift and go to state 127

  ! LPAREN          [ reduce using rule 67 (factor -> ID .) ]


state 69

    (68) factor -> VAR_INST .

    EQUALS          reduce using rule 68 (factor -> VAR_INST .)
    NEQUALS         reduce using rule 68 (factor -> VAR_INST .)
    GREATEREQ       reduce using rule 68 (factor -> VAR_INST .)
    LESSEQ          reduce using rule 68 (factor -> VAR_INST .)
    GREATERT        reduce using rule 68 (factor -> VAR_INST .)
    LESST           reduce using rule 68 (factor -> VAR_INST .)
    AND             reduce using rule 68 (factor -> VAR_INST .)
    OR              reduce using rule 68 (factor -> VAR_INST .)
    AND_OP          reduce using rule 68 (factor -> VAR_INST .)
    OR_OP           reduce using rule 68 (factor -> VAR_INST .)
    TIMES           reduce using rule 68 (factor -> VAR_INST .)
    DIVIDE          reduce using rule 68 (factor -> VAR_INST .)
    EXPONENT        reduce using rule 68 (factor -> VAR_INST .)
    MODULE          reduce using rule 68 (factor -> VAR_INST .)
    RPAREN          reduce using rule 68 (factor -> VAR_INST .)
    PLUS            reduce using rule 68 (factor -> VAR_INST .)
    MINUS           reduce using rule 68 (factor -> VAR_INST .)
    ID              reduce using rule 68 (factor -> VAR_INST .)
    VAR_INST        reduce using rule 68 (factor -> VAR_INST .)
    PUTS            reduce using rule 68 (factor -> VAR_INST .)
    IF              reduce using rule 68 (factor -> VAR_INST .)
    WHILE           reduce using rule 68 (factor -> VAR_INST .)
    FOR             reduce using rule 68 (factor -> VAR_INST .)
    LPAREN          reduce using rule 68 (factor -> VAR_INST .)
    INTEGER         reduce using rule 68 (factor -> VAR_INST .)
    DEF             reduce using rule 68 (factor -> VAR_INST .)
    CLASS           reduce using rule 68 (factor -> VAR_INST .)
    RETURN          reduce using rule 68 (factor -> VAR_INST .)
    BREAK           reduce using rule 68 (factor -> VAR_INST .)
    FLOAT           reduce using rule 68 (factor -> VAR_INST .)
    STRING          reduce using rule 68 (factor -> VAR_INST .)
    BOOLEAN         reduce using rule 68 (factor -> VAR_INST .)
    TRUE            reduce using rule 68 (factor -> VAR_INST .)
    FALSE           reduce using rule 68 (factor -> VAR_INST .)
    NIL             reduce using rule 68 (factor -> VAR_INST .)
    $end            reduce using rule 68 (factor -> VAR_INST .)
    END             reduce using rule 68 (factor -> VAR_INST .)
    ELSE            reduce using rule 68 (factor -> VAR_INST .)
    COMMA           reduce using rule 68 (factor -> VAR_INST .)
    RCORCH          reduce using rule 68 (factor -> VAR_INST .)
    RBRACE          reduce using rule 68 (factor -> VAR_INST .)


state 70

    (74) factor -> range_incl .

    EQUALS          reduce using rule 74 (factor -> range_incl .)
    NEQUALS         reduce using rule 74 (factor -> range_incl .)
    GREATEREQ       reduce using rule 74 (factor -> range_incl .)
    LESSEQ          reduce using rule 74 (factor -> range_incl .)
    GREATERT        reduce using rule 74 (factor -> range_incl .)
    LESST           reduce using rule 74 (factor -> range_incl .)
    AND             reduce using rule 74 (factor -> range_incl .)
    OR              reduce using rule 74 (factor -> range_incl .)
    AND_OP          reduce using rule 74 (factor -> range_incl .)
    OR_OP           reduce using rule 74 (factor -> range_incl .)
    TIMES           reduce using rule 74 (factor -> range_incl .)
    DIVIDE          reduce using rule 74 (factor -> range_incl .)
    EXPONENT        reduce using rule 74 (factor -> range_incl .)
    MODULE          reduce using rule 74 (factor -> range_incl .)
    RPAREN          reduce using rule 74 (factor -> range_incl .)
    PLUS            reduce using rule 74 (factor -> range_incl .)
    MINUS           reduce using rule 74 (factor -> range_incl .)
    ID              reduce using rule 74 (factor -> range_incl .)
    VAR_INST        reduce using rule 74 (factor -> range_incl .)
    PUTS            reduce using rule 74 (factor -> range_incl .)
    IF              reduce using rule 74 (factor -> range_incl .)
    WHILE           reduce using rule 74 (factor -> range_incl .)
    FOR             reduce using rule 74 (factor -> range_incl .)
    LPAREN          reduce using rule 74 (factor -> range_incl .)
    INTEGER         reduce using rule 74 (factor -> range_incl .)
    DEF             reduce using rule 74 (factor -> range_incl .)
    CLASS           reduce using rule 74 (factor -> range_incl .)
    RETURN          reduce using rule 74 (factor -> range_incl .)
    BREAK           reduce using rule 74 (factor -> range_incl .)
    FLOAT           reduce using rule 74 (factor -> range_incl .)
    STRING          reduce using rule 74 (factor -> range_incl .)
    BOOLEAN         reduce using rule 74 (factor -> range_incl .)
    TRUE            reduce using rule 74 (factor -> range_incl .)
    FALSE           reduce using rule 74 (factor -> range_incl .)
    NIL             reduce using rule 74 (factor -> range_incl .)
    $end            reduce using rule 74 (factor -> range_incl .)
    END             reduce using rule 74 (factor -> range_incl .)
    ELSE            reduce using rule 74 (factor -> range_incl .)
    COMMA           reduce using rule 74 (factor -> range_incl .)
    RCORCH          reduce using rule 74 (factor -> range_incl .)
    RBRACE          reduce using rule 74 (factor -> range_incl .)


state 71

    (75) factor -> range_excl .

    EQUALS          reduce using rule 75 (factor -> range_excl .)
    NEQUALS         reduce using rule 75 (factor -> range_excl .)
    GREATEREQ       reduce using rule 75 (factor -> range_excl .)
    LESSEQ          reduce using rule 75 (factor -> range_excl .)
    GREATERT        reduce using rule 75 (factor -> range_excl .)
    LESST           reduce using rule 75 (factor -> range_excl .)
    AND             reduce using rule 75 (factor -> range_excl .)
    OR              reduce using rule 75 (factor -> range_excl .)
    AND_OP          reduce using rule 75 (factor -> range_excl .)
    OR_OP           reduce using rule 75 (factor -> range_excl .)
    TIMES           reduce using rule 75 (factor -> range_excl .)
    DIVIDE          reduce using rule 75 (factor -> range_excl .)
    EXPONENT        reduce using rule 75 (factor -> range_excl .)
    MODULE          reduce using rule 75 (factor -> range_excl .)
    RPAREN          reduce using rule 75 (factor -> range_excl .)
    PLUS            reduce using rule 75 (factor -> range_excl .)
    MINUS           reduce using rule 75 (factor -> range_excl .)
    ID              reduce using rule 75 (factor -> range_excl .)
    VAR_INST        reduce using rule 75 (factor -> range_excl .)
    PUTS            reduce using rule 75 (factor -> range_excl .)
    IF              reduce using rule 75 (factor -> range_excl .)
    WHILE           reduce using rule 75 (factor -> range_excl .)
    FOR             reduce using rule 75 (factor -> range_excl .)
    LPAREN          reduce using rule 75 (factor -> range_excl .)
    INTEGER         reduce using rule 75 (factor -> range_excl .)
    DEF             reduce using rule 75 (factor -> range_excl .)
    CLASS           reduce using rule 75 (factor -> range_excl .)
    RETURN          reduce using rule 75 (factor -> range_excl .)
    BREAK           reduce using rule 75 (factor -> range_excl .)
    FLOAT           reduce using rule 75 (factor -> range_excl .)
    STRING          reduce using rule 75 (factor -> range_excl .)
    BOOLEAN         reduce using rule 75 (factor -> range_excl .)
    TRUE            reduce using rule 75 (factor -> range_excl .)
    FALSE           reduce using rule 75 (factor -> range_excl .)
    NIL             reduce using rule 75 (factor -> range_excl .)
    $end            reduce using rule 75 (factor -> range_excl .)
    END             reduce using rule 75 (factor -> range_excl .)
    ELSE            reduce using rule 75 (factor -> range_excl .)
    COMMA           reduce using rule 75 (factor -> range_excl .)
    RCORCH          reduce using rule 75 (factor -> range_excl .)
    RBRACE          reduce using rule 75 (factor -> range_excl .)


state 72

    (76) factor -> function_call_args .

    EQUALS          reduce using rule 76 (factor -> function_call_args .)
    NEQUALS         reduce using rule 76 (factor -> function_call_args .)
    GREATEREQ       reduce using rule 76 (factor -> function_call_args .)
    LESSEQ          reduce using rule 76 (factor -> function_call_args .)
    GREATERT        reduce using rule 76 (factor -> function_call_args .)
    LESST           reduce using rule 76 (factor -> function_call_args .)
    AND             reduce using rule 76 (factor -> function_call_args .)
    OR              reduce using rule 76 (factor -> function_call_args .)
    AND_OP          reduce using rule 76 (factor -> function_call_args .)
    OR_OP           reduce using rule 76 (factor -> function_call_args .)
    TIMES           reduce using rule 76 (factor -> function_call_args .)
    DIVIDE          reduce using rule 76 (factor -> function_call_args .)
    EXPONENT        reduce using rule 76 (factor -> function_call_args .)
    MODULE          reduce using rule 76 (factor -> function_call_args .)
    RPAREN          reduce using rule 76 (factor -> function_call_args .)
    PLUS            reduce using rule 76 (factor -> function_call_args .)
    MINUS           reduce using rule 76 (factor -> function_call_args .)
    ID              reduce using rule 76 (factor -> function_call_args .)
    VAR_INST        reduce using rule 76 (factor -> function_call_args .)
    PUTS            reduce using rule 76 (factor -> function_call_args .)
    IF              reduce using rule 76 (factor -> function_call_args .)
    WHILE           reduce using rule 76 (factor -> function_call_args .)
    FOR             reduce using rule 76 (factor -> function_call_args .)
    LPAREN          reduce using rule 76 (factor -> function_call_args .)
    INTEGER         reduce using rule 76 (factor -> function_call_args .)
    DEF             reduce using rule 76 (factor -> function_call_args .)
    CLASS           reduce using rule 76 (factor -> function_call_args .)
    RETURN          reduce using rule 76 (factor -> function_call_args .)
    BREAK           reduce using rule 76 (factor -> function_call_args .)
    FLOAT           reduce using rule 76 (factor -> function_call_args .)
    STRING          reduce using rule 76 (factor -> function_call_args .)
    BOOLEAN         reduce using rule 76 (factor -> function_call_args .)
    TRUE            reduce using rule 76 (factor -> function_call_args .)
    FALSE           reduce using rule 76 (factor -> function_call_args .)
    NIL             reduce using rule 76 (factor -> function_call_args .)
    $end            reduce using rule 76 (factor -> function_call_args .)
    END             reduce using rule 76 (factor -> function_call_args .)
    ELSE            reduce using rule 76 (factor -> function_call_args .)
    COMMA           reduce using rule 76 (factor -> function_call_args .)
    RCORCH          reduce using rule 76 (factor -> function_call_args .)
    RBRACE          reduce using rule 76 (factor -> function_call_args .)


state 73

    (77) factor -> function_call_empty .

    EQUALS          reduce using rule 77 (factor -> function_call_empty .)
    NEQUALS         reduce using rule 77 (factor -> function_call_empty .)
    GREATEREQ       reduce using rule 77 (factor -> function_call_empty .)
    LESSEQ          reduce using rule 77 (factor -> function_call_empty .)
    GREATERT        reduce using rule 77 (factor -> function_call_empty .)
    LESST           reduce using rule 77 (factor -> function_call_empty .)
    AND             reduce using rule 77 (factor -> function_call_empty .)
    OR              reduce using rule 77 (factor -> function_call_empty .)
    AND_OP          reduce using rule 77 (factor -> function_call_empty .)
    OR_OP           reduce using rule 77 (factor -> function_call_empty .)
    TIMES           reduce using rule 77 (factor -> function_call_empty .)
    DIVIDE          reduce using rule 77 (factor -> function_call_empty .)
    EXPONENT        reduce using rule 77 (factor -> function_call_empty .)
    MODULE          reduce using rule 77 (factor -> function_call_empty .)
    RPAREN          reduce using rule 77 (factor -> function_call_empty .)
    PLUS            reduce using rule 77 (factor -> function_call_empty .)
    MINUS           reduce using rule 77 (factor -> function_call_empty .)
    ID              reduce using rule 77 (factor -> function_call_empty .)
    VAR_INST        reduce using rule 77 (factor -> function_call_empty .)
    PUTS            reduce using rule 77 (factor -> function_call_empty .)
    IF              reduce using rule 77 (factor -> function_call_empty .)
    WHILE           reduce using rule 77 (factor -> function_call_empty .)
    FOR             reduce using rule 77 (factor -> function_call_empty .)
    LPAREN          reduce using rule 77 (factor -> function_call_empty .)
    INTEGER         reduce using rule 77 (factor -> function_call_empty .)
    DEF             reduce using rule 77 (factor -> function_call_empty .)
    CLASS           reduce using rule 77 (factor -> function_call_empty .)
    RETURN          reduce using rule 77 (factor -> function_call_empty .)
    BREAK           reduce using rule 77 (factor -> function_call_empty .)
    FLOAT           reduce using rule 77 (factor -> function_call_empty .)
    STRING          reduce using rule 77 (factor -> function_call_empty .)
    BOOLEAN         reduce using rule 77 (factor -> function_call_empty .)
    TRUE            reduce using rule 77 (factor -> function_call_empty .)
    FALSE           reduce using rule 77 (factor -> function_call_empty .)
    NIL             reduce using rule 77 (factor -> function_call_empty .)
    $end            reduce using rule 77 (factor -> function_call_empty .)
    END             reduce using rule 77 (factor -> function_call_empty .)
    ELSE            reduce using rule 77 (factor -> function_call_empty .)
    COMMA           reduce using rule 77 (factor -> function_call_empty .)
    RCORCH          reduce using rule 77 (factor -> function_call_empty .)
    RBRACE          reduce using rule 77 (factor -> function_call_empty .)


state 74

    (21) print -> PUTS factor .
    (95) logic_expression -> factor . logic_op factor
    (96) logic_expression -> factor . logic_connector factor
    (62) term -> factor .
    (98) logic_op -> . EQUALS
    (99) logic_op -> . NEQUALS
    (100) logic_op -> . GREATEREQ
    (101) logic_op -> . LESSEQ
    (102) logic_op -> . GREATERT
    (103) logic_op -> . LESST
    (104) logic_connector -> . AND
    (105) logic_connector -> . OR
    (106) logic_connector -> . AND_OP
    (107) logic_connector -> . OR_OP

  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NEQUALS resolved as shift
  ! shift/reduce conflict for GREATEREQ resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for GREATERT resolved as shift
  ! shift/reduce conflict for LESST resolved as shift
    ID              reduce using rule 21 (print -> PUTS factor .)
    VAR_INST        reduce using rule 21 (print -> PUTS factor .)
    PUTS            reduce using rule 21 (print -> PUTS factor .)
    IF              reduce using rule 21 (print -> PUTS factor .)
    WHILE           reduce using rule 21 (print -> PUTS factor .)
    FOR             reduce using rule 21 (print -> PUTS factor .)
    LPAREN          reduce using rule 21 (print -> PUTS factor .)
    INTEGER         reduce using rule 21 (print -> PUTS factor .)
    DEF             reduce using rule 21 (print -> PUTS factor .)
    CLASS           reduce using rule 21 (print -> PUTS factor .)
    RETURN          reduce using rule 21 (print -> PUTS factor .)
    BREAK           reduce using rule 21 (print -> PUTS factor .)
    FLOAT           reduce using rule 21 (print -> PUTS factor .)
    STRING          reduce using rule 21 (print -> PUTS factor .)
    BOOLEAN         reduce using rule 21 (print -> PUTS factor .)
    TRUE            reduce using rule 21 (print -> PUTS factor .)
    FALSE           reduce using rule 21 (print -> PUTS factor .)
    NIL             reduce using rule 21 (print -> PUTS factor .)
    $end            reduce using rule 21 (print -> PUTS factor .)
    END             reduce using rule 21 (print -> PUTS factor .)
    ELSE            reduce using rule 21 (print -> PUTS factor .)
    TIMES           reduce using rule 62 (term -> factor .)
    DIVIDE          reduce using rule 62 (term -> factor .)
    EXPONENT        reduce using rule 62 (term -> factor .)
    MODULE          reduce using rule 62 (term -> factor .)
    PLUS            reduce using rule 62 (term -> factor .)
    MINUS           reduce using rule 62 (term -> factor .)
    EQUALS          shift and go to state 47
    NEQUALS         shift and go to state 48
    GREATEREQ       shift and go to state 49
    LESSEQ          shift and go to state 50
    GREATERT        shift and go to state 51
    LESST           shift and go to state 52
    AND             shift and go to state 81
    OR              shift and go to state 82
    AND_OP          shift and go to state 83
    OR_OP           shift and go to state 84

  ! EQUALS          [ reduce using rule 62 (term -> factor .) ]
  ! NEQUALS         [ reduce using rule 62 (term -> factor .) ]
  ! GREATEREQ       [ reduce using rule 62 (term -> factor .) ]
  ! LESSEQ          [ reduce using rule 62 (term -> factor .) ]
  ! GREATERT        [ reduce using rule 62 (term -> factor .) ]
  ! LESST           [ reduce using rule 62 (term -> factor .) ]

    logic_op                       shift and go to state 79
    logic_connector                shift and go to state 80

state 75

    (22) print -> PUTS STRING .
    (51) input -> PUTS STRING .
    (65) factor -> STRING .

  ! reduce/reduce conflict for ID resolved using rule 22 (print -> PUTS STRING .)
  ! reduce/reduce conflict for VAR_INST resolved using rule 22 (print -> PUTS STRING .)
  ! reduce/reduce conflict for PUTS resolved using rule 22 (print -> PUTS STRING .)
  ! reduce/reduce conflict for IF resolved using rule 22 (print -> PUTS STRING .)
  ! reduce/reduce conflict for WHILE resolved using rule 22 (print -> PUTS STRING .)
  ! reduce/reduce conflict for FOR resolved using rule 22 (print -> PUTS STRING .)
  ! reduce/reduce conflict for LPAREN resolved using rule 22 (print -> PUTS STRING .)
  ! reduce/reduce conflict for INTEGER resolved using rule 22 (print -> PUTS STRING .)
  ! reduce/reduce conflict for DEF resolved using rule 22 (print -> PUTS STRING .)
  ! reduce/reduce conflict for CLASS resolved using rule 22 (print -> PUTS STRING .)
  ! reduce/reduce conflict for RETURN resolved using rule 22 (print -> PUTS STRING .)
  ! reduce/reduce conflict for BREAK resolved using rule 22 (print -> PUTS STRING .)
  ! reduce/reduce conflict for FLOAT resolved using rule 22 (print -> PUTS STRING .)
  ! reduce/reduce conflict for STRING resolved using rule 22 (print -> PUTS STRING .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 22 (print -> PUTS STRING .)
  ! reduce/reduce conflict for TRUE resolved using rule 22 (print -> PUTS STRING .)
  ! reduce/reduce conflict for FALSE resolved using rule 22 (print -> PUTS STRING .)
  ! reduce/reduce conflict for NIL resolved using rule 22 (print -> PUTS STRING .)
  ! reduce/reduce conflict for $end resolved using rule 22 (print -> PUTS STRING .)
  ! reduce/reduce conflict for END resolved using rule 22 (print -> PUTS STRING .)
  ! reduce/reduce conflict for ELSE resolved using rule 22 (print -> PUTS STRING .)
  ! reduce/reduce conflict for ID resolved using rule 22 (print -> PUTS STRING .)
  ! reduce/reduce conflict for VAR_INST resolved using rule 22 (print -> PUTS STRING .)
  ! reduce/reduce conflict for PUTS resolved using rule 22 (print -> PUTS STRING .)
  ! reduce/reduce conflict for IF resolved using rule 22 (print -> PUTS STRING .)
  ! reduce/reduce conflict for WHILE resolved using rule 22 (print -> PUTS STRING .)
  ! reduce/reduce conflict for FOR resolved using rule 22 (print -> PUTS STRING .)
  ! reduce/reduce conflict for LPAREN resolved using rule 22 (print -> PUTS STRING .)
  ! reduce/reduce conflict for INTEGER resolved using rule 22 (print -> PUTS STRING .)
  ! reduce/reduce conflict for DEF resolved using rule 22 (print -> PUTS STRING .)
  ! reduce/reduce conflict for CLASS resolved using rule 22 (print -> PUTS STRING .)
  ! reduce/reduce conflict for RETURN resolved using rule 22 (print -> PUTS STRING .)
  ! reduce/reduce conflict for BREAK resolved using rule 22 (print -> PUTS STRING .)
  ! reduce/reduce conflict for FLOAT resolved using rule 22 (print -> PUTS STRING .)
  ! reduce/reduce conflict for STRING resolved using rule 22 (print -> PUTS STRING .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 22 (print -> PUTS STRING .)
  ! reduce/reduce conflict for TRUE resolved using rule 22 (print -> PUTS STRING .)
  ! reduce/reduce conflict for FALSE resolved using rule 22 (print -> PUTS STRING .)
  ! reduce/reduce conflict for NIL resolved using rule 22 (print -> PUTS STRING .)
  ! reduce/reduce conflict for $end resolved using rule 22 (print -> PUTS STRING .)
  ! reduce/reduce conflict for END resolved using rule 22 (print -> PUTS STRING .)
  ! reduce/reduce conflict for ELSE resolved using rule 22 (print -> PUTS STRING .)
    ID              reduce using rule 22 (print -> PUTS STRING .)
    VAR_INST        reduce using rule 22 (print -> PUTS STRING .)
    PUTS            reduce using rule 22 (print -> PUTS STRING .)
    IF              reduce using rule 22 (print -> PUTS STRING .)
    WHILE           reduce using rule 22 (print -> PUTS STRING .)
    FOR             reduce using rule 22 (print -> PUTS STRING .)
    LPAREN          reduce using rule 22 (print -> PUTS STRING .)
    INTEGER         reduce using rule 22 (print -> PUTS STRING .)
    DEF             reduce using rule 22 (print -> PUTS STRING .)
    CLASS           reduce using rule 22 (print -> PUTS STRING .)
    RETURN          reduce using rule 22 (print -> PUTS STRING .)
    BREAK           reduce using rule 22 (print -> PUTS STRING .)
    FLOAT           reduce using rule 22 (print -> PUTS STRING .)
    STRING          reduce using rule 22 (print -> PUTS STRING .)
    BOOLEAN         reduce using rule 22 (print -> PUTS STRING .)
    TRUE            reduce using rule 22 (print -> PUTS STRING .)
    FALSE           reduce using rule 22 (print -> PUTS STRING .)
    NIL             reduce using rule 22 (print -> PUTS STRING .)
    $end            reduce using rule 22 (print -> PUTS STRING .)
    END             reduce using rule 22 (print -> PUTS STRING .)
    ELSE            reduce using rule 22 (print -> PUTS STRING .)
    EQUALS          reduce using rule 65 (factor -> STRING .)
    NEQUALS         reduce using rule 65 (factor -> STRING .)
    GREATEREQ       reduce using rule 65 (factor -> STRING .)
    LESSEQ          reduce using rule 65 (factor -> STRING .)
    GREATERT        reduce using rule 65 (factor -> STRING .)
    LESST           reduce using rule 65 (factor -> STRING .)
    AND             reduce using rule 65 (factor -> STRING .)
    OR              reduce using rule 65 (factor -> STRING .)
    AND_OP          reduce using rule 65 (factor -> STRING .)
    OR_OP           reduce using rule 65 (factor -> STRING .)
    TIMES           reduce using rule 65 (factor -> STRING .)
    DIVIDE          reduce using rule 65 (factor -> STRING .)
    EXPONENT        reduce using rule 65 (factor -> STRING .)
    MODULE          reduce using rule 65 (factor -> STRING .)
    PLUS            reduce using rule 65 (factor -> STRING .)
    MINUS           reduce using rule 65 (factor -> STRING .)

  ! ID              [ reduce using rule 51 (input -> PUTS STRING .) ]
  ! VAR_INST        [ reduce using rule 51 (input -> PUTS STRING .) ]
  ! PUTS            [ reduce using rule 51 (input -> PUTS STRING .) ]
  ! IF              [ reduce using rule 51 (input -> PUTS STRING .) ]
  ! WHILE           [ reduce using rule 51 (input -> PUTS STRING .) ]
  ! FOR             [ reduce using rule 51 (input -> PUTS STRING .) ]
  ! LPAREN          [ reduce using rule 51 (input -> PUTS STRING .) ]
  ! INTEGER         [ reduce using rule 51 (input -> PUTS STRING .) ]
  ! DEF             [ reduce using rule 51 (input -> PUTS STRING .) ]
  ! CLASS           [ reduce using rule 51 (input -> PUTS STRING .) ]
  ! RETURN          [ reduce using rule 51 (input -> PUTS STRING .) ]
  ! BREAK           [ reduce using rule 51 (input -> PUTS STRING .) ]
  ! FLOAT           [ reduce using rule 51 (input -> PUTS STRING .) ]
  ! STRING          [ reduce using rule 51 (input -> PUTS STRING .) ]
  ! BOOLEAN         [ reduce using rule 51 (input -> PUTS STRING .) ]
  ! TRUE            [ reduce using rule 51 (input -> PUTS STRING .) ]
  ! FALSE           [ reduce using rule 51 (input -> PUTS STRING .) ]
  ! NIL             [ reduce using rule 51 (input -> PUTS STRING .) ]
  ! $end            [ reduce using rule 51 (input -> PUTS STRING .) ]
  ! END             [ reduce using rule 51 (input -> PUTS STRING .) ]
  ! ELSE            [ reduce using rule 51 (input -> PUTS STRING .) ]
  ! ID              [ reduce using rule 65 (factor -> STRING .) ]
  ! VAR_INST        [ reduce using rule 65 (factor -> STRING .) ]
  ! PUTS            [ reduce using rule 65 (factor -> STRING .) ]
  ! IF              [ reduce using rule 65 (factor -> STRING .) ]
  ! WHILE           [ reduce using rule 65 (factor -> STRING .) ]
  ! FOR             [ reduce using rule 65 (factor -> STRING .) ]
  ! LPAREN          [ reduce using rule 65 (factor -> STRING .) ]
  ! INTEGER         [ reduce using rule 65 (factor -> STRING .) ]
  ! DEF             [ reduce using rule 65 (factor -> STRING .) ]
  ! CLASS           [ reduce using rule 65 (factor -> STRING .) ]
  ! RETURN          [ reduce using rule 65 (factor -> STRING .) ]
  ! BREAK           [ reduce using rule 65 (factor -> STRING .) ]
  ! FLOAT           [ reduce using rule 65 (factor -> STRING .) ]
  ! STRING          [ reduce using rule 65 (factor -> STRING .) ]
  ! BOOLEAN         [ reduce using rule 65 (factor -> STRING .) ]
  ! TRUE            [ reduce using rule 65 (factor -> STRING .) ]
  ! FALSE           [ reduce using rule 65 (factor -> STRING .) ]
  ! NIL             [ reduce using rule 65 (factor -> STRING .) ]
  ! $end            [ reduce using rule 65 (factor -> STRING .) ]
  ! END             [ reduce using rule 65 (factor -> STRING .) ]
  ! ELSE            [ reduce using rule 65 (factor -> STRING .) ]


state 76

    (63) factor -> INTEGER .
    (90) range_incl -> INTEGER . RANGE_INCL INTEGER
    (92) range_excl -> INTEGER . RANGE_EXCL INTEGER

    EQUALS          reduce using rule 63 (factor -> INTEGER .)
    NEQUALS         reduce using rule 63 (factor -> INTEGER .)
    GREATEREQ       reduce using rule 63 (factor -> INTEGER .)
    LESSEQ          reduce using rule 63 (factor -> INTEGER .)
    GREATERT        reduce using rule 63 (factor -> INTEGER .)
    LESST           reduce using rule 63 (factor -> INTEGER .)
    AND             reduce using rule 63 (factor -> INTEGER .)
    OR              reduce using rule 63 (factor -> INTEGER .)
    AND_OP          reduce using rule 63 (factor -> INTEGER .)
    OR_OP           reduce using rule 63 (factor -> INTEGER .)
    ID              reduce using rule 63 (factor -> INTEGER .)
    VAR_INST        reduce using rule 63 (factor -> INTEGER .)
    PUTS            reduce using rule 63 (factor -> INTEGER .)
    IF              reduce using rule 63 (factor -> INTEGER .)
    WHILE           reduce using rule 63 (factor -> INTEGER .)
    FOR             reduce using rule 63 (factor -> INTEGER .)
    LPAREN          reduce using rule 63 (factor -> INTEGER .)
    INTEGER         reduce using rule 63 (factor -> INTEGER .)
    DEF             reduce using rule 63 (factor -> INTEGER .)
    CLASS           reduce using rule 63 (factor -> INTEGER .)
    RETURN          reduce using rule 63 (factor -> INTEGER .)
    BREAK           reduce using rule 63 (factor -> INTEGER .)
    FLOAT           reduce using rule 63 (factor -> INTEGER .)
    STRING          reduce using rule 63 (factor -> INTEGER .)
    BOOLEAN         reduce using rule 63 (factor -> INTEGER .)
    TRUE            reduce using rule 63 (factor -> INTEGER .)
    FALSE           reduce using rule 63 (factor -> INTEGER .)
    NIL             reduce using rule 63 (factor -> INTEGER .)
    $end            reduce using rule 63 (factor -> INTEGER .)
    TIMES           reduce using rule 63 (factor -> INTEGER .)
    DIVIDE          reduce using rule 63 (factor -> INTEGER .)
    EXPONENT        reduce using rule 63 (factor -> INTEGER .)
    MODULE          reduce using rule 63 (factor -> INTEGER .)
    PLUS            reduce using rule 63 (factor -> INTEGER .)
    MINUS           reduce using rule 63 (factor -> INTEGER .)
    END             reduce using rule 63 (factor -> INTEGER .)
    ELSE            reduce using rule 63 (factor -> INTEGER .)
    RPAREN          reduce using rule 63 (factor -> INTEGER .)
    COMMA           reduce using rule 63 (factor -> INTEGER .)
    RCORCH          reduce using rule 63 (factor -> INTEGER .)
    RBRACE          reduce using rule 63 (factor -> INTEGER .)
    RANGE_INCL      shift and go to state 90
    RANGE_EXCL      shift and go to state 91


state 77

    (67) factor -> ID .
    (79) function_call_args -> ID . LPAREN args RPAREN
    (78) function_call_empty -> ID . LPAREN RPAREN
    (80) expression -> ID . DOT ID LPAREN args_opt RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    EQUALS          reduce using rule 67 (factor -> ID .)
    NEQUALS         reduce using rule 67 (factor -> ID .)
    GREATEREQ       reduce using rule 67 (factor -> ID .)
    LESSEQ          reduce using rule 67 (factor -> ID .)
    GREATERT        reduce using rule 67 (factor -> ID .)
    LESST           reduce using rule 67 (factor -> ID .)
    AND             reduce using rule 67 (factor -> ID .)
    OR              reduce using rule 67 (factor -> ID .)
    AND_OP          reduce using rule 67 (factor -> ID .)
    OR_OP           reduce using rule 67 (factor -> ID .)
    ID              reduce using rule 67 (factor -> ID .)
    VAR_INST        reduce using rule 67 (factor -> ID .)
    PUTS            reduce using rule 67 (factor -> ID .)
    IF              reduce using rule 67 (factor -> ID .)
    WHILE           reduce using rule 67 (factor -> ID .)
    FOR             reduce using rule 67 (factor -> ID .)
    INTEGER         reduce using rule 67 (factor -> ID .)
    DEF             reduce using rule 67 (factor -> ID .)
    CLASS           reduce using rule 67 (factor -> ID .)
    RETURN          reduce using rule 67 (factor -> ID .)
    BREAK           reduce using rule 67 (factor -> ID .)
    FLOAT           reduce using rule 67 (factor -> ID .)
    STRING          reduce using rule 67 (factor -> ID .)
    BOOLEAN         reduce using rule 67 (factor -> ID .)
    TRUE            reduce using rule 67 (factor -> ID .)
    FALSE           reduce using rule 67 (factor -> ID .)
    NIL             reduce using rule 67 (factor -> ID .)
    $end            reduce using rule 67 (factor -> ID .)
    TIMES           reduce using rule 67 (factor -> ID .)
    DIVIDE          reduce using rule 67 (factor -> ID .)
    EXPONENT        reduce using rule 67 (factor -> ID .)
    MODULE          reduce using rule 67 (factor -> ID .)
    PLUS            reduce using rule 67 (factor -> ID .)
    MINUS           reduce using rule 67 (factor -> ID .)
    END             reduce using rule 67 (factor -> ID .)
    ELSE            reduce using rule 67 (factor -> ID .)
    RPAREN          reduce using rule 67 (factor -> ID .)
    COMMA           reduce using rule 67 (factor -> ID .)
    RCORCH          reduce using rule 67 (factor -> ID .)
    RBRACE          reduce using rule 67 (factor -> ID .)
    LPAREN          shift and go to state 127
    DOT             shift and go to state 126

  ! LPAREN          [ reduce using rule 67 (factor -> ID .) ]


state 78

    (97) logic_expression -> expression . logic_op expression
    (55) expression -> expression . PLUS term
    (56) expression -> expression . MINUS term
    (98) logic_op -> . EQUALS
    (99) logic_op -> . NEQUALS
    (100) logic_op -> . GREATEREQ
    (101) logic_op -> . LESSEQ
    (102) logic_op -> . GREATERT
    (103) logic_op -> . LESST

    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    EQUALS          shift and go to state 47
    NEQUALS         shift and go to state 48
    GREATEREQ       shift and go to state 49
    LESSEQ          shift and go to state 50
    GREATERT        shift and go to state 51
    LESST           shift and go to state 52

    logic_op                       shift and go to state 46

state 79

    (95) logic_expression -> factor logic_op . factor
    (63) factor -> . INTEGER
    (64) factor -> . FLOAT
    (65) factor -> . STRING
    (66) factor -> . BOOLEAN
    (67) factor -> . ID
    (68) factor -> . VAR_INST
    (69) factor -> . TRUE
    (70) factor -> . FALSE
    (71) factor -> . NIL
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . logic_expression
    (74) factor -> . range_incl
    (75) factor -> . range_excl
    (76) factor -> . function_call_args
    (77) factor -> . function_call_empty
    (95) logic_expression -> . factor logic_op factor
    (96) logic_expression -> . factor logic_connector factor
    (97) logic_expression -> . expression logic_op expression
    (89) range_incl -> . LPAREN INTEGER RANGE_INCL INTEGER RPAREN
    (90) range_incl -> . INTEGER RANGE_INCL INTEGER
    (91) range_excl -> . LPAREN INTEGER RANGE_EXCL INTEGER RPAREN
    (92) range_excl -> . INTEGER RANGE_EXCL INTEGER
    (79) function_call_args -> . ID LPAREN args RPAREN
    (78) function_call_empty -> . ID LPAREN RPAREN
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . term
    (80) expression -> . ID DOT ID LPAREN args_opt RPAREN
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term EXPONENT factor
    (61) term -> . term MODULE factor
    (62) term -> . factor

    INTEGER         shift and go to state 76
    FLOAT           shift and go to state 38
    STRING          shift and go to state 28
    BOOLEAN         shift and go to state 39
    ID              shift and go to state 77
    VAR_INST        shift and go to state 69
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    NIL             shift and go to state 42
    LPAREN          shift and go to state 65

    factor                         shift and go to state 128
    expression                     shift and go to state 78
    logic_expression               shift and go to state 30
    range_incl                     shift and go to state 70
    range_excl                     shift and go to state 71
    function_call_args             shift and go to state 72
    function_call_empty            shift and go to state 73
    term                           shift and go to state 24

state 80

    (96) logic_expression -> factor logic_connector . factor
    (63) factor -> . INTEGER
    (64) factor -> . FLOAT
    (65) factor -> . STRING
    (66) factor -> . BOOLEAN
    (67) factor -> . ID
    (68) factor -> . VAR_INST
    (69) factor -> . TRUE
    (70) factor -> . FALSE
    (71) factor -> . NIL
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . logic_expression
    (74) factor -> . range_incl
    (75) factor -> . range_excl
    (76) factor -> . function_call_args
    (77) factor -> . function_call_empty
    (95) logic_expression -> . factor logic_op factor
    (96) logic_expression -> . factor logic_connector factor
    (97) logic_expression -> . expression logic_op expression
    (89) range_incl -> . LPAREN INTEGER RANGE_INCL INTEGER RPAREN
    (90) range_incl -> . INTEGER RANGE_INCL INTEGER
    (91) range_excl -> . LPAREN INTEGER RANGE_EXCL INTEGER RPAREN
    (92) range_excl -> . INTEGER RANGE_EXCL INTEGER
    (79) function_call_args -> . ID LPAREN args RPAREN
    (78) function_call_empty -> . ID LPAREN RPAREN
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . term
    (80) expression -> . ID DOT ID LPAREN args_opt RPAREN
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term EXPONENT factor
    (61) term -> . term MODULE factor
    (62) term -> . factor

    INTEGER         shift and go to state 76
    FLOAT           shift and go to state 38
    STRING          shift and go to state 28
    BOOLEAN         shift and go to state 39
    ID              shift and go to state 77
    VAR_INST        shift and go to state 69
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    NIL             shift and go to state 42
    LPAREN          shift and go to state 65

    factor                         shift and go to state 129
    expression                     shift and go to state 78
    logic_expression               shift and go to state 30
    range_incl                     shift and go to state 70
    range_excl                     shift and go to state 71
    function_call_args             shift and go to state 72
    function_call_empty            shift and go to state 73
    term                           shift and go to state 24

state 81

    (104) logic_connector -> AND .

    INTEGER         reduce using rule 104 (logic_connector -> AND .)
    FLOAT           reduce using rule 104 (logic_connector -> AND .)
    STRING          reduce using rule 104 (logic_connector -> AND .)
    BOOLEAN         reduce using rule 104 (logic_connector -> AND .)
    ID              reduce using rule 104 (logic_connector -> AND .)
    VAR_INST        reduce using rule 104 (logic_connector -> AND .)
    TRUE            reduce using rule 104 (logic_connector -> AND .)
    FALSE           reduce using rule 104 (logic_connector -> AND .)
    NIL             reduce using rule 104 (logic_connector -> AND .)
    LPAREN          reduce using rule 104 (logic_connector -> AND .)


state 82

    (105) logic_connector -> OR .

    INTEGER         reduce using rule 105 (logic_connector -> OR .)
    FLOAT           reduce using rule 105 (logic_connector -> OR .)
    STRING          reduce using rule 105 (logic_connector -> OR .)
    BOOLEAN         reduce using rule 105 (logic_connector -> OR .)
    ID              reduce using rule 105 (logic_connector -> OR .)
    VAR_INST        reduce using rule 105 (logic_connector -> OR .)
    TRUE            reduce using rule 105 (logic_connector -> OR .)
    FALSE           reduce using rule 105 (logic_connector -> OR .)
    NIL             reduce using rule 105 (logic_connector -> OR .)
    LPAREN          reduce using rule 105 (logic_connector -> OR .)


state 83

    (106) logic_connector -> AND_OP .

    INTEGER         reduce using rule 106 (logic_connector -> AND_OP .)
    FLOAT           reduce using rule 106 (logic_connector -> AND_OP .)
    STRING          reduce using rule 106 (logic_connector -> AND_OP .)
    BOOLEAN         reduce using rule 106 (logic_connector -> AND_OP .)
    ID              reduce using rule 106 (logic_connector -> AND_OP .)
    VAR_INST        reduce using rule 106 (logic_connector -> AND_OP .)
    TRUE            reduce using rule 106 (logic_connector -> AND_OP .)
    FALSE           reduce using rule 106 (logic_connector -> AND_OP .)
    NIL             reduce using rule 106 (logic_connector -> AND_OP .)
    LPAREN          reduce using rule 106 (logic_connector -> AND_OP .)


state 84

    (107) logic_connector -> OR_OP .

    INTEGER         reduce using rule 107 (logic_connector -> OR_OP .)
    FLOAT           reduce using rule 107 (logic_connector -> OR_OP .)
    STRING          reduce using rule 107 (logic_connector -> OR_OP .)
    BOOLEAN         reduce using rule 107 (logic_connector -> OR_OP .)
    ID              reduce using rule 107 (logic_connector -> OR_OP .)
    VAR_INST        reduce using rule 107 (logic_connector -> OR_OP .)
    TRUE            reduce using rule 107 (logic_connector -> OR_OP .)
    FALSE           reduce using rule 107 (logic_connector -> OR_OP .)
    NIL             reduce using rule 107 (logic_connector -> OR_OP .)
    LPAREN          reduce using rule 107 (logic_connector -> OR_OP .)


state 85

    (93) condition -> IF logic_expression . body END
    (94) condition -> IF logic_expression . body ELSE body END
    (73) factor -> logic_expression .
    (19) body -> . sentence
    (20) body -> . sentence body
    (24) sentence -> . assignment
    (25) sentence -> . expression
    (26) sentence -> . print
    (27) sentence -> . input
    (28) sentence -> . condition
    (29) sentence -> . while_loop
    (30) sentence -> . for_loop
    (31) sentence -> . array
    (32) sentence -> . range_incl
    (33) sentence -> . range_excl
    (34) sentence -> . hash
    (35) sentence -> . function
    (36) sentence -> . class_def
    (37) sentence -> . return_stmt
    (38) sentence -> . break_stmt
    (39) sentence -> . function_call_empty
    (40) sentence -> . function_call_args
    (41) sentence -> . methods
    (45) assignment -> . ID ASSIGN expression
    (46) assignment -> . VAR_INST ASSIGN expression
    (47) assignment -> . ID PLUS ASSIGN expression
    (48) assignment -> . ID MINUS ASSIGN expression
    (49) assignment -> . ID TIMES ASSIGN expression
    (50) assignment -> . ID DIVIDE ASSIGN expression
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . term
    (80) expression -> . ID DOT ID LPAREN args_opt RPAREN
    (21) print -> . PUTS factor
    (22) print -> . PUTS STRING
    (51) input -> . PUTS STRING
    (52) input -> . ID ASSIGN GETS method_chain
    (93) condition -> . IF logic_expression body END
    (94) condition -> . IF logic_expression body ELSE body END
    (88) while_loop -> . WHILE logic_expression body END
    (84) for_loop -> . FOR ID IN range_incl body END
    (81) array -> . ID ASSIGN LCORCH elements RCORCH
    (89) range_incl -> . LPAREN INTEGER RANGE_INCL INTEGER RPAREN
    (90) range_incl -> . INTEGER RANGE_INCL INTEGER
    (91) range_excl -> . LPAREN INTEGER RANGE_EXCL INTEGER RPAREN
    (92) range_excl -> . INTEGER RANGE_EXCL INTEGER
    (85) hash -> . ID ASSIGN LBRACE hash_pairs RBRACE
    (4) function -> . DEF ID body END
    (5) function -> . DEF ID LPAREN args_opt RPAREN body END
    (23) class_def -> . CLASS ID body END
    (43) return_stmt -> . RETURN factor
    (44) break_stmt -> . BREAK
    (78) function_call_empty -> . ID LPAREN RPAREN
    (79) function_call_args -> . ID LPAREN args RPAREN
    (42) methods -> . ID DOT ID
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term EXPONENT factor
    (61) term -> . term MODULE factor
    (62) term -> . factor
    (63) factor -> . INTEGER
    (64) factor -> . FLOAT
    (65) factor -> . STRING
    (66) factor -> . BOOLEAN
    (67) factor -> . ID
    (68) factor -> . VAR_INST
    (69) factor -> . TRUE
    (70) factor -> . FALSE
    (71) factor -> . NIL
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . logic_expression
    (74) factor -> . range_incl
    (75) factor -> . range_excl
    (76) factor -> . function_call_args
    (77) factor -> . function_call_empty
    (95) logic_expression -> . factor logic_op factor
    (96) logic_expression -> . factor logic_connector factor
    (97) logic_expression -> . expression logic_op expression

    EQUALS          reduce using rule 73 (factor -> logic_expression .)
    NEQUALS         reduce using rule 73 (factor -> logic_expression .)
    GREATEREQ       reduce using rule 73 (factor -> logic_expression .)
    LESSEQ          reduce using rule 73 (factor -> logic_expression .)
    GREATERT        reduce using rule 73 (factor -> logic_expression .)
    LESST           reduce using rule 73 (factor -> logic_expression .)
    AND             reduce using rule 73 (factor -> logic_expression .)
    OR              reduce using rule 73 (factor -> logic_expression .)
    AND_OP          reduce using rule 73 (factor -> logic_expression .)
    OR_OP           reduce using rule 73 (factor -> logic_expression .)
    TIMES           reduce using rule 73 (factor -> logic_expression .)
    DIVIDE          reduce using rule 73 (factor -> logic_expression .)
    EXPONENT        reduce using rule 73 (factor -> logic_expression .)
    MODULE          reduce using rule 73 (factor -> logic_expression .)
    PLUS            reduce using rule 73 (factor -> logic_expression .)
    MINUS           reduce using rule 73 (factor -> logic_expression .)
    ID              shift and go to state 22
    VAR_INST        shift and go to state 23
    PUTS            shift and go to state 26
    IF              shift and go to state 29
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    LPAREN          shift and go to state 25
    INTEGER         shift and go to state 33
    DEF             shift and go to state 34
    CLASS           shift and go to state 35
    RETURN          shift and go to state 36
    BREAK           shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 28
    BOOLEAN         shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    NIL             shift and go to state 42

    logic_expression               shift and go to state 30
    body                           shift and go to state 130
    sentence                       shift and go to state 131
    assignment                     shift and go to state 4
    expression                     shift and go to state 5
    print                          shift and go to state 6
    input                          shift and go to state 7
    condition                      shift and go to state 8
    while_loop                     shift and go to state 9
    for_loop                       shift and go to state 10
    array                          shift and go to state 11
    range_incl                     shift and go to state 12
    range_excl                     shift and go to state 13
    hash                           shift and go to state 14
    function                       shift and go to state 15
    class_def                      shift and go to state 16
    return_stmt                    shift and go to state 17
    break_stmt                     shift and go to state 18
    function_call_empty            shift and go to state 19
    function_call_args             shift and go to state 20
    methods                        shift and go to state 21
    term                           shift and go to state 24
    factor                         shift and go to state 27

state 86

    (95) logic_expression -> factor . logic_op factor
    (96) logic_expression -> factor . logic_connector factor
    (62) term -> factor .
    (98) logic_op -> . EQUALS
    (99) logic_op -> . NEQUALS
    (100) logic_op -> . GREATEREQ
    (101) logic_op -> . LESSEQ
    (102) logic_op -> . GREATERT
    (103) logic_op -> . LESST
    (104) logic_connector -> . AND
    (105) logic_connector -> . OR
    (106) logic_connector -> . AND_OP
    (107) logic_connector -> . OR_OP

  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NEQUALS resolved as shift
  ! shift/reduce conflict for GREATEREQ resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for GREATERT resolved as shift
  ! shift/reduce conflict for LESST resolved as shift
    TIMES           reduce using rule 62 (term -> factor .)
    DIVIDE          reduce using rule 62 (term -> factor .)
    EXPONENT        reduce using rule 62 (term -> factor .)
    MODULE          reduce using rule 62 (term -> factor .)
    PLUS            reduce using rule 62 (term -> factor .)
    MINUS           reduce using rule 62 (term -> factor .)
    EQUALS          shift and go to state 47
    NEQUALS         shift and go to state 48
    GREATEREQ       shift and go to state 49
    LESSEQ          shift and go to state 50
    GREATERT        shift and go to state 51
    LESST           shift and go to state 52
    AND             shift and go to state 81
    OR              shift and go to state 82
    AND_OP          shift and go to state 83
    OR_OP           shift and go to state 84

  ! EQUALS          [ reduce using rule 62 (term -> factor .) ]
  ! NEQUALS         [ reduce using rule 62 (term -> factor .) ]
  ! GREATEREQ       [ reduce using rule 62 (term -> factor .) ]
  ! LESSEQ          [ reduce using rule 62 (term -> factor .) ]
  ! GREATERT        [ reduce using rule 62 (term -> factor .) ]
  ! LESST           [ reduce using rule 62 (term -> factor .) ]

    logic_op                       shift and go to state 79
    logic_connector                shift and go to state 80

state 87

    (67) factor -> ID .
    (80) expression -> ID . DOT ID LPAREN args_opt RPAREN
    (79) function_call_args -> ID . LPAREN args RPAREN
    (78) function_call_empty -> ID . LPAREN RPAREN

    EQUALS          reduce using rule 67 (factor -> ID .)
    NEQUALS         reduce using rule 67 (factor -> ID .)
    GREATEREQ       reduce using rule 67 (factor -> ID .)
    LESSEQ          reduce using rule 67 (factor -> ID .)
    GREATERT        reduce using rule 67 (factor -> ID .)
    LESST           reduce using rule 67 (factor -> ID .)
    AND             reduce using rule 67 (factor -> ID .)
    OR              reduce using rule 67 (factor -> ID .)
    AND_OP          reduce using rule 67 (factor -> ID .)
    OR_OP           reduce using rule 67 (factor -> ID .)
    TIMES           reduce using rule 67 (factor -> ID .)
    DIVIDE          reduce using rule 67 (factor -> ID .)
    EXPONENT        reduce using rule 67 (factor -> ID .)
    MODULE          reduce using rule 67 (factor -> ID .)
    PLUS            reduce using rule 67 (factor -> ID .)
    MINUS           reduce using rule 67 (factor -> ID .)
    DOT             shift and go to state 126
    LPAREN          shift and go to state 127


state 88

    (88) while_loop -> WHILE logic_expression . body END
    (73) factor -> logic_expression .
    (19) body -> . sentence
    (20) body -> . sentence body
    (24) sentence -> . assignment
    (25) sentence -> . expression
    (26) sentence -> . print
    (27) sentence -> . input
    (28) sentence -> . condition
    (29) sentence -> . while_loop
    (30) sentence -> . for_loop
    (31) sentence -> . array
    (32) sentence -> . range_incl
    (33) sentence -> . range_excl
    (34) sentence -> . hash
    (35) sentence -> . function
    (36) sentence -> . class_def
    (37) sentence -> . return_stmt
    (38) sentence -> . break_stmt
    (39) sentence -> . function_call_empty
    (40) sentence -> . function_call_args
    (41) sentence -> . methods
    (45) assignment -> . ID ASSIGN expression
    (46) assignment -> . VAR_INST ASSIGN expression
    (47) assignment -> . ID PLUS ASSIGN expression
    (48) assignment -> . ID MINUS ASSIGN expression
    (49) assignment -> . ID TIMES ASSIGN expression
    (50) assignment -> . ID DIVIDE ASSIGN expression
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . term
    (80) expression -> . ID DOT ID LPAREN args_opt RPAREN
    (21) print -> . PUTS factor
    (22) print -> . PUTS STRING
    (51) input -> . PUTS STRING
    (52) input -> . ID ASSIGN GETS method_chain
    (93) condition -> . IF logic_expression body END
    (94) condition -> . IF logic_expression body ELSE body END
    (88) while_loop -> . WHILE logic_expression body END
    (84) for_loop -> . FOR ID IN range_incl body END
    (81) array -> . ID ASSIGN LCORCH elements RCORCH
    (89) range_incl -> . LPAREN INTEGER RANGE_INCL INTEGER RPAREN
    (90) range_incl -> . INTEGER RANGE_INCL INTEGER
    (91) range_excl -> . LPAREN INTEGER RANGE_EXCL INTEGER RPAREN
    (92) range_excl -> . INTEGER RANGE_EXCL INTEGER
    (85) hash -> . ID ASSIGN LBRACE hash_pairs RBRACE
    (4) function -> . DEF ID body END
    (5) function -> . DEF ID LPAREN args_opt RPAREN body END
    (23) class_def -> . CLASS ID body END
    (43) return_stmt -> . RETURN factor
    (44) break_stmt -> . BREAK
    (78) function_call_empty -> . ID LPAREN RPAREN
    (79) function_call_args -> . ID LPAREN args RPAREN
    (42) methods -> . ID DOT ID
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term EXPONENT factor
    (61) term -> . term MODULE factor
    (62) term -> . factor
    (63) factor -> . INTEGER
    (64) factor -> . FLOAT
    (65) factor -> . STRING
    (66) factor -> . BOOLEAN
    (67) factor -> . ID
    (68) factor -> . VAR_INST
    (69) factor -> . TRUE
    (70) factor -> . FALSE
    (71) factor -> . NIL
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . logic_expression
    (74) factor -> . range_incl
    (75) factor -> . range_excl
    (76) factor -> . function_call_args
    (77) factor -> . function_call_empty
    (95) logic_expression -> . factor logic_op factor
    (96) logic_expression -> . factor logic_connector factor
    (97) logic_expression -> . expression logic_op expression

    EQUALS          reduce using rule 73 (factor -> logic_expression .)
    NEQUALS         reduce using rule 73 (factor -> logic_expression .)
    GREATEREQ       reduce using rule 73 (factor -> logic_expression .)
    LESSEQ          reduce using rule 73 (factor -> logic_expression .)
    GREATERT        reduce using rule 73 (factor -> logic_expression .)
    LESST           reduce using rule 73 (factor -> logic_expression .)
    AND             reduce using rule 73 (factor -> logic_expression .)
    OR              reduce using rule 73 (factor -> logic_expression .)
    AND_OP          reduce using rule 73 (factor -> logic_expression .)
    OR_OP           reduce using rule 73 (factor -> logic_expression .)
    TIMES           reduce using rule 73 (factor -> logic_expression .)
    DIVIDE          reduce using rule 73 (factor -> logic_expression .)
    EXPONENT        reduce using rule 73 (factor -> logic_expression .)
    MODULE          reduce using rule 73 (factor -> logic_expression .)
    PLUS            reduce using rule 73 (factor -> logic_expression .)
    MINUS           reduce using rule 73 (factor -> logic_expression .)
    ID              shift and go to state 22
    VAR_INST        shift and go to state 23
    PUTS            shift and go to state 26
    IF              shift and go to state 29
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    LPAREN          shift and go to state 25
    INTEGER         shift and go to state 33
    DEF             shift and go to state 34
    CLASS           shift and go to state 35
    RETURN          shift and go to state 36
    BREAK           shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 28
    BOOLEAN         shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    NIL             shift and go to state 42

    logic_expression               shift and go to state 30
    body                           shift and go to state 132
    sentence                       shift and go to state 131
    assignment                     shift and go to state 4
    expression                     shift and go to state 5
    print                          shift and go to state 6
    input                          shift and go to state 7
    condition                      shift and go to state 8
    while_loop                     shift and go to state 9
    for_loop                       shift and go to state 10
    array                          shift and go to state 11
    range_incl                     shift and go to state 12
    range_excl                     shift and go to state 13
    hash                           shift and go to state 14
    function                       shift and go to state 15
    class_def                      shift and go to state 16
    return_stmt                    shift and go to state 17
    break_stmt                     shift and go to state 18
    function_call_empty            shift and go to state 19
    function_call_args             shift and go to state 20
    methods                        shift and go to state 21
    term                           shift and go to state 24
    factor                         shift and go to state 27

state 89

    (84) for_loop -> FOR ID . IN range_incl body END

    IN              shift and go to state 133


state 90

    (90) range_incl -> INTEGER RANGE_INCL . INTEGER

    INTEGER         shift and go to state 134


state 91

    (92) range_excl -> INTEGER RANGE_EXCL . INTEGER

    INTEGER         shift and go to state 135


state 92

    (4) function -> DEF ID . body END
    (5) function -> DEF ID . LPAREN args_opt RPAREN body END
    (19) body -> . sentence
    (20) body -> . sentence body
    (24) sentence -> . assignment
    (25) sentence -> . expression
    (26) sentence -> . print
    (27) sentence -> . input
    (28) sentence -> . condition
    (29) sentence -> . while_loop
    (30) sentence -> . for_loop
    (31) sentence -> . array
    (32) sentence -> . range_incl
    (33) sentence -> . range_excl
    (34) sentence -> . hash
    (35) sentence -> . function
    (36) sentence -> . class_def
    (37) sentence -> . return_stmt
    (38) sentence -> . break_stmt
    (39) sentence -> . function_call_empty
    (40) sentence -> . function_call_args
    (41) sentence -> . methods
    (45) assignment -> . ID ASSIGN expression
    (46) assignment -> . VAR_INST ASSIGN expression
    (47) assignment -> . ID PLUS ASSIGN expression
    (48) assignment -> . ID MINUS ASSIGN expression
    (49) assignment -> . ID TIMES ASSIGN expression
    (50) assignment -> . ID DIVIDE ASSIGN expression
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . term
    (80) expression -> . ID DOT ID LPAREN args_opt RPAREN
    (21) print -> . PUTS factor
    (22) print -> . PUTS STRING
    (51) input -> . PUTS STRING
    (52) input -> . ID ASSIGN GETS method_chain
    (93) condition -> . IF logic_expression body END
    (94) condition -> . IF logic_expression body ELSE body END
    (88) while_loop -> . WHILE logic_expression body END
    (84) for_loop -> . FOR ID IN range_incl body END
    (81) array -> . ID ASSIGN LCORCH elements RCORCH
    (89) range_incl -> . LPAREN INTEGER RANGE_INCL INTEGER RPAREN
    (90) range_incl -> . INTEGER RANGE_INCL INTEGER
    (91) range_excl -> . LPAREN INTEGER RANGE_EXCL INTEGER RPAREN
    (92) range_excl -> . INTEGER RANGE_EXCL INTEGER
    (85) hash -> . ID ASSIGN LBRACE hash_pairs RBRACE
    (4) function -> . DEF ID body END
    (5) function -> . DEF ID LPAREN args_opt RPAREN body END
    (23) class_def -> . CLASS ID body END
    (43) return_stmt -> . RETURN factor
    (44) break_stmt -> . BREAK
    (78) function_call_empty -> . ID LPAREN RPAREN
    (79) function_call_args -> . ID LPAREN args RPAREN
    (42) methods -> . ID DOT ID
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term EXPONENT factor
    (61) term -> . term MODULE factor
    (62) term -> . factor
    (63) factor -> . INTEGER
    (64) factor -> . FLOAT
    (65) factor -> . STRING
    (66) factor -> . BOOLEAN
    (67) factor -> . ID
    (68) factor -> . VAR_INST
    (69) factor -> . TRUE
    (70) factor -> . FALSE
    (71) factor -> . NIL
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . logic_expression
    (74) factor -> . range_incl
    (75) factor -> . range_excl
    (76) factor -> . function_call_args
    (77) factor -> . function_call_empty
    (95) logic_expression -> . factor logic_op factor
    (96) logic_expression -> . factor logic_connector factor
    (97) logic_expression -> . expression logic_op expression

    LPAREN          shift and go to state 137
    ID              shift and go to state 22
    VAR_INST        shift and go to state 23
    PUTS            shift and go to state 26
    IF              shift and go to state 29
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    INTEGER         shift and go to state 33
    DEF             shift and go to state 34
    CLASS           shift and go to state 35
    RETURN          shift and go to state 36
    BREAK           shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 28
    BOOLEAN         shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    NIL             shift and go to state 42

    body                           shift and go to state 136
    sentence                       shift and go to state 131
    assignment                     shift and go to state 4
    expression                     shift and go to state 5
    print                          shift and go to state 6
    input                          shift and go to state 7
    condition                      shift and go to state 8
    while_loop                     shift and go to state 9
    for_loop                       shift and go to state 10
    array                          shift and go to state 11
    range_incl                     shift and go to state 12
    range_excl                     shift and go to state 13
    hash                           shift and go to state 14
    function                       shift and go to state 15
    class_def                      shift and go to state 16
    return_stmt                    shift and go to state 17
    break_stmt                     shift and go to state 18
    function_call_empty            shift and go to state 19
    function_call_args             shift and go to state 20
    methods                        shift and go to state 21
    term                           shift and go to state 24
    factor                         shift and go to state 27
    logic_expression               shift and go to state 30

state 93

    (23) class_def -> CLASS ID . body END
    (19) body -> . sentence
    (20) body -> . sentence body
    (24) sentence -> . assignment
    (25) sentence -> . expression
    (26) sentence -> . print
    (27) sentence -> . input
    (28) sentence -> . condition
    (29) sentence -> . while_loop
    (30) sentence -> . for_loop
    (31) sentence -> . array
    (32) sentence -> . range_incl
    (33) sentence -> . range_excl
    (34) sentence -> . hash
    (35) sentence -> . function
    (36) sentence -> . class_def
    (37) sentence -> . return_stmt
    (38) sentence -> . break_stmt
    (39) sentence -> . function_call_empty
    (40) sentence -> . function_call_args
    (41) sentence -> . methods
    (45) assignment -> . ID ASSIGN expression
    (46) assignment -> . VAR_INST ASSIGN expression
    (47) assignment -> . ID PLUS ASSIGN expression
    (48) assignment -> . ID MINUS ASSIGN expression
    (49) assignment -> . ID TIMES ASSIGN expression
    (50) assignment -> . ID DIVIDE ASSIGN expression
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . term
    (80) expression -> . ID DOT ID LPAREN args_opt RPAREN
    (21) print -> . PUTS factor
    (22) print -> . PUTS STRING
    (51) input -> . PUTS STRING
    (52) input -> . ID ASSIGN GETS method_chain
    (93) condition -> . IF logic_expression body END
    (94) condition -> . IF logic_expression body ELSE body END
    (88) while_loop -> . WHILE logic_expression body END
    (84) for_loop -> . FOR ID IN range_incl body END
    (81) array -> . ID ASSIGN LCORCH elements RCORCH
    (89) range_incl -> . LPAREN INTEGER RANGE_INCL INTEGER RPAREN
    (90) range_incl -> . INTEGER RANGE_INCL INTEGER
    (91) range_excl -> . LPAREN INTEGER RANGE_EXCL INTEGER RPAREN
    (92) range_excl -> . INTEGER RANGE_EXCL INTEGER
    (85) hash -> . ID ASSIGN LBRACE hash_pairs RBRACE
    (4) function -> . DEF ID body END
    (5) function -> . DEF ID LPAREN args_opt RPAREN body END
    (23) class_def -> . CLASS ID body END
    (43) return_stmt -> . RETURN factor
    (44) break_stmt -> . BREAK
    (78) function_call_empty -> . ID LPAREN RPAREN
    (79) function_call_args -> . ID LPAREN args RPAREN
    (42) methods -> . ID DOT ID
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term EXPONENT factor
    (61) term -> . term MODULE factor
    (62) term -> . factor
    (63) factor -> . INTEGER
    (64) factor -> . FLOAT
    (65) factor -> . STRING
    (66) factor -> . BOOLEAN
    (67) factor -> . ID
    (68) factor -> . VAR_INST
    (69) factor -> . TRUE
    (70) factor -> . FALSE
    (71) factor -> . NIL
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . logic_expression
    (74) factor -> . range_incl
    (75) factor -> . range_excl
    (76) factor -> . function_call_args
    (77) factor -> . function_call_empty
    (95) logic_expression -> . factor logic_op factor
    (96) logic_expression -> . factor logic_connector factor
    (97) logic_expression -> . expression logic_op expression

    ID              shift and go to state 22
    VAR_INST        shift and go to state 23
    PUTS            shift and go to state 26
    IF              shift and go to state 29
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    LPAREN          shift and go to state 25
    INTEGER         shift and go to state 33
    DEF             shift and go to state 34
    CLASS           shift and go to state 35
    RETURN          shift and go to state 36
    BREAK           shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 28
    BOOLEAN         shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    NIL             shift and go to state 42

    body                           shift and go to state 138
    sentence                       shift and go to state 131
    assignment                     shift and go to state 4
    expression                     shift and go to state 5
    print                          shift and go to state 6
    input                          shift and go to state 7
    condition                      shift and go to state 8
    while_loop                     shift and go to state 9
    for_loop                       shift and go to state 10
    array                          shift and go to state 11
    range_incl                     shift and go to state 12
    range_excl                     shift and go to state 13
    hash                           shift and go to state 14
    function                       shift and go to state 15
    class_def                      shift and go to state 16
    return_stmt                    shift and go to state 17
    break_stmt                     shift and go to state 18
    function_call_empty            shift and go to state 19
    function_call_args             shift and go to state 20
    methods                        shift and go to state 21
    term                           shift and go to state 24
    factor                         shift and go to state 27
    logic_expression               shift and go to state 30

state 94

    (43) return_stmt -> RETURN factor .
    (95) logic_expression -> factor . logic_op factor
    (96) logic_expression -> factor . logic_connector factor
    (62) term -> factor .
    (98) logic_op -> . EQUALS
    (99) logic_op -> . NEQUALS
    (100) logic_op -> . GREATEREQ
    (101) logic_op -> . LESSEQ
    (102) logic_op -> . GREATERT
    (103) logic_op -> . LESST
    (104) logic_connector -> . AND
    (105) logic_connector -> . OR
    (106) logic_connector -> . AND_OP
    (107) logic_connector -> . OR_OP

  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NEQUALS resolved as shift
  ! shift/reduce conflict for GREATEREQ resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for GREATERT resolved as shift
  ! shift/reduce conflict for LESST resolved as shift
    ID              reduce using rule 43 (return_stmt -> RETURN factor .)
    VAR_INST        reduce using rule 43 (return_stmt -> RETURN factor .)
    PUTS            reduce using rule 43 (return_stmt -> RETURN factor .)
    IF              reduce using rule 43 (return_stmt -> RETURN factor .)
    WHILE           reduce using rule 43 (return_stmt -> RETURN factor .)
    FOR             reduce using rule 43 (return_stmt -> RETURN factor .)
    LPAREN          reduce using rule 43 (return_stmt -> RETURN factor .)
    INTEGER         reduce using rule 43 (return_stmt -> RETURN factor .)
    DEF             reduce using rule 43 (return_stmt -> RETURN factor .)
    CLASS           reduce using rule 43 (return_stmt -> RETURN factor .)
    RETURN          reduce using rule 43 (return_stmt -> RETURN factor .)
    BREAK           reduce using rule 43 (return_stmt -> RETURN factor .)
    FLOAT           reduce using rule 43 (return_stmt -> RETURN factor .)
    STRING          reduce using rule 43 (return_stmt -> RETURN factor .)
    BOOLEAN         reduce using rule 43 (return_stmt -> RETURN factor .)
    TRUE            reduce using rule 43 (return_stmt -> RETURN factor .)
    FALSE           reduce using rule 43 (return_stmt -> RETURN factor .)
    NIL             reduce using rule 43 (return_stmt -> RETURN factor .)
    $end            reduce using rule 43 (return_stmt -> RETURN factor .)
    END             reduce using rule 43 (return_stmt -> RETURN factor .)
    ELSE            reduce using rule 43 (return_stmt -> RETURN factor .)
    TIMES           reduce using rule 62 (term -> factor .)
    DIVIDE          reduce using rule 62 (term -> factor .)
    EXPONENT        reduce using rule 62 (term -> factor .)
    MODULE          reduce using rule 62 (term -> factor .)
    PLUS            reduce using rule 62 (term -> factor .)
    MINUS           reduce using rule 62 (term -> factor .)
    EQUALS          shift and go to state 47
    NEQUALS         shift and go to state 48
    GREATEREQ       shift and go to state 49
    LESSEQ          shift and go to state 50
    GREATERT        shift and go to state 51
    LESST           shift and go to state 52
    AND             shift and go to state 81
    OR              shift and go to state 82
    AND_OP          shift and go to state 83
    OR_OP           shift and go to state 84

  ! EQUALS          [ reduce using rule 62 (term -> factor .) ]
  ! NEQUALS         [ reduce using rule 62 (term -> factor .) ]
  ! GREATEREQ       [ reduce using rule 62 (term -> factor .) ]
  ! LESSEQ          [ reduce using rule 62 (term -> factor .) ]
  ! GREATERT        [ reduce using rule 62 (term -> factor .) ]
  ! LESST           [ reduce using rule 62 (term -> factor .) ]

    logic_op                       shift and go to state 79
    logic_connector                shift and go to state 80

state 95

    (55) expression -> expression PLUS term .
    (58) term -> term . TIMES factor
    (59) term -> term . DIVIDE factor
    (60) term -> term . EXPONENT factor
    (61) term -> term . MODULE factor
    (57) expression -> term .

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EXPONENT resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! reduce/reduce conflict for PLUS resolved using rule 55 (expression -> expression PLUS term .)
  ! reduce/reduce conflict for MINUS resolved using rule 55 (expression -> expression PLUS term .)
  ! reduce/reduce conflict for EQUALS resolved using rule 55 (expression -> expression PLUS term .)
  ! reduce/reduce conflict for NEQUALS resolved using rule 55 (expression -> expression PLUS term .)
  ! reduce/reduce conflict for GREATEREQ resolved using rule 55 (expression -> expression PLUS term .)
  ! reduce/reduce conflict for LESSEQ resolved using rule 55 (expression -> expression PLUS term .)
  ! reduce/reduce conflict for GREATERT resolved using rule 55 (expression -> expression PLUS term .)
  ! reduce/reduce conflict for LESST resolved using rule 55 (expression -> expression PLUS term .)
    PLUS            reduce using rule 55 (expression -> expression PLUS term .)
    MINUS           reduce using rule 55 (expression -> expression PLUS term .)
    EQUALS          reduce using rule 55 (expression -> expression PLUS term .)
    NEQUALS         reduce using rule 55 (expression -> expression PLUS term .)
    GREATEREQ       reduce using rule 55 (expression -> expression PLUS term .)
    LESSEQ          reduce using rule 55 (expression -> expression PLUS term .)
    GREATERT        reduce using rule 55 (expression -> expression PLUS term .)
    LESST           reduce using rule 55 (expression -> expression PLUS term .)
    ID              reduce using rule 55 (expression -> expression PLUS term .)
    VAR_INST        reduce using rule 55 (expression -> expression PLUS term .)
    PUTS            reduce using rule 55 (expression -> expression PLUS term .)
    IF              reduce using rule 55 (expression -> expression PLUS term .)
    WHILE           reduce using rule 55 (expression -> expression PLUS term .)
    FOR             reduce using rule 55 (expression -> expression PLUS term .)
    LPAREN          reduce using rule 55 (expression -> expression PLUS term .)
    INTEGER         reduce using rule 55 (expression -> expression PLUS term .)
    DEF             reduce using rule 55 (expression -> expression PLUS term .)
    CLASS           reduce using rule 55 (expression -> expression PLUS term .)
    RETURN          reduce using rule 55 (expression -> expression PLUS term .)
    BREAK           reduce using rule 55 (expression -> expression PLUS term .)
    FLOAT           reduce using rule 55 (expression -> expression PLUS term .)
    STRING          reduce using rule 55 (expression -> expression PLUS term .)
    BOOLEAN         reduce using rule 55 (expression -> expression PLUS term .)
    TRUE            reduce using rule 55 (expression -> expression PLUS term .)
    FALSE           reduce using rule 55 (expression -> expression PLUS term .)
    NIL             reduce using rule 55 (expression -> expression PLUS term .)
    $end            reduce using rule 55 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 55 (expression -> expression PLUS term .)
    AND             reduce using rule 55 (expression -> expression PLUS term .)
    OR              reduce using rule 55 (expression -> expression PLUS term .)
    AND_OP          reduce using rule 55 (expression -> expression PLUS term .)
    OR_OP           reduce using rule 55 (expression -> expression PLUS term .)
    END             reduce using rule 55 (expression -> expression PLUS term .)
    ELSE            reduce using rule 55 (expression -> expression PLUS term .)
    COMMA           reduce using rule 55 (expression -> expression PLUS term .)
    RCORCH          reduce using rule 55 (expression -> expression PLUS term .)
    RBRACE          reduce using rule 55 (expression -> expression PLUS term .)
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    EXPONENT        shift and go to state 63
    MODULE          shift and go to state 64

  ! TIMES           [ reduce using rule 55 (expression -> expression PLUS term .) ]
  ! DIVIDE          [ reduce using rule 55 (expression -> expression PLUS term .) ]
  ! EXPONENT        [ reduce using rule 55 (expression -> expression PLUS term .) ]
  ! MODULE          [ reduce using rule 55 (expression -> expression PLUS term .) ]
  ! PLUS            [ reduce using rule 57 (expression -> term .) ]
  ! MINUS           [ reduce using rule 57 (expression -> term .) ]
  ! EQUALS          [ reduce using rule 57 (expression -> term .) ]
  ! NEQUALS         [ reduce using rule 57 (expression -> term .) ]
  ! GREATEREQ       [ reduce using rule 57 (expression -> term .) ]
  ! LESSEQ          [ reduce using rule 57 (expression -> term .) ]
  ! GREATERT        [ reduce using rule 57 (expression -> term .) ]
  ! LESST           [ reduce using rule 57 (expression -> term .) ]


state 96

    (56) expression -> expression MINUS term .
    (58) term -> term . TIMES factor
    (59) term -> term . DIVIDE factor
    (60) term -> term . EXPONENT factor
    (61) term -> term . MODULE factor
    (57) expression -> term .

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EXPONENT resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! reduce/reduce conflict for PLUS resolved using rule 56 (expression -> expression MINUS term .)
  ! reduce/reduce conflict for MINUS resolved using rule 56 (expression -> expression MINUS term .)
  ! reduce/reduce conflict for EQUALS resolved using rule 56 (expression -> expression MINUS term .)
  ! reduce/reduce conflict for NEQUALS resolved using rule 56 (expression -> expression MINUS term .)
  ! reduce/reduce conflict for GREATEREQ resolved using rule 56 (expression -> expression MINUS term .)
  ! reduce/reduce conflict for LESSEQ resolved using rule 56 (expression -> expression MINUS term .)
  ! reduce/reduce conflict for GREATERT resolved using rule 56 (expression -> expression MINUS term .)
  ! reduce/reduce conflict for LESST resolved using rule 56 (expression -> expression MINUS term .)
    PLUS            reduce using rule 56 (expression -> expression MINUS term .)
    MINUS           reduce using rule 56 (expression -> expression MINUS term .)
    EQUALS          reduce using rule 56 (expression -> expression MINUS term .)
    NEQUALS         reduce using rule 56 (expression -> expression MINUS term .)
    GREATEREQ       reduce using rule 56 (expression -> expression MINUS term .)
    LESSEQ          reduce using rule 56 (expression -> expression MINUS term .)
    GREATERT        reduce using rule 56 (expression -> expression MINUS term .)
    LESST           reduce using rule 56 (expression -> expression MINUS term .)
    ID              reduce using rule 56 (expression -> expression MINUS term .)
    VAR_INST        reduce using rule 56 (expression -> expression MINUS term .)
    PUTS            reduce using rule 56 (expression -> expression MINUS term .)
    IF              reduce using rule 56 (expression -> expression MINUS term .)
    WHILE           reduce using rule 56 (expression -> expression MINUS term .)
    FOR             reduce using rule 56 (expression -> expression MINUS term .)
    LPAREN          reduce using rule 56 (expression -> expression MINUS term .)
    INTEGER         reduce using rule 56 (expression -> expression MINUS term .)
    DEF             reduce using rule 56 (expression -> expression MINUS term .)
    CLASS           reduce using rule 56 (expression -> expression MINUS term .)
    RETURN          reduce using rule 56 (expression -> expression MINUS term .)
    BREAK           reduce using rule 56 (expression -> expression MINUS term .)
    FLOAT           reduce using rule 56 (expression -> expression MINUS term .)
    STRING          reduce using rule 56 (expression -> expression MINUS term .)
    BOOLEAN         reduce using rule 56 (expression -> expression MINUS term .)
    TRUE            reduce using rule 56 (expression -> expression MINUS term .)
    FALSE           reduce using rule 56 (expression -> expression MINUS term .)
    NIL             reduce using rule 56 (expression -> expression MINUS term .)
    $end            reduce using rule 56 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 56 (expression -> expression MINUS term .)
    AND             reduce using rule 56 (expression -> expression MINUS term .)
    OR              reduce using rule 56 (expression -> expression MINUS term .)
    AND_OP          reduce using rule 56 (expression -> expression MINUS term .)
    OR_OP           reduce using rule 56 (expression -> expression MINUS term .)
    END             reduce using rule 56 (expression -> expression MINUS term .)
    ELSE            reduce using rule 56 (expression -> expression MINUS term .)
    COMMA           reduce using rule 56 (expression -> expression MINUS term .)
    RCORCH          reduce using rule 56 (expression -> expression MINUS term .)
    RBRACE          reduce using rule 56 (expression -> expression MINUS term .)
    TIMES           shift and go to state 61
    DIVIDE          shift and go to state 62
    EXPONENT        shift and go to state 63
    MODULE          shift and go to state 64

  ! TIMES           [ reduce using rule 56 (expression -> expression MINUS term .) ]
  ! DIVIDE          [ reduce using rule 56 (expression -> expression MINUS term .) ]
  ! EXPONENT        [ reduce using rule 56 (expression -> expression MINUS term .) ]
  ! MODULE          [ reduce using rule 56 (expression -> expression MINUS term .) ]
  ! PLUS            [ reduce using rule 57 (expression -> term .) ]
  ! MINUS           [ reduce using rule 57 (expression -> term .) ]
  ! EQUALS          [ reduce using rule 57 (expression -> term .) ]
  ! NEQUALS         [ reduce using rule 57 (expression -> term .) ]
  ! GREATEREQ       [ reduce using rule 57 (expression -> term .) ]
  ! LESSEQ          [ reduce using rule 57 (expression -> term .) ]
  ! GREATERT        [ reduce using rule 57 (expression -> term .) ]
  ! LESST           [ reduce using rule 57 (expression -> term .) ]


state 97

    (97) logic_expression -> expression logic_op expression .
    (55) expression -> expression . PLUS term
    (56) expression -> expression . MINUS term
    (97) logic_expression -> expression . logic_op expression
    (98) logic_op -> . EQUALS
    (99) logic_op -> . NEQUALS
    (100) logic_op -> . GREATEREQ
    (101) logic_op -> . LESSEQ
    (102) logic_op -> . GREATERT
    (103) logic_op -> . LESST

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NEQUALS resolved as shift
  ! shift/reduce conflict for GREATEREQ resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for GREATERT resolved as shift
  ! shift/reduce conflict for LESST resolved as shift
    AND             reduce using rule 97 (logic_expression -> expression logic_op expression .)
    OR              reduce using rule 97 (logic_expression -> expression logic_op expression .)
    AND_OP          reduce using rule 97 (logic_expression -> expression logic_op expression .)
    OR_OP           reduce using rule 97 (logic_expression -> expression logic_op expression .)
    TIMES           reduce using rule 97 (logic_expression -> expression logic_op expression .)
    DIVIDE          reduce using rule 97 (logic_expression -> expression logic_op expression .)
    EXPONENT        reduce using rule 97 (logic_expression -> expression logic_op expression .)
    MODULE          reduce using rule 97 (logic_expression -> expression logic_op expression .)
    ID              reduce using rule 97 (logic_expression -> expression logic_op expression .)
    VAR_INST        reduce using rule 97 (logic_expression -> expression logic_op expression .)
    PUTS            reduce using rule 97 (logic_expression -> expression logic_op expression .)
    IF              reduce using rule 97 (logic_expression -> expression logic_op expression .)
    WHILE           reduce using rule 97 (logic_expression -> expression logic_op expression .)
    FOR             reduce using rule 97 (logic_expression -> expression logic_op expression .)
    LPAREN          reduce using rule 97 (logic_expression -> expression logic_op expression .)
    INTEGER         reduce using rule 97 (logic_expression -> expression logic_op expression .)
    DEF             reduce using rule 97 (logic_expression -> expression logic_op expression .)
    CLASS           reduce using rule 97 (logic_expression -> expression logic_op expression .)
    RETURN          reduce using rule 97 (logic_expression -> expression logic_op expression .)
    BREAK           reduce using rule 97 (logic_expression -> expression logic_op expression .)
    FLOAT           reduce using rule 97 (logic_expression -> expression logic_op expression .)
    STRING          reduce using rule 97 (logic_expression -> expression logic_op expression .)
    BOOLEAN         reduce using rule 97 (logic_expression -> expression logic_op expression .)
    TRUE            reduce using rule 97 (logic_expression -> expression logic_op expression .)
    FALSE           reduce using rule 97 (logic_expression -> expression logic_op expression .)
    NIL             reduce using rule 97 (logic_expression -> expression logic_op expression .)
    $end            reduce using rule 97 (logic_expression -> expression logic_op expression .)
    RPAREN          reduce using rule 97 (logic_expression -> expression logic_op expression .)
    END             reduce using rule 97 (logic_expression -> expression logic_op expression .)
    ELSE            reduce using rule 97 (logic_expression -> expression logic_op expression .)
    COMMA           reduce using rule 97 (logic_expression -> expression logic_op expression .)
    RCORCH          reduce using rule 97 (logic_expression -> expression logic_op expression .)
    RBRACE          reduce using rule 97 (logic_expression -> expression logic_op expression .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    EQUALS          shift and go to state 47
    NEQUALS         shift and go to state 48
    GREATEREQ       shift and go to state 49
    LESSEQ          shift and go to state 50
    GREATERT        shift and go to state 51
    LESST           shift and go to state 52

  ! EQUALS          [ reduce using rule 97 (logic_expression -> expression logic_op expression .) ]
  ! NEQUALS         [ reduce using rule 97 (logic_expression -> expression logic_op expression .) ]
  ! GREATEREQ       [ reduce using rule 97 (logic_expression -> expression logic_op expression .) ]
  ! LESSEQ          [ reduce using rule 97 (logic_expression -> expression logic_op expression .) ]
  ! GREATERT        [ reduce using rule 97 (logic_expression -> expression logic_op expression .) ]
  ! LESST           [ reduce using rule 97 (logic_expression -> expression logic_op expression .) ]
  ! PLUS            [ reduce using rule 97 (logic_expression -> expression logic_op expression .) ]
  ! MINUS           [ reduce using rule 97 (logic_expression -> expression logic_op expression .) ]

    logic_op                       shift and go to state 46

state 98

    (45) assignment -> ID ASSIGN expression .
    (55) expression -> expression . PLUS term
    (56) expression -> expression . MINUS term
    (97) logic_expression -> expression . logic_op expression
    (98) logic_op -> . EQUALS
    (99) logic_op -> . NEQUALS
    (100) logic_op -> . GREATEREQ
    (101) logic_op -> . LESSEQ
    (102) logic_op -> . GREATERT
    (103) logic_op -> . LESST

    ID              reduce using rule 45 (assignment -> ID ASSIGN expression .)
    VAR_INST        reduce using rule 45 (assignment -> ID ASSIGN expression .)
    PUTS            reduce using rule 45 (assignment -> ID ASSIGN expression .)
    IF              reduce using rule 45 (assignment -> ID ASSIGN expression .)
    WHILE           reduce using rule 45 (assignment -> ID ASSIGN expression .)
    FOR             reduce using rule 45 (assignment -> ID ASSIGN expression .)
    LPAREN          reduce using rule 45 (assignment -> ID ASSIGN expression .)
    INTEGER         reduce using rule 45 (assignment -> ID ASSIGN expression .)
    DEF             reduce using rule 45 (assignment -> ID ASSIGN expression .)
    CLASS           reduce using rule 45 (assignment -> ID ASSIGN expression .)
    RETURN          reduce using rule 45 (assignment -> ID ASSIGN expression .)
    BREAK           reduce using rule 45 (assignment -> ID ASSIGN expression .)
    FLOAT           reduce using rule 45 (assignment -> ID ASSIGN expression .)
    STRING          reduce using rule 45 (assignment -> ID ASSIGN expression .)
    BOOLEAN         reduce using rule 45 (assignment -> ID ASSIGN expression .)
    TRUE            reduce using rule 45 (assignment -> ID ASSIGN expression .)
    FALSE           reduce using rule 45 (assignment -> ID ASSIGN expression .)
    NIL             reduce using rule 45 (assignment -> ID ASSIGN expression .)
    $end            reduce using rule 45 (assignment -> ID ASSIGN expression .)
    END             reduce using rule 45 (assignment -> ID ASSIGN expression .)
    ELSE            reduce using rule 45 (assignment -> ID ASSIGN expression .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    EQUALS          shift and go to state 47
    NEQUALS         shift and go to state 48
    GREATEREQ       shift and go to state 49
    LESSEQ          shift and go to state 50
    GREATERT        shift and go to state 51
    LESST           shift and go to state 52

    logic_op                       shift and go to state 46

state 99

    (52) input -> ID ASSIGN GETS . method_chain
    (53) method_chain -> . DOT ID
    (54) method_chain -> . method_chain DOT ID

    DOT             shift and go to state 140

    method_chain                   shift and go to state 139

state 100

    (81) array -> ID ASSIGN LCORCH . elements RCORCH
    (82) elements -> . factor
    (83) elements -> . factor COMMA elements
    (63) factor -> . INTEGER
    (64) factor -> . FLOAT
    (65) factor -> . STRING
    (66) factor -> . BOOLEAN
    (67) factor -> . ID
    (68) factor -> . VAR_INST
    (69) factor -> . TRUE
    (70) factor -> . FALSE
    (71) factor -> . NIL
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . logic_expression
    (74) factor -> . range_incl
    (75) factor -> . range_excl
    (76) factor -> . function_call_args
    (77) factor -> . function_call_empty
    (95) logic_expression -> . factor logic_op factor
    (96) logic_expression -> . factor logic_connector factor
    (97) logic_expression -> . expression logic_op expression
    (89) range_incl -> . LPAREN INTEGER RANGE_INCL INTEGER RPAREN
    (90) range_incl -> . INTEGER RANGE_INCL INTEGER
    (91) range_excl -> . LPAREN INTEGER RANGE_EXCL INTEGER RPAREN
    (92) range_excl -> . INTEGER RANGE_EXCL INTEGER
    (79) function_call_args -> . ID LPAREN args RPAREN
    (78) function_call_empty -> . ID LPAREN RPAREN
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . term
    (80) expression -> . ID DOT ID LPAREN args_opt RPAREN
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term EXPONENT factor
    (61) term -> . term MODULE factor
    (62) term -> . factor

    INTEGER         shift and go to state 76
    FLOAT           shift and go to state 38
    STRING          shift and go to state 28
    BOOLEAN         shift and go to state 39
    ID              shift and go to state 77
    VAR_INST        shift and go to state 69
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    NIL             shift and go to state 42
    LPAREN          shift and go to state 65

    elements                       shift and go to state 141
    factor                         shift and go to state 142
    expression                     shift and go to state 78
    logic_expression               shift and go to state 30
    range_incl                     shift and go to state 70
    range_excl                     shift and go to state 71
    function_call_args             shift and go to state 72
    function_call_empty            shift and go to state 73
    term                           shift and go to state 24

state 101

    (85) hash -> ID ASSIGN LBRACE . hash_pairs RBRACE
    (86) hash_pairs -> . STRING COLON factor
    (87) hash_pairs -> . STRING COLON factor COMMA hash_pairs

    STRING          shift and go to state 144

    hash_pairs                     shift and go to state 143

state 102

    (47) assignment -> ID PLUS ASSIGN . expression
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . term
    (80) expression -> . ID DOT ID LPAREN args_opt RPAREN
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term EXPONENT factor
    (61) term -> . term MODULE factor
    (62) term -> . factor
    (63) factor -> . INTEGER
    (64) factor -> . FLOAT
    (65) factor -> . STRING
    (66) factor -> . BOOLEAN
    (67) factor -> . ID
    (68) factor -> . VAR_INST
    (69) factor -> . TRUE
    (70) factor -> . FALSE
    (71) factor -> . NIL
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . logic_expression
    (74) factor -> . range_incl
    (75) factor -> . range_excl
    (76) factor -> . function_call_args
    (77) factor -> . function_call_empty
    (95) logic_expression -> . factor logic_op factor
    (96) logic_expression -> . factor logic_connector factor
    (97) logic_expression -> . expression logic_op expression
    (89) range_incl -> . LPAREN INTEGER RANGE_INCL INTEGER RPAREN
    (90) range_incl -> . INTEGER RANGE_INCL INTEGER
    (91) range_excl -> . LPAREN INTEGER RANGE_EXCL INTEGER RPAREN
    (92) range_excl -> . INTEGER RANGE_EXCL INTEGER
    (79) function_call_args -> . ID LPAREN args RPAREN
    (78) function_call_empty -> . ID LPAREN RPAREN

    ID              shift and go to state 68
    INTEGER         shift and go to state 76
    FLOAT           shift and go to state 38
    STRING          shift and go to state 28
    BOOLEAN         shift and go to state 39
    VAR_INST        shift and go to state 69
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    NIL             shift and go to state 42
    LPAREN          shift and go to state 65

    expression                     shift and go to state 145
    term                           shift and go to state 24
    factor                         shift and go to state 27
    logic_expression               shift and go to state 30
    range_incl                     shift and go to state 70
    range_excl                     shift and go to state 71
    function_call_args             shift and go to state 72
    function_call_empty            shift and go to state 73

state 103

    (48) assignment -> ID MINUS ASSIGN . expression
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . term
    (80) expression -> . ID DOT ID LPAREN args_opt RPAREN
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term EXPONENT factor
    (61) term -> . term MODULE factor
    (62) term -> . factor
    (63) factor -> . INTEGER
    (64) factor -> . FLOAT
    (65) factor -> . STRING
    (66) factor -> . BOOLEAN
    (67) factor -> . ID
    (68) factor -> . VAR_INST
    (69) factor -> . TRUE
    (70) factor -> . FALSE
    (71) factor -> . NIL
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . logic_expression
    (74) factor -> . range_incl
    (75) factor -> . range_excl
    (76) factor -> . function_call_args
    (77) factor -> . function_call_empty
    (95) logic_expression -> . factor logic_op factor
    (96) logic_expression -> . factor logic_connector factor
    (97) logic_expression -> . expression logic_op expression
    (89) range_incl -> . LPAREN INTEGER RANGE_INCL INTEGER RPAREN
    (90) range_incl -> . INTEGER RANGE_INCL INTEGER
    (91) range_excl -> . LPAREN INTEGER RANGE_EXCL INTEGER RPAREN
    (92) range_excl -> . INTEGER RANGE_EXCL INTEGER
    (79) function_call_args -> . ID LPAREN args RPAREN
    (78) function_call_empty -> . ID LPAREN RPAREN

    ID              shift and go to state 68
    INTEGER         shift and go to state 76
    FLOAT           shift and go to state 38
    STRING          shift and go to state 28
    BOOLEAN         shift and go to state 39
    VAR_INST        shift and go to state 69
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    NIL             shift and go to state 42
    LPAREN          shift and go to state 65

    expression                     shift and go to state 146
    term                           shift and go to state 24
    factor                         shift and go to state 27
    logic_expression               shift and go to state 30
    range_incl                     shift and go to state 70
    range_excl                     shift and go to state 71
    function_call_args             shift and go to state 72
    function_call_empty            shift and go to state 73

state 104

    (49) assignment -> ID TIMES ASSIGN . expression
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . term
    (80) expression -> . ID DOT ID LPAREN args_opt RPAREN
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term EXPONENT factor
    (61) term -> . term MODULE factor
    (62) term -> . factor
    (63) factor -> . INTEGER
    (64) factor -> . FLOAT
    (65) factor -> . STRING
    (66) factor -> . BOOLEAN
    (67) factor -> . ID
    (68) factor -> . VAR_INST
    (69) factor -> . TRUE
    (70) factor -> . FALSE
    (71) factor -> . NIL
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . logic_expression
    (74) factor -> . range_incl
    (75) factor -> . range_excl
    (76) factor -> . function_call_args
    (77) factor -> . function_call_empty
    (95) logic_expression -> . factor logic_op factor
    (96) logic_expression -> . factor logic_connector factor
    (97) logic_expression -> . expression logic_op expression
    (89) range_incl -> . LPAREN INTEGER RANGE_INCL INTEGER RPAREN
    (90) range_incl -> . INTEGER RANGE_INCL INTEGER
    (91) range_excl -> . LPAREN INTEGER RANGE_EXCL INTEGER RPAREN
    (92) range_excl -> . INTEGER RANGE_EXCL INTEGER
    (79) function_call_args -> . ID LPAREN args RPAREN
    (78) function_call_empty -> . ID LPAREN RPAREN

    ID              shift and go to state 68
    INTEGER         shift and go to state 76
    FLOAT           shift and go to state 38
    STRING          shift and go to state 28
    BOOLEAN         shift and go to state 39
    VAR_INST        shift and go to state 69
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    NIL             shift and go to state 42
    LPAREN          shift and go to state 65

    expression                     shift and go to state 147
    term                           shift and go to state 24
    factor                         shift and go to state 27
    logic_expression               shift and go to state 30
    range_incl                     shift and go to state 70
    range_excl                     shift and go to state 71
    function_call_args             shift and go to state 72
    function_call_empty            shift and go to state 73

state 105

    (50) assignment -> ID DIVIDE ASSIGN . expression
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . term
    (80) expression -> . ID DOT ID LPAREN args_opt RPAREN
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term EXPONENT factor
    (61) term -> . term MODULE factor
    (62) term -> . factor
    (63) factor -> . INTEGER
    (64) factor -> . FLOAT
    (65) factor -> . STRING
    (66) factor -> . BOOLEAN
    (67) factor -> . ID
    (68) factor -> . VAR_INST
    (69) factor -> . TRUE
    (70) factor -> . FALSE
    (71) factor -> . NIL
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . logic_expression
    (74) factor -> . range_incl
    (75) factor -> . range_excl
    (76) factor -> . function_call_args
    (77) factor -> . function_call_empty
    (95) logic_expression -> . factor logic_op factor
    (96) logic_expression -> . factor logic_connector factor
    (97) logic_expression -> . expression logic_op expression
    (89) range_incl -> . LPAREN INTEGER RANGE_INCL INTEGER RPAREN
    (90) range_incl -> . INTEGER RANGE_INCL INTEGER
    (91) range_excl -> . LPAREN INTEGER RANGE_EXCL INTEGER RPAREN
    (92) range_excl -> . INTEGER RANGE_EXCL INTEGER
    (79) function_call_args -> . ID LPAREN args RPAREN
    (78) function_call_empty -> . ID LPAREN RPAREN

    ID              shift and go to state 68
    INTEGER         shift and go to state 76
    FLOAT           shift and go to state 38
    STRING          shift and go to state 28
    BOOLEAN         shift and go to state 39
    VAR_INST        shift and go to state 69
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    NIL             shift and go to state 42
    LPAREN          shift and go to state 65

    expression                     shift and go to state 148
    term                           shift and go to state 24
    factor                         shift and go to state 27
    logic_expression               shift and go to state 30
    range_incl                     shift and go to state 70
    range_excl                     shift and go to state 71
    function_call_args             shift and go to state 72
    function_call_empty            shift and go to state 73

state 106

    (80) expression -> ID DOT ID . LPAREN args_opt RPAREN
    (42) methods -> ID DOT ID .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 149
    ID              reduce using rule 42 (methods -> ID DOT ID .)
    VAR_INST        reduce using rule 42 (methods -> ID DOT ID .)
    PUTS            reduce using rule 42 (methods -> ID DOT ID .)
    IF              reduce using rule 42 (methods -> ID DOT ID .)
    WHILE           reduce using rule 42 (methods -> ID DOT ID .)
    FOR             reduce using rule 42 (methods -> ID DOT ID .)
    INTEGER         reduce using rule 42 (methods -> ID DOT ID .)
    DEF             reduce using rule 42 (methods -> ID DOT ID .)
    CLASS           reduce using rule 42 (methods -> ID DOT ID .)
    RETURN          reduce using rule 42 (methods -> ID DOT ID .)
    BREAK           reduce using rule 42 (methods -> ID DOT ID .)
    FLOAT           reduce using rule 42 (methods -> ID DOT ID .)
    STRING          reduce using rule 42 (methods -> ID DOT ID .)
    BOOLEAN         reduce using rule 42 (methods -> ID DOT ID .)
    TRUE            reduce using rule 42 (methods -> ID DOT ID .)
    FALSE           reduce using rule 42 (methods -> ID DOT ID .)
    NIL             reduce using rule 42 (methods -> ID DOT ID .)
    $end            reduce using rule 42 (methods -> ID DOT ID .)
    END             reduce using rule 42 (methods -> ID DOT ID .)
    ELSE            reduce using rule 42 (methods -> ID DOT ID .)

  ! LPAREN          [ reduce using rule 42 (methods -> ID DOT ID .) ]


state 107

    (6) arg -> ID .
    (7) arg -> ID . ASSIGN expression

    COMMA           reduce using rule 6 (arg -> ID .)
    RPAREN          reduce using rule 6 (arg -> ID .)
    ASSIGN          shift and go to state 150


state 108

    (78) function_call_empty -> ID LPAREN RPAREN .

    ID              reduce using rule 78 (function_call_empty -> ID LPAREN RPAREN .)
    VAR_INST        reduce using rule 78 (function_call_empty -> ID LPAREN RPAREN .)
    PUTS            reduce using rule 78 (function_call_empty -> ID LPAREN RPAREN .)
    IF              reduce using rule 78 (function_call_empty -> ID LPAREN RPAREN .)
    WHILE           reduce using rule 78 (function_call_empty -> ID LPAREN RPAREN .)
    FOR             reduce using rule 78 (function_call_empty -> ID LPAREN RPAREN .)
    LPAREN          reduce using rule 78 (function_call_empty -> ID LPAREN RPAREN .)
    INTEGER         reduce using rule 78 (function_call_empty -> ID LPAREN RPAREN .)
    DEF             reduce using rule 78 (function_call_empty -> ID LPAREN RPAREN .)
    CLASS           reduce using rule 78 (function_call_empty -> ID LPAREN RPAREN .)
    RETURN          reduce using rule 78 (function_call_empty -> ID LPAREN RPAREN .)
    BREAK           reduce using rule 78 (function_call_empty -> ID LPAREN RPAREN .)
    FLOAT           reduce using rule 78 (function_call_empty -> ID LPAREN RPAREN .)
    STRING          reduce using rule 78 (function_call_empty -> ID LPAREN RPAREN .)
    BOOLEAN         reduce using rule 78 (function_call_empty -> ID LPAREN RPAREN .)
    TRUE            reduce using rule 78 (function_call_empty -> ID LPAREN RPAREN .)
    FALSE           reduce using rule 78 (function_call_empty -> ID LPAREN RPAREN .)
    NIL             reduce using rule 78 (function_call_empty -> ID LPAREN RPAREN .)
    $end            reduce using rule 78 (function_call_empty -> ID LPAREN RPAREN .)
    EQUALS          reduce using rule 78 (function_call_empty -> ID LPAREN RPAREN .)
    NEQUALS         reduce using rule 78 (function_call_empty -> ID LPAREN RPAREN .)
    GREATEREQ       reduce using rule 78 (function_call_empty -> ID LPAREN RPAREN .)
    LESSEQ          reduce using rule 78 (function_call_empty -> ID LPAREN RPAREN .)
    GREATERT        reduce using rule 78 (function_call_empty -> ID LPAREN RPAREN .)
    LESST           reduce using rule 78 (function_call_empty -> ID LPAREN RPAREN .)
    AND             reduce using rule 78 (function_call_empty -> ID LPAREN RPAREN .)
    OR              reduce using rule 78 (function_call_empty -> ID LPAREN RPAREN .)
    AND_OP          reduce using rule 78 (function_call_empty -> ID LPAREN RPAREN .)
    OR_OP           reduce using rule 78 (function_call_empty -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 78 (function_call_empty -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 78 (function_call_empty -> ID LPAREN RPAREN .)
    EXPONENT        reduce using rule 78 (function_call_empty -> ID LPAREN RPAREN .)
    MODULE          reduce using rule 78 (function_call_empty -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 78 (function_call_empty -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 78 (function_call_empty -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 78 (function_call_empty -> ID LPAREN RPAREN .)
    END             reduce using rule 78 (function_call_empty -> ID LPAREN RPAREN .)
    ELSE            reduce using rule 78 (function_call_empty -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 78 (function_call_empty -> ID LPAREN RPAREN .)
    RCORCH          reduce using rule 78 (function_call_empty -> ID LPAREN RPAREN .)
    RBRACE          reduce using rule 78 (function_call_empty -> ID LPAREN RPAREN .)


state 109

    (79) function_call_args -> ID LPAREN args . RPAREN

    RPAREN          shift and go to state 151


state 110

    (15) args -> arg .
    (16) args -> arg . COMMA args

    RPAREN          reduce using rule 15 (args -> arg .)
    COMMA           shift and go to state 152


state 111

    (8) arg -> STRING .

    COMMA           reduce using rule 8 (arg -> STRING .)
    RPAREN          reduce using rule 8 (arg -> STRING .)


state 112

    (9) arg -> INTEGER .

    COMMA           reduce using rule 9 (arg -> INTEGER .)
    RPAREN          reduce using rule 9 (arg -> INTEGER .)


state 113

    (10) arg -> FLOAT .

    COMMA           reduce using rule 10 (arg -> FLOAT .)
    RPAREN          reduce using rule 10 (arg -> FLOAT .)


state 114

    (11) arg -> BOOLEAN .

    COMMA           reduce using rule 11 (arg -> BOOLEAN .)
    RPAREN          reduce using rule 11 (arg -> BOOLEAN .)


state 115

    (12) arg -> TRUE .

    COMMA           reduce using rule 12 (arg -> TRUE .)
    RPAREN          reduce using rule 12 (arg -> TRUE .)


state 116

    (13) arg -> FALSE .

    COMMA           reduce using rule 13 (arg -> FALSE .)
    RPAREN          reduce using rule 13 (arg -> FALSE .)


state 117

    (14) arg -> NIL .

    COMMA           reduce using rule 14 (arg -> NIL .)
    RPAREN          reduce using rule 14 (arg -> NIL .)


state 118

    (46) assignment -> VAR_INST ASSIGN expression .
    (55) expression -> expression . PLUS term
    (56) expression -> expression . MINUS term
    (97) logic_expression -> expression . logic_op expression
    (98) logic_op -> . EQUALS
    (99) logic_op -> . NEQUALS
    (100) logic_op -> . GREATEREQ
    (101) logic_op -> . LESSEQ
    (102) logic_op -> . GREATERT
    (103) logic_op -> . LESST

    ID              reduce using rule 46 (assignment -> VAR_INST ASSIGN expression .)
    VAR_INST        reduce using rule 46 (assignment -> VAR_INST ASSIGN expression .)
    PUTS            reduce using rule 46 (assignment -> VAR_INST ASSIGN expression .)
    IF              reduce using rule 46 (assignment -> VAR_INST ASSIGN expression .)
    WHILE           reduce using rule 46 (assignment -> VAR_INST ASSIGN expression .)
    FOR             reduce using rule 46 (assignment -> VAR_INST ASSIGN expression .)
    LPAREN          reduce using rule 46 (assignment -> VAR_INST ASSIGN expression .)
    INTEGER         reduce using rule 46 (assignment -> VAR_INST ASSIGN expression .)
    DEF             reduce using rule 46 (assignment -> VAR_INST ASSIGN expression .)
    CLASS           reduce using rule 46 (assignment -> VAR_INST ASSIGN expression .)
    RETURN          reduce using rule 46 (assignment -> VAR_INST ASSIGN expression .)
    BREAK           reduce using rule 46 (assignment -> VAR_INST ASSIGN expression .)
    FLOAT           reduce using rule 46 (assignment -> VAR_INST ASSIGN expression .)
    STRING          reduce using rule 46 (assignment -> VAR_INST ASSIGN expression .)
    BOOLEAN         reduce using rule 46 (assignment -> VAR_INST ASSIGN expression .)
    TRUE            reduce using rule 46 (assignment -> VAR_INST ASSIGN expression .)
    FALSE           reduce using rule 46 (assignment -> VAR_INST ASSIGN expression .)
    NIL             reduce using rule 46 (assignment -> VAR_INST ASSIGN expression .)
    $end            reduce using rule 46 (assignment -> VAR_INST ASSIGN expression .)
    END             reduce using rule 46 (assignment -> VAR_INST ASSIGN expression .)
    ELSE            reduce using rule 46 (assignment -> VAR_INST ASSIGN expression .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    EQUALS          shift and go to state 47
    NEQUALS         shift and go to state 48
    GREATEREQ       shift and go to state 49
    LESSEQ          shift and go to state 50
    GREATERT        shift and go to state 51
    LESST           shift and go to state 52

    logic_op                       shift and go to state 46

state 119

    (58) term -> term TIMES factor .
    (95) logic_expression -> factor . logic_op factor
    (96) logic_expression -> factor . logic_connector factor
    (62) term -> factor .
    (98) logic_op -> . EQUALS
    (99) logic_op -> . NEQUALS
    (100) logic_op -> . GREATEREQ
    (101) logic_op -> . LESSEQ
    (102) logic_op -> . GREATERT
    (103) logic_op -> . LESST
    (104) logic_connector -> . AND
    (105) logic_connector -> . OR
    (106) logic_connector -> . AND_OP
    (107) logic_connector -> . OR_OP

  ! reduce/reduce conflict for TIMES resolved using rule 58 (term -> term TIMES factor .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 58 (term -> term TIMES factor .)
  ! reduce/reduce conflict for EXPONENT resolved using rule 58 (term -> term TIMES factor .)
  ! reduce/reduce conflict for MODULE resolved using rule 58 (term -> term TIMES factor .)
  ! reduce/reduce conflict for PLUS resolved using rule 58 (term -> term TIMES factor .)
  ! reduce/reduce conflict for MINUS resolved using rule 58 (term -> term TIMES factor .)
  ! reduce/reduce conflict for EQUALS resolved using rule 58 (term -> term TIMES factor .)
  ! reduce/reduce conflict for NEQUALS resolved using rule 58 (term -> term TIMES factor .)
  ! reduce/reduce conflict for GREATEREQ resolved using rule 58 (term -> term TIMES factor .)
  ! reduce/reduce conflict for LESSEQ resolved using rule 58 (term -> term TIMES factor .)
  ! reduce/reduce conflict for GREATERT resolved using rule 58 (term -> term TIMES factor .)
  ! reduce/reduce conflict for LESST resolved using rule 58 (term -> term TIMES factor .)
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NEQUALS resolved as shift
  ! shift/reduce conflict for GREATEREQ resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for GREATERT resolved as shift
  ! shift/reduce conflict for LESST resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
    TIMES           reduce using rule 58 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 58 (term -> term TIMES factor .)
    EXPONENT        reduce using rule 58 (term -> term TIMES factor .)
    MODULE          reduce using rule 58 (term -> term TIMES factor .)
    PLUS            reduce using rule 58 (term -> term TIMES factor .)
    MINUS           reduce using rule 58 (term -> term TIMES factor .)
    ID              reduce using rule 58 (term -> term TIMES factor .)
    VAR_INST        reduce using rule 58 (term -> term TIMES factor .)
    PUTS            reduce using rule 58 (term -> term TIMES factor .)
    IF              reduce using rule 58 (term -> term TIMES factor .)
    WHILE           reduce using rule 58 (term -> term TIMES factor .)
    FOR             reduce using rule 58 (term -> term TIMES factor .)
    LPAREN          reduce using rule 58 (term -> term TIMES factor .)
    INTEGER         reduce using rule 58 (term -> term TIMES factor .)
    DEF             reduce using rule 58 (term -> term TIMES factor .)
    CLASS           reduce using rule 58 (term -> term TIMES factor .)
    RETURN          reduce using rule 58 (term -> term TIMES factor .)
    BREAK           reduce using rule 58 (term -> term TIMES factor .)
    FLOAT           reduce using rule 58 (term -> term TIMES factor .)
    STRING          reduce using rule 58 (term -> term TIMES factor .)
    BOOLEAN         reduce using rule 58 (term -> term TIMES factor .)
    TRUE            reduce using rule 58 (term -> term TIMES factor .)
    FALSE           reduce using rule 58 (term -> term TIMES factor .)
    NIL             reduce using rule 58 (term -> term TIMES factor .)
    $end            reduce using rule 58 (term -> term TIMES factor .)
    RPAREN          reduce using rule 58 (term -> term TIMES factor .)
    END             reduce using rule 58 (term -> term TIMES factor .)
    ELSE            reduce using rule 58 (term -> term TIMES factor .)
    COMMA           reduce using rule 58 (term -> term TIMES factor .)
    RCORCH          reduce using rule 58 (term -> term TIMES factor .)
    RBRACE          reduce using rule 58 (term -> term TIMES factor .)
    EQUALS          shift and go to state 47
    NEQUALS         shift and go to state 48
    GREATEREQ       shift and go to state 49
    LESSEQ          shift and go to state 50
    GREATERT        shift and go to state 51
    LESST           shift and go to state 52
    AND             shift and go to state 81
    OR              shift and go to state 82
    AND_OP          shift and go to state 83
    OR_OP           shift and go to state 84

  ! EQUALS          [ reduce using rule 58 (term -> term TIMES factor .) ]
  ! NEQUALS         [ reduce using rule 58 (term -> term TIMES factor .) ]
  ! GREATEREQ       [ reduce using rule 58 (term -> term TIMES factor .) ]
  ! LESSEQ          [ reduce using rule 58 (term -> term TIMES factor .) ]
  ! GREATERT        [ reduce using rule 58 (term -> term TIMES factor .) ]
  ! LESST           [ reduce using rule 58 (term -> term TIMES factor .) ]
  ! AND             [ reduce using rule 58 (term -> term TIMES factor .) ]
  ! OR              [ reduce using rule 58 (term -> term TIMES factor .) ]
  ! AND_OP          [ reduce using rule 58 (term -> term TIMES factor .) ]
  ! OR_OP           [ reduce using rule 58 (term -> term TIMES factor .) ]
  ! TIMES           [ reduce using rule 62 (term -> factor .) ]
  ! DIVIDE          [ reduce using rule 62 (term -> factor .) ]
  ! EXPONENT        [ reduce using rule 62 (term -> factor .) ]
  ! MODULE          [ reduce using rule 62 (term -> factor .) ]
  ! PLUS            [ reduce using rule 62 (term -> factor .) ]
  ! MINUS           [ reduce using rule 62 (term -> factor .) ]
  ! EQUALS          [ reduce using rule 62 (term -> factor .) ]
  ! NEQUALS         [ reduce using rule 62 (term -> factor .) ]
  ! GREATEREQ       [ reduce using rule 62 (term -> factor .) ]
  ! LESSEQ          [ reduce using rule 62 (term -> factor .) ]
  ! GREATERT        [ reduce using rule 62 (term -> factor .) ]
  ! LESST           [ reduce using rule 62 (term -> factor .) ]

    logic_op                       shift and go to state 79
    logic_connector                shift and go to state 80

state 120

    (59) term -> term DIVIDE factor .
    (95) logic_expression -> factor . logic_op factor
    (96) logic_expression -> factor . logic_connector factor
    (62) term -> factor .
    (98) logic_op -> . EQUALS
    (99) logic_op -> . NEQUALS
    (100) logic_op -> . GREATEREQ
    (101) logic_op -> . LESSEQ
    (102) logic_op -> . GREATERT
    (103) logic_op -> . LESST
    (104) logic_connector -> . AND
    (105) logic_connector -> . OR
    (106) logic_connector -> . AND_OP
    (107) logic_connector -> . OR_OP

  ! reduce/reduce conflict for TIMES resolved using rule 59 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 59 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for EXPONENT resolved using rule 59 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for MODULE resolved using rule 59 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for PLUS resolved using rule 59 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for MINUS resolved using rule 59 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for EQUALS resolved using rule 59 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for NEQUALS resolved using rule 59 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for GREATEREQ resolved using rule 59 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for LESSEQ resolved using rule 59 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for GREATERT resolved using rule 59 (term -> term DIVIDE factor .)
  ! reduce/reduce conflict for LESST resolved using rule 59 (term -> term DIVIDE factor .)
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NEQUALS resolved as shift
  ! shift/reduce conflict for GREATEREQ resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for GREATERT resolved as shift
  ! shift/reduce conflict for LESST resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
    TIMES           reduce using rule 59 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 59 (term -> term DIVIDE factor .)
    EXPONENT        reduce using rule 59 (term -> term DIVIDE factor .)
    MODULE          reduce using rule 59 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 59 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 59 (term -> term DIVIDE factor .)
    ID              reduce using rule 59 (term -> term DIVIDE factor .)
    VAR_INST        reduce using rule 59 (term -> term DIVIDE factor .)
    PUTS            reduce using rule 59 (term -> term DIVIDE factor .)
    IF              reduce using rule 59 (term -> term DIVIDE factor .)
    WHILE           reduce using rule 59 (term -> term DIVIDE factor .)
    FOR             reduce using rule 59 (term -> term DIVIDE factor .)
    LPAREN          reduce using rule 59 (term -> term DIVIDE factor .)
    INTEGER         reduce using rule 59 (term -> term DIVIDE factor .)
    DEF             reduce using rule 59 (term -> term DIVIDE factor .)
    CLASS           reduce using rule 59 (term -> term DIVIDE factor .)
    RETURN          reduce using rule 59 (term -> term DIVIDE factor .)
    BREAK           reduce using rule 59 (term -> term DIVIDE factor .)
    FLOAT           reduce using rule 59 (term -> term DIVIDE factor .)
    STRING          reduce using rule 59 (term -> term DIVIDE factor .)
    BOOLEAN         reduce using rule 59 (term -> term DIVIDE factor .)
    TRUE            reduce using rule 59 (term -> term DIVIDE factor .)
    FALSE           reduce using rule 59 (term -> term DIVIDE factor .)
    NIL             reduce using rule 59 (term -> term DIVIDE factor .)
    $end            reduce using rule 59 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 59 (term -> term DIVIDE factor .)
    END             reduce using rule 59 (term -> term DIVIDE factor .)
    ELSE            reduce using rule 59 (term -> term DIVIDE factor .)
    COMMA           reduce using rule 59 (term -> term DIVIDE factor .)
    RCORCH          reduce using rule 59 (term -> term DIVIDE factor .)
    RBRACE          reduce using rule 59 (term -> term DIVIDE factor .)
    EQUALS          shift and go to state 47
    NEQUALS         shift and go to state 48
    GREATEREQ       shift and go to state 49
    LESSEQ          shift and go to state 50
    GREATERT        shift and go to state 51
    LESST           shift and go to state 52
    AND             shift and go to state 81
    OR              shift and go to state 82
    AND_OP          shift and go to state 83
    OR_OP           shift and go to state 84

  ! EQUALS          [ reduce using rule 59 (term -> term DIVIDE factor .) ]
  ! NEQUALS         [ reduce using rule 59 (term -> term DIVIDE factor .) ]
  ! GREATEREQ       [ reduce using rule 59 (term -> term DIVIDE factor .) ]
  ! LESSEQ          [ reduce using rule 59 (term -> term DIVIDE factor .) ]
  ! GREATERT        [ reduce using rule 59 (term -> term DIVIDE factor .) ]
  ! LESST           [ reduce using rule 59 (term -> term DIVIDE factor .) ]
  ! AND             [ reduce using rule 59 (term -> term DIVIDE factor .) ]
  ! OR              [ reduce using rule 59 (term -> term DIVIDE factor .) ]
  ! AND_OP          [ reduce using rule 59 (term -> term DIVIDE factor .) ]
  ! OR_OP           [ reduce using rule 59 (term -> term DIVIDE factor .) ]
  ! TIMES           [ reduce using rule 62 (term -> factor .) ]
  ! DIVIDE          [ reduce using rule 62 (term -> factor .) ]
  ! EXPONENT        [ reduce using rule 62 (term -> factor .) ]
  ! MODULE          [ reduce using rule 62 (term -> factor .) ]
  ! PLUS            [ reduce using rule 62 (term -> factor .) ]
  ! MINUS           [ reduce using rule 62 (term -> factor .) ]
  ! EQUALS          [ reduce using rule 62 (term -> factor .) ]
  ! NEQUALS         [ reduce using rule 62 (term -> factor .) ]
  ! GREATEREQ       [ reduce using rule 62 (term -> factor .) ]
  ! LESSEQ          [ reduce using rule 62 (term -> factor .) ]
  ! GREATERT        [ reduce using rule 62 (term -> factor .) ]
  ! LESST           [ reduce using rule 62 (term -> factor .) ]

    logic_op                       shift and go to state 79
    logic_connector                shift and go to state 80

state 121

    (60) term -> term EXPONENT factor .
    (95) logic_expression -> factor . logic_op factor
    (96) logic_expression -> factor . logic_connector factor
    (62) term -> factor .
    (98) logic_op -> . EQUALS
    (99) logic_op -> . NEQUALS
    (100) logic_op -> . GREATEREQ
    (101) logic_op -> . LESSEQ
    (102) logic_op -> . GREATERT
    (103) logic_op -> . LESST
    (104) logic_connector -> . AND
    (105) logic_connector -> . OR
    (106) logic_connector -> . AND_OP
    (107) logic_connector -> . OR_OP

  ! reduce/reduce conflict for TIMES resolved using rule 60 (term -> term EXPONENT factor .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 60 (term -> term EXPONENT factor .)
  ! reduce/reduce conflict for EXPONENT resolved using rule 60 (term -> term EXPONENT factor .)
  ! reduce/reduce conflict for MODULE resolved using rule 60 (term -> term EXPONENT factor .)
  ! reduce/reduce conflict for PLUS resolved using rule 60 (term -> term EXPONENT factor .)
  ! reduce/reduce conflict for MINUS resolved using rule 60 (term -> term EXPONENT factor .)
  ! reduce/reduce conflict for EQUALS resolved using rule 60 (term -> term EXPONENT factor .)
  ! reduce/reduce conflict for NEQUALS resolved using rule 60 (term -> term EXPONENT factor .)
  ! reduce/reduce conflict for GREATEREQ resolved using rule 60 (term -> term EXPONENT factor .)
  ! reduce/reduce conflict for LESSEQ resolved using rule 60 (term -> term EXPONENT factor .)
  ! reduce/reduce conflict for GREATERT resolved using rule 60 (term -> term EXPONENT factor .)
  ! reduce/reduce conflict for LESST resolved using rule 60 (term -> term EXPONENT factor .)
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NEQUALS resolved as shift
  ! shift/reduce conflict for GREATEREQ resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for GREATERT resolved as shift
  ! shift/reduce conflict for LESST resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
    TIMES           reduce using rule 60 (term -> term EXPONENT factor .)
    DIVIDE          reduce using rule 60 (term -> term EXPONENT factor .)
    EXPONENT        reduce using rule 60 (term -> term EXPONENT factor .)
    MODULE          reduce using rule 60 (term -> term EXPONENT factor .)
    PLUS            reduce using rule 60 (term -> term EXPONENT factor .)
    MINUS           reduce using rule 60 (term -> term EXPONENT factor .)
    ID              reduce using rule 60 (term -> term EXPONENT factor .)
    VAR_INST        reduce using rule 60 (term -> term EXPONENT factor .)
    PUTS            reduce using rule 60 (term -> term EXPONENT factor .)
    IF              reduce using rule 60 (term -> term EXPONENT factor .)
    WHILE           reduce using rule 60 (term -> term EXPONENT factor .)
    FOR             reduce using rule 60 (term -> term EXPONENT factor .)
    LPAREN          reduce using rule 60 (term -> term EXPONENT factor .)
    INTEGER         reduce using rule 60 (term -> term EXPONENT factor .)
    DEF             reduce using rule 60 (term -> term EXPONENT factor .)
    CLASS           reduce using rule 60 (term -> term EXPONENT factor .)
    RETURN          reduce using rule 60 (term -> term EXPONENT factor .)
    BREAK           reduce using rule 60 (term -> term EXPONENT factor .)
    FLOAT           reduce using rule 60 (term -> term EXPONENT factor .)
    STRING          reduce using rule 60 (term -> term EXPONENT factor .)
    BOOLEAN         reduce using rule 60 (term -> term EXPONENT factor .)
    TRUE            reduce using rule 60 (term -> term EXPONENT factor .)
    FALSE           reduce using rule 60 (term -> term EXPONENT factor .)
    NIL             reduce using rule 60 (term -> term EXPONENT factor .)
    $end            reduce using rule 60 (term -> term EXPONENT factor .)
    RPAREN          reduce using rule 60 (term -> term EXPONENT factor .)
    END             reduce using rule 60 (term -> term EXPONENT factor .)
    ELSE            reduce using rule 60 (term -> term EXPONENT factor .)
    COMMA           reduce using rule 60 (term -> term EXPONENT factor .)
    RCORCH          reduce using rule 60 (term -> term EXPONENT factor .)
    RBRACE          reduce using rule 60 (term -> term EXPONENT factor .)
    EQUALS          shift and go to state 47
    NEQUALS         shift and go to state 48
    GREATEREQ       shift and go to state 49
    LESSEQ          shift and go to state 50
    GREATERT        shift and go to state 51
    LESST           shift and go to state 52
    AND             shift and go to state 81
    OR              shift and go to state 82
    AND_OP          shift and go to state 83
    OR_OP           shift and go to state 84

  ! EQUALS          [ reduce using rule 60 (term -> term EXPONENT factor .) ]
  ! NEQUALS         [ reduce using rule 60 (term -> term EXPONENT factor .) ]
  ! GREATEREQ       [ reduce using rule 60 (term -> term EXPONENT factor .) ]
  ! LESSEQ          [ reduce using rule 60 (term -> term EXPONENT factor .) ]
  ! GREATERT        [ reduce using rule 60 (term -> term EXPONENT factor .) ]
  ! LESST           [ reduce using rule 60 (term -> term EXPONENT factor .) ]
  ! AND             [ reduce using rule 60 (term -> term EXPONENT factor .) ]
  ! OR              [ reduce using rule 60 (term -> term EXPONENT factor .) ]
  ! AND_OP          [ reduce using rule 60 (term -> term EXPONENT factor .) ]
  ! OR_OP           [ reduce using rule 60 (term -> term EXPONENT factor .) ]
  ! TIMES           [ reduce using rule 62 (term -> factor .) ]
  ! DIVIDE          [ reduce using rule 62 (term -> factor .) ]
  ! EXPONENT        [ reduce using rule 62 (term -> factor .) ]
  ! MODULE          [ reduce using rule 62 (term -> factor .) ]
  ! PLUS            [ reduce using rule 62 (term -> factor .) ]
  ! MINUS           [ reduce using rule 62 (term -> factor .) ]
  ! EQUALS          [ reduce using rule 62 (term -> factor .) ]
  ! NEQUALS         [ reduce using rule 62 (term -> factor .) ]
  ! GREATEREQ       [ reduce using rule 62 (term -> factor .) ]
  ! LESSEQ          [ reduce using rule 62 (term -> factor .) ]
  ! GREATERT        [ reduce using rule 62 (term -> factor .) ]
  ! LESST           [ reduce using rule 62 (term -> factor .) ]

    logic_op                       shift and go to state 79
    logic_connector                shift and go to state 80

state 122

    (61) term -> term MODULE factor .
    (95) logic_expression -> factor . logic_op factor
    (96) logic_expression -> factor . logic_connector factor
    (62) term -> factor .
    (98) logic_op -> . EQUALS
    (99) logic_op -> . NEQUALS
    (100) logic_op -> . GREATEREQ
    (101) logic_op -> . LESSEQ
    (102) logic_op -> . GREATERT
    (103) logic_op -> . LESST
    (104) logic_connector -> . AND
    (105) logic_connector -> . OR
    (106) logic_connector -> . AND_OP
    (107) logic_connector -> . OR_OP

  ! reduce/reduce conflict for TIMES resolved using rule 61 (term -> term MODULE factor .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 61 (term -> term MODULE factor .)
  ! reduce/reduce conflict for EXPONENT resolved using rule 61 (term -> term MODULE factor .)
  ! reduce/reduce conflict for MODULE resolved using rule 61 (term -> term MODULE factor .)
  ! reduce/reduce conflict for PLUS resolved using rule 61 (term -> term MODULE factor .)
  ! reduce/reduce conflict for MINUS resolved using rule 61 (term -> term MODULE factor .)
  ! reduce/reduce conflict for EQUALS resolved using rule 61 (term -> term MODULE factor .)
  ! reduce/reduce conflict for NEQUALS resolved using rule 61 (term -> term MODULE factor .)
  ! reduce/reduce conflict for GREATEREQ resolved using rule 61 (term -> term MODULE factor .)
  ! reduce/reduce conflict for LESSEQ resolved using rule 61 (term -> term MODULE factor .)
  ! reduce/reduce conflict for GREATERT resolved using rule 61 (term -> term MODULE factor .)
  ! reduce/reduce conflict for LESST resolved using rule 61 (term -> term MODULE factor .)
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NEQUALS resolved as shift
  ! shift/reduce conflict for GREATEREQ resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for GREATERT resolved as shift
  ! shift/reduce conflict for LESST resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
    TIMES           reduce using rule 61 (term -> term MODULE factor .)
    DIVIDE          reduce using rule 61 (term -> term MODULE factor .)
    EXPONENT        reduce using rule 61 (term -> term MODULE factor .)
    MODULE          reduce using rule 61 (term -> term MODULE factor .)
    PLUS            reduce using rule 61 (term -> term MODULE factor .)
    MINUS           reduce using rule 61 (term -> term MODULE factor .)
    ID              reduce using rule 61 (term -> term MODULE factor .)
    VAR_INST        reduce using rule 61 (term -> term MODULE factor .)
    PUTS            reduce using rule 61 (term -> term MODULE factor .)
    IF              reduce using rule 61 (term -> term MODULE factor .)
    WHILE           reduce using rule 61 (term -> term MODULE factor .)
    FOR             reduce using rule 61 (term -> term MODULE factor .)
    LPAREN          reduce using rule 61 (term -> term MODULE factor .)
    INTEGER         reduce using rule 61 (term -> term MODULE factor .)
    DEF             reduce using rule 61 (term -> term MODULE factor .)
    CLASS           reduce using rule 61 (term -> term MODULE factor .)
    RETURN          reduce using rule 61 (term -> term MODULE factor .)
    BREAK           reduce using rule 61 (term -> term MODULE factor .)
    FLOAT           reduce using rule 61 (term -> term MODULE factor .)
    STRING          reduce using rule 61 (term -> term MODULE factor .)
    BOOLEAN         reduce using rule 61 (term -> term MODULE factor .)
    TRUE            reduce using rule 61 (term -> term MODULE factor .)
    FALSE           reduce using rule 61 (term -> term MODULE factor .)
    NIL             reduce using rule 61 (term -> term MODULE factor .)
    $end            reduce using rule 61 (term -> term MODULE factor .)
    RPAREN          reduce using rule 61 (term -> term MODULE factor .)
    END             reduce using rule 61 (term -> term MODULE factor .)
    ELSE            reduce using rule 61 (term -> term MODULE factor .)
    COMMA           reduce using rule 61 (term -> term MODULE factor .)
    RCORCH          reduce using rule 61 (term -> term MODULE factor .)
    RBRACE          reduce using rule 61 (term -> term MODULE factor .)
    EQUALS          shift and go to state 47
    NEQUALS         shift and go to state 48
    GREATEREQ       shift and go to state 49
    LESSEQ          shift and go to state 50
    GREATERT        shift and go to state 51
    LESST           shift and go to state 52
    AND             shift and go to state 81
    OR              shift and go to state 82
    AND_OP          shift and go to state 83
    OR_OP           shift and go to state 84

  ! EQUALS          [ reduce using rule 61 (term -> term MODULE factor .) ]
  ! NEQUALS         [ reduce using rule 61 (term -> term MODULE factor .) ]
  ! GREATEREQ       [ reduce using rule 61 (term -> term MODULE factor .) ]
  ! LESSEQ          [ reduce using rule 61 (term -> term MODULE factor .) ]
  ! GREATERT        [ reduce using rule 61 (term -> term MODULE factor .) ]
  ! LESST           [ reduce using rule 61 (term -> term MODULE factor .) ]
  ! AND             [ reduce using rule 61 (term -> term MODULE factor .) ]
  ! OR              [ reduce using rule 61 (term -> term MODULE factor .) ]
  ! AND_OP          [ reduce using rule 61 (term -> term MODULE factor .) ]
  ! OR_OP           [ reduce using rule 61 (term -> term MODULE factor .) ]
  ! TIMES           [ reduce using rule 62 (term -> factor .) ]
  ! DIVIDE          [ reduce using rule 62 (term -> factor .) ]
  ! EXPONENT        [ reduce using rule 62 (term -> factor .) ]
  ! MODULE          [ reduce using rule 62 (term -> factor .) ]
  ! PLUS            [ reduce using rule 62 (term -> factor .) ]
  ! MINUS           [ reduce using rule 62 (term -> factor .) ]
  ! EQUALS          [ reduce using rule 62 (term -> factor .) ]
  ! NEQUALS         [ reduce using rule 62 (term -> factor .) ]
  ! GREATEREQ       [ reduce using rule 62 (term -> factor .) ]
  ! LESSEQ          [ reduce using rule 62 (term -> factor .) ]
  ! GREATERT        [ reduce using rule 62 (term -> factor .) ]
  ! LESST           [ reduce using rule 62 (term -> factor .) ]

    logic_op                       shift and go to state 79
    logic_connector                shift and go to state 80

state 123

    (89) range_incl -> LPAREN INTEGER RANGE_INCL . INTEGER RPAREN
    (90) range_incl -> INTEGER RANGE_INCL . INTEGER

    INTEGER         shift and go to state 153


state 124

    (91) range_excl -> LPAREN INTEGER RANGE_EXCL . INTEGER RPAREN
    (92) range_excl -> INTEGER RANGE_EXCL . INTEGER

    INTEGER         shift and go to state 154


state 125

    (72) factor -> LPAREN expression RPAREN .

    EQUALS          reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    NEQUALS         reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    GREATEREQ       reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    LESSEQ          reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    GREATERT        reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    LESST           reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    AND_OP          reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    OR_OP           reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    EXPONENT        reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    MODULE          reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    ID              reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    VAR_INST        reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    PUTS            reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    IF              reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    FOR             reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    INTEGER         reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    DEF             reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    CLASS           reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    BREAK           reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    FLOAT           reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    STRING          reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    BOOLEAN         reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    TRUE            reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    FALSE           reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    NIL             reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    $end            reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    RCORCH          reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 72 (factor -> LPAREN expression RPAREN .)


state 126

    (80) expression -> ID DOT . ID LPAREN args_opt RPAREN

    ID              shift and go to state 155


state 127

    (79) function_call_args -> ID LPAREN . args RPAREN
    (78) function_call_empty -> ID LPAREN . RPAREN
    (15) args -> . arg
    (16) args -> . arg COMMA args
    (6) arg -> . ID
    (7) arg -> . ID ASSIGN expression
    (8) arg -> . STRING
    (9) arg -> . INTEGER
    (10) arg -> . FLOAT
    (11) arg -> . BOOLEAN
    (12) arg -> . TRUE
    (13) arg -> . FALSE
    (14) arg -> . NIL

    RPAREN          shift and go to state 108
    ID              shift and go to state 107
    STRING          shift and go to state 111
    INTEGER         shift and go to state 112
    FLOAT           shift and go to state 113
    BOOLEAN         shift and go to state 114
    TRUE            shift and go to state 115
    FALSE           shift and go to state 116
    NIL             shift and go to state 117

    args                           shift and go to state 109
    arg                            shift and go to state 110

state 128

    (95) logic_expression -> factor logic_op factor .
    (95) logic_expression -> factor . logic_op factor
    (96) logic_expression -> factor . logic_connector factor
    (62) term -> factor .
    (98) logic_op -> . EQUALS
    (99) logic_op -> . NEQUALS
    (100) logic_op -> . GREATEREQ
    (101) logic_op -> . LESSEQ
    (102) logic_op -> . GREATERT
    (103) logic_op -> . LESST
    (104) logic_connector -> . AND
    (105) logic_connector -> . OR
    (106) logic_connector -> . AND_OP
    (107) logic_connector -> . OR_OP

  ! reduce/reduce conflict for TIMES resolved using rule 62 (term -> factor .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 62 (term -> factor .)
  ! reduce/reduce conflict for EXPONENT resolved using rule 62 (term -> factor .)
  ! reduce/reduce conflict for MODULE resolved using rule 62 (term -> factor .)
  ! reduce/reduce conflict for PLUS resolved using rule 62 (term -> factor .)
  ! reduce/reduce conflict for MINUS resolved using rule 62 (term -> factor .)
  ! reduce/reduce conflict for EQUALS resolved using rule 62 (term -> factor .)
  ! reduce/reduce conflict for NEQUALS resolved using rule 62 (term -> factor .)
  ! reduce/reduce conflict for GREATEREQ resolved using rule 62 (term -> factor .)
  ! reduce/reduce conflict for LESSEQ resolved using rule 62 (term -> factor .)
  ! reduce/reduce conflict for GREATERT resolved using rule 62 (term -> factor .)
  ! reduce/reduce conflict for LESST resolved using rule 62 (term -> factor .)
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NEQUALS resolved as shift
  ! shift/reduce conflict for GREATEREQ resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for GREATERT resolved as shift
  ! shift/reduce conflict for LESST resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
    ID              reduce using rule 95 (logic_expression -> factor logic_op factor .)
    VAR_INST        reduce using rule 95 (logic_expression -> factor logic_op factor .)
    PUTS            reduce using rule 95 (logic_expression -> factor logic_op factor .)
    IF              reduce using rule 95 (logic_expression -> factor logic_op factor .)
    WHILE           reduce using rule 95 (logic_expression -> factor logic_op factor .)
    FOR             reduce using rule 95 (logic_expression -> factor logic_op factor .)
    LPAREN          reduce using rule 95 (logic_expression -> factor logic_op factor .)
    INTEGER         reduce using rule 95 (logic_expression -> factor logic_op factor .)
    DEF             reduce using rule 95 (logic_expression -> factor logic_op factor .)
    CLASS           reduce using rule 95 (logic_expression -> factor logic_op factor .)
    RETURN          reduce using rule 95 (logic_expression -> factor logic_op factor .)
    BREAK           reduce using rule 95 (logic_expression -> factor logic_op factor .)
    FLOAT           reduce using rule 95 (logic_expression -> factor logic_op factor .)
    STRING          reduce using rule 95 (logic_expression -> factor logic_op factor .)
    BOOLEAN         reduce using rule 95 (logic_expression -> factor logic_op factor .)
    TRUE            reduce using rule 95 (logic_expression -> factor logic_op factor .)
    FALSE           reduce using rule 95 (logic_expression -> factor logic_op factor .)
    NIL             reduce using rule 95 (logic_expression -> factor logic_op factor .)
    $end            reduce using rule 95 (logic_expression -> factor logic_op factor .)
    RPAREN          reduce using rule 95 (logic_expression -> factor logic_op factor .)
    END             reduce using rule 95 (logic_expression -> factor logic_op factor .)
    ELSE            reduce using rule 95 (logic_expression -> factor logic_op factor .)
    COMMA           reduce using rule 95 (logic_expression -> factor logic_op factor .)
    RCORCH          reduce using rule 95 (logic_expression -> factor logic_op factor .)
    RBRACE          reduce using rule 95 (logic_expression -> factor logic_op factor .)
    TIMES           reduce using rule 62 (term -> factor .)
    DIVIDE          reduce using rule 62 (term -> factor .)
    EXPONENT        reduce using rule 62 (term -> factor .)
    MODULE          reduce using rule 62 (term -> factor .)
    PLUS            reduce using rule 62 (term -> factor .)
    MINUS           reduce using rule 62 (term -> factor .)
    EQUALS          shift and go to state 47
    NEQUALS         shift and go to state 48
    GREATEREQ       shift and go to state 49
    LESSEQ          shift and go to state 50
    GREATERT        shift and go to state 51
    LESST           shift and go to state 52
    AND             shift and go to state 81
    OR              shift and go to state 82
    AND_OP          shift and go to state 83
    OR_OP           shift and go to state 84

  ! EQUALS          [ reduce using rule 95 (logic_expression -> factor logic_op factor .) ]
  ! NEQUALS         [ reduce using rule 95 (logic_expression -> factor logic_op factor .) ]
  ! GREATEREQ       [ reduce using rule 95 (logic_expression -> factor logic_op factor .) ]
  ! LESSEQ          [ reduce using rule 95 (logic_expression -> factor logic_op factor .) ]
  ! GREATERT        [ reduce using rule 95 (logic_expression -> factor logic_op factor .) ]
  ! LESST           [ reduce using rule 95 (logic_expression -> factor logic_op factor .) ]
  ! AND             [ reduce using rule 95 (logic_expression -> factor logic_op factor .) ]
  ! OR              [ reduce using rule 95 (logic_expression -> factor logic_op factor .) ]
  ! AND_OP          [ reduce using rule 95 (logic_expression -> factor logic_op factor .) ]
  ! OR_OP           [ reduce using rule 95 (logic_expression -> factor logic_op factor .) ]
  ! TIMES           [ reduce using rule 95 (logic_expression -> factor logic_op factor .) ]
  ! DIVIDE          [ reduce using rule 95 (logic_expression -> factor logic_op factor .) ]
  ! EXPONENT        [ reduce using rule 95 (logic_expression -> factor logic_op factor .) ]
  ! MODULE          [ reduce using rule 95 (logic_expression -> factor logic_op factor .) ]
  ! PLUS            [ reduce using rule 95 (logic_expression -> factor logic_op factor .) ]
  ! MINUS           [ reduce using rule 95 (logic_expression -> factor logic_op factor .) ]
  ! EQUALS          [ reduce using rule 62 (term -> factor .) ]
  ! NEQUALS         [ reduce using rule 62 (term -> factor .) ]
  ! GREATEREQ       [ reduce using rule 62 (term -> factor .) ]
  ! LESSEQ          [ reduce using rule 62 (term -> factor .) ]
  ! GREATERT        [ reduce using rule 62 (term -> factor .) ]
  ! LESST           [ reduce using rule 62 (term -> factor .) ]

    logic_op                       shift and go to state 79
    logic_connector                shift and go to state 80

state 129

    (96) logic_expression -> factor logic_connector factor .
    (95) logic_expression -> factor . logic_op factor
    (96) logic_expression -> factor . logic_connector factor
    (62) term -> factor .
    (98) logic_op -> . EQUALS
    (99) logic_op -> . NEQUALS
    (100) logic_op -> . GREATEREQ
    (101) logic_op -> . LESSEQ
    (102) logic_op -> . GREATERT
    (103) logic_op -> . LESST
    (104) logic_connector -> . AND
    (105) logic_connector -> . OR
    (106) logic_connector -> . AND_OP
    (107) logic_connector -> . OR_OP

  ! reduce/reduce conflict for TIMES resolved using rule 62 (term -> factor .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 62 (term -> factor .)
  ! reduce/reduce conflict for EXPONENT resolved using rule 62 (term -> factor .)
  ! reduce/reduce conflict for MODULE resolved using rule 62 (term -> factor .)
  ! reduce/reduce conflict for PLUS resolved using rule 62 (term -> factor .)
  ! reduce/reduce conflict for MINUS resolved using rule 62 (term -> factor .)
  ! reduce/reduce conflict for EQUALS resolved using rule 62 (term -> factor .)
  ! reduce/reduce conflict for NEQUALS resolved using rule 62 (term -> factor .)
  ! reduce/reduce conflict for GREATEREQ resolved using rule 62 (term -> factor .)
  ! reduce/reduce conflict for LESSEQ resolved using rule 62 (term -> factor .)
  ! reduce/reduce conflict for GREATERT resolved using rule 62 (term -> factor .)
  ! reduce/reduce conflict for LESST resolved using rule 62 (term -> factor .)
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NEQUALS resolved as shift
  ! shift/reduce conflict for GREATEREQ resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for GREATERT resolved as shift
  ! shift/reduce conflict for LESST resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND_OP resolved as shift
  ! shift/reduce conflict for OR_OP resolved as shift
    ID              reduce using rule 96 (logic_expression -> factor logic_connector factor .)
    VAR_INST        reduce using rule 96 (logic_expression -> factor logic_connector factor .)
    PUTS            reduce using rule 96 (logic_expression -> factor logic_connector factor .)
    IF              reduce using rule 96 (logic_expression -> factor logic_connector factor .)
    WHILE           reduce using rule 96 (logic_expression -> factor logic_connector factor .)
    FOR             reduce using rule 96 (logic_expression -> factor logic_connector factor .)
    LPAREN          reduce using rule 96 (logic_expression -> factor logic_connector factor .)
    INTEGER         reduce using rule 96 (logic_expression -> factor logic_connector factor .)
    DEF             reduce using rule 96 (logic_expression -> factor logic_connector factor .)
    CLASS           reduce using rule 96 (logic_expression -> factor logic_connector factor .)
    RETURN          reduce using rule 96 (logic_expression -> factor logic_connector factor .)
    BREAK           reduce using rule 96 (logic_expression -> factor logic_connector factor .)
    FLOAT           reduce using rule 96 (logic_expression -> factor logic_connector factor .)
    STRING          reduce using rule 96 (logic_expression -> factor logic_connector factor .)
    BOOLEAN         reduce using rule 96 (logic_expression -> factor logic_connector factor .)
    TRUE            reduce using rule 96 (logic_expression -> factor logic_connector factor .)
    FALSE           reduce using rule 96 (logic_expression -> factor logic_connector factor .)
    NIL             reduce using rule 96 (logic_expression -> factor logic_connector factor .)
    $end            reduce using rule 96 (logic_expression -> factor logic_connector factor .)
    RPAREN          reduce using rule 96 (logic_expression -> factor logic_connector factor .)
    END             reduce using rule 96 (logic_expression -> factor logic_connector factor .)
    ELSE            reduce using rule 96 (logic_expression -> factor logic_connector factor .)
    COMMA           reduce using rule 96 (logic_expression -> factor logic_connector factor .)
    RCORCH          reduce using rule 96 (logic_expression -> factor logic_connector factor .)
    RBRACE          reduce using rule 96 (logic_expression -> factor logic_connector factor .)
    TIMES           reduce using rule 62 (term -> factor .)
    DIVIDE          reduce using rule 62 (term -> factor .)
    EXPONENT        reduce using rule 62 (term -> factor .)
    MODULE          reduce using rule 62 (term -> factor .)
    PLUS            reduce using rule 62 (term -> factor .)
    MINUS           reduce using rule 62 (term -> factor .)
    EQUALS          shift and go to state 47
    NEQUALS         shift and go to state 48
    GREATEREQ       shift and go to state 49
    LESSEQ          shift and go to state 50
    GREATERT        shift and go to state 51
    LESST           shift and go to state 52
    AND             shift and go to state 81
    OR              shift and go to state 82
    AND_OP          shift and go to state 83
    OR_OP           shift and go to state 84

  ! EQUALS          [ reduce using rule 96 (logic_expression -> factor logic_connector factor .) ]
  ! NEQUALS         [ reduce using rule 96 (logic_expression -> factor logic_connector factor .) ]
  ! GREATEREQ       [ reduce using rule 96 (logic_expression -> factor logic_connector factor .) ]
  ! LESSEQ          [ reduce using rule 96 (logic_expression -> factor logic_connector factor .) ]
  ! GREATERT        [ reduce using rule 96 (logic_expression -> factor logic_connector factor .) ]
  ! LESST           [ reduce using rule 96 (logic_expression -> factor logic_connector factor .) ]
  ! AND             [ reduce using rule 96 (logic_expression -> factor logic_connector factor .) ]
  ! OR              [ reduce using rule 96 (logic_expression -> factor logic_connector factor .) ]
  ! AND_OP          [ reduce using rule 96 (logic_expression -> factor logic_connector factor .) ]
  ! OR_OP           [ reduce using rule 96 (logic_expression -> factor logic_connector factor .) ]
  ! TIMES           [ reduce using rule 96 (logic_expression -> factor logic_connector factor .) ]
  ! DIVIDE          [ reduce using rule 96 (logic_expression -> factor logic_connector factor .) ]
  ! EXPONENT        [ reduce using rule 96 (logic_expression -> factor logic_connector factor .) ]
  ! MODULE          [ reduce using rule 96 (logic_expression -> factor logic_connector factor .) ]
  ! PLUS            [ reduce using rule 96 (logic_expression -> factor logic_connector factor .) ]
  ! MINUS           [ reduce using rule 96 (logic_expression -> factor logic_connector factor .) ]
  ! EQUALS          [ reduce using rule 62 (term -> factor .) ]
  ! NEQUALS         [ reduce using rule 62 (term -> factor .) ]
  ! GREATEREQ       [ reduce using rule 62 (term -> factor .) ]
  ! LESSEQ          [ reduce using rule 62 (term -> factor .) ]
  ! GREATERT        [ reduce using rule 62 (term -> factor .) ]
  ! LESST           [ reduce using rule 62 (term -> factor .) ]

    logic_connector                shift and go to state 80
    logic_op                       shift and go to state 79

state 130

    (93) condition -> IF logic_expression body . END
    (94) condition -> IF logic_expression body . ELSE body END

    END             shift and go to state 156
    ELSE            shift and go to state 157


state 131

    (19) body -> sentence .
    (20) body -> sentence . body
    (19) body -> . sentence
    (20) body -> . sentence body
    (24) sentence -> . assignment
    (25) sentence -> . expression
    (26) sentence -> . print
    (27) sentence -> . input
    (28) sentence -> . condition
    (29) sentence -> . while_loop
    (30) sentence -> . for_loop
    (31) sentence -> . array
    (32) sentence -> . range_incl
    (33) sentence -> . range_excl
    (34) sentence -> . hash
    (35) sentence -> . function
    (36) sentence -> . class_def
    (37) sentence -> . return_stmt
    (38) sentence -> . break_stmt
    (39) sentence -> . function_call_empty
    (40) sentence -> . function_call_args
    (41) sentence -> . methods
    (45) assignment -> . ID ASSIGN expression
    (46) assignment -> . VAR_INST ASSIGN expression
    (47) assignment -> . ID PLUS ASSIGN expression
    (48) assignment -> . ID MINUS ASSIGN expression
    (49) assignment -> . ID TIMES ASSIGN expression
    (50) assignment -> . ID DIVIDE ASSIGN expression
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . term
    (80) expression -> . ID DOT ID LPAREN args_opt RPAREN
    (21) print -> . PUTS factor
    (22) print -> . PUTS STRING
    (51) input -> . PUTS STRING
    (52) input -> . ID ASSIGN GETS method_chain
    (93) condition -> . IF logic_expression body END
    (94) condition -> . IF logic_expression body ELSE body END
    (88) while_loop -> . WHILE logic_expression body END
    (84) for_loop -> . FOR ID IN range_incl body END
    (81) array -> . ID ASSIGN LCORCH elements RCORCH
    (89) range_incl -> . LPAREN INTEGER RANGE_INCL INTEGER RPAREN
    (90) range_incl -> . INTEGER RANGE_INCL INTEGER
    (91) range_excl -> . LPAREN INTEGER RANGE_EXCL INTEGER RPAREN
    (92) range_excl -> . INTEGER RANGE_EXCL INTEGER
    (85) hash -> . ID ASSIGN LBRACE hash_pairs RBRACE
    (4) function -> . DEF ID body END
    (5) function -> . DEF ID LPAREN args_opt RPAREN body END
    (23) class_def -> . CLASS ID body END
    (43) return_stmt -> . RETURN factor
    (44) break_stmt -> . BREAK
    (78) function_call_empty -> . ID LPAREN RPAREN
    (79) function_call_args -> . ID LPAREN args RPAREN
    (42) methods -> . ID DOT ID
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term EXPONENT factor
    (61) term -> . term MODULE factor
    (62) term -> . factor
    (63) factor -> . INTEGER
    (64) factor -> . FLOAT
    (65) factor -> . STRING
    (66) factor -> . BOOLEAN
    (67) factor -> . ID
    (68) factor -> . VAR_INST
    (69) factor -> . TRUE
    (70) factor -> . FALSE
    (71) factor -> . NIL
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . logic_expression
    (74) factor -> . range_incl
    (75) factor -> . range_excl
    (76) factor -> . function_call_args
    (77) factor -> . function_call_empty
    (95) logic_expression -> . factor logic_op factor
    (96) logic_expression -> . factor logic_connector factor
    (97) logic_expression -> . expression logic_op expression

    END             reduce using rule 19 (body -> sentence .)
    ELSE            reduce using rule 19 (body -> sentence .)
    ID              shift and go to state 22
    VAR_INST        shift and go to state 23
    PUTS            shift and go to state 26
    IF              shift and go to state 29
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    LPAREN          shift and go to state 25
    INTEGER         shift and go to state 33
    DEF             shift and go to state 34
    CLASS           shift and go to state 35
    RETURN          shift and go to state 36
    BREAK           shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 28
    BOOLEAN         shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    NIL             shift and go to state 42

    sentence                       shift and go to state 131
    body                           shift and go to state 158
    assignment                     shift and go to state 4
    expression                     shift and go to state 5
    print                          shift and go to state 6
    input                          shift and go to state 7
    condition                      shift and go to state 8
    while_loop                     shift and go to state 9
    for_loop                       shift and go to state 10
    array                          shift and go to state 11
    range_incl                     shift and go to state 12
    range_excl                     shift and go to state 13
    hash                           shift and go to state 14
    function                       shift and go to state 15
    class_def                      shift and go to state 16
    return_stmt                    shift and go to state 17
    break_stmt                     shift and go to state 18
    function_call_empty            shift and go to state 19
    function_call_args             shift and go to state 20
    methods                        shift and go to state 21
    term                           shift and go to state 24
    factor                         shift and go to state 27
    logic_expression               shift and go to state 30

state 132

    (88) while_loop -> WHILE logic_expression body . END

    END             shift and go to state 159


state 133

    (84) for_loop -> FOR ID IN . range_incl body END
    (89) range_incl -> . LPAREN INTEGER RANGE_INCL INTEGER RPAREN
    (90) range_incl -> . INTEGER RANGE_INCL INTEGER

    LPAREN          shift and go to state 161
    INTEGER         shift and go to state 162

    range_incl                     shift and go to state 160

state 134

    (90) range_incl -> INTEGER RANGE_INCL INTEGER .

    ID              reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    VAR_INST        reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    PUTS            reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    IF              reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    WHILE           reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    FOR             reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    LPAREN          reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    INTEGER         reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    DEF             reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    CLASS           reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    RETURN          reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    BREAK           reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    FLOAT           reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    STRING          reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    BOOLEAN         reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    TRUE            reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    FALSE           reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    NIL             reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    $end            reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    EQUALS          reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    NEQUALS         reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    GREATEREQ       reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    LESSEQ          reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    GREATERT        reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    LESST           reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    AND             reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    OR              reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    AND_OP          reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    OR_OP           reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    TIMES           reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    DIVIDE          reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    EXPONENT        reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    MODULE          reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    PLUS            reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    MINUS           reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    END             reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    ELSE            reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    RPAREN          reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    COMMA           reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    RCORCH          reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    RBRACE          reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)


state 135

    (92) range_excl -> INTEGER RANGE_EXCL INTEGER .

    ID              reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    VAR_INST        reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    PUTS            reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    IF              reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    WHILE           reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    FOR             reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    LPAREN          reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    INTEGER         reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    DEF             reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    CLASS           reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    RETURN          reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    BREAK           reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    FLOAT           reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    STRING          reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    BOOLEAN         reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    TRUE            reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    FALSE           reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    NIL             reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    $end            reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    EQUALS          reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    NEQUALS         reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    GREATEREQ       reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    LESSEQ          reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    GREATERT        reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    LESST           reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    AND             reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    OR              reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    AND_OP          reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    OR_OP           reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    TIMES           reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    DIVIDE          reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    EXPONENT        reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    MODULE          reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    PLUS            reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    MINUS           reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    END             reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    ELSE            reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    RPAREN          reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    COMMA           reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    RCORCH          reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    RBRACE          reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)


state 136

    (4) function -> DEF ID body . END

    END             shift and go to state 163


state 137

    (5) function -> DEF ID LPAREN . args_opt RPAREN body END
    (89) range_incl -> LPAREN . INTEGER RANGE_INCL INTEGER RPAREN
    (91) range_excl -> LPAREN . INTEGER RANGE_EXCL INTEGER RPAREN
    (72) factor -> LPAREN . expression RPAREN
    (17) args_opt -> . args
    (18) args_opt -> . empty
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . term
    (80) expression -> . ID DOT ID LPAREN args_opt RPAREN
    (15) args -> . arg
    (16) args -> . arg COMMA args
    (108) empty -> .
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term EXPONENT factor
    (61) term -> . term MODULE factor
    (62) term -> . factor
    (6) arg -> . ID
    (7) arg -> . ID ASSIGN expression
    (8) arg -> . STRING
    (9) arg -> . INTEGER
    (10) arg -> . FLOAT
    (11) arg -> . BOOLEAN
    (12) arg -> . TRUE
    (13) arg -> . FALSE
    (14) arg -> . NIL
    (63) factor -> . INTEGER
    (64) factor -> . FLOAT
    (65) factor -> . STRING
    (66) factor -> . BOOLEAN
    (67) factor -> . ID
    (68) factor -> . VAR_INST
    (69) factor -> . TRUE
    (70) factor -> . FALSE
    (71) factor -> . NIL
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . logic_expression
    (74) factor -> . range_incl
    (75) factor -> . range_excl
    (76) factor -> . function_call_args
    (77) factor -> . function_call_empty
    (95) logic_expression -> . factor logic_op factor
    (96) logic_expression -> . factor logic_connector factor
    (97) logic_expression -> . expression logic_op expression
    (89) range_incl -> . LPAREN INTEGER RANGE_INCL INTEGER RPAREN
    (90) range_incl -> . INTEGER RANGE_INCL INTEGER
    (91) range_excl -> . LPAREN INTEGER RANGE_EXCL INTEGER RPAREN
    (92) range_excl -> . INTEGER RANGE_EXCL INTEGER
    (79) function_call_args -> . ID LPAREN args RPAREN
    (78) function_call_empty -> . ID LPAREN RPAREN

    INTEGER         shift and go to state 166
    ID              shift and go to state 164
    RPAREN          reduce using rule 108 (empty -> .)
    STRING          shift and go to state 169
    FLOAT           shift and go to state 170
    BOOLEAN         shift and go to state 171
    TRUE            shift and go to state 172
    FALSE           shift and go to state 173
    NIL             shift and go to state 174
    VAR_INST        shift and go to state 69
    LPAREN          shift and go to state 65

    args_opt                       shift and go to state 165
    expression                     shift and go to state 67
    args                           shift and go to state 167
    empty                          shift and go to state 168
    term                           shift and go to state 24
    arg                            shift and go to state 110
    factor                         shift and go to state 27
    logic_expression               shift and go to state 30
    range_incl                     shift and go to state 70
    range_excl                     shift and go to state 71
    function_call_args             shift and go to state 72
    function_call_empty            shift and go to state 73

state 138

    (23) class_def -> CLASS ID body . END

    END             shift and go to state 175


state 139

    (52) input -> ID ASSIGN GETS method_chain .
    (54) method_chain -> method_chain . DOT ID

    ID              reduce using rule 52 (input -> ID ASSIGN GETS method_chain .)
    VAR_INST        reduce using rule 52 (input -> ID ASSIGN GETS method_chain .)
    PUTS            reduce using rule 52 (input -> ID ASSIGN GETS method_chain .)
    IF              reduce using rule 52 (input -> ID ASSIGN GETS method_chain .)
    WHILE           reduce using rule 52 (input -> ID ASSIGN GETS method_chain .)
    FOR             reduce using rule 52 (input -> ID ASSIGN GETS method_chain .)
    LPAREN          reduce using rule 52 (input -> ID ASSIGN GETS method_chain .)
    INTEGER         reduce using rule 52 (input -> ID ASSIGN GETS method_chain .)
    DEF             reduce using rule 52 (input -> ID ASSIGN GETS method_chain .)
    CLASS           reduce using rule 52 (input -> ID ASSIGN GETS method_chain .)
    RETURN          reduce using rule 52 (input -> ID ASSIGN GETS method_chain .)
    BREAK           reduce using rule 52 (input -> ID ASSIGN GETS method_chain .)
    FLOAT           reduce using rule 52 (input -> ID ASSIGN GETS method_chain .)
    STRING          reduce using rule 52 (input -> ID ASSIGN GETS method_chain .)
    BOOLEAN         reduce using rule 52 (input -> ID ASSIGN GETS method_chain .)
    TRUE            reduce using rule 52 (input -> ID ASSIGN GETS method_chain .)
    FALSE           reduce using rule 52 (input -> ID ASSIGN GETS method_chain .)
    NIL             reduce using rule 52 (input -> ID ASSIGN GETS method_chain .)
    $end            reduce using rule 52 (input -> ID ASSIGN GETS method_chain .)
    END             reduce using rule 52 (input -> ID ASSIGN GETS method_chain .)
    ELSE            reduce using rule 52 (input -> ID ASSIGN GETS method_chain .)
    DOT             shift and go to state 176


state 140

    (53) method_chain -> DOT . ID

    ID              shift and go to state 177


state 141

    (81) array -> ID ASSIGN LCORCH elements . RCORCH

    RCORCH          shift and go to state 178


state 142

    (82) elements -> factor .
    (83) elements -> factor . COMMA elements
    (95) logic_expression -> factor . logic_op factor
    (96) logic_expression -> factor . logic_connector factor
    (62) term -> factor .
    (98) logic_op -> . EQUALS
    (99) logic_op -> . NEQUALS
    (100) logic_op -> . GREATEREQ
    (101) logic_op -> . LESSEQ
    (102) logic_op -> . GREATERT
    (103) logic_op -> . LESST
    (104) logic_connector -> . AND
    (105) logic_connector -> . OR
    (106) logic_connector -> . AND_OP
    (107) logic_connector -> . OR_OP

  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NEQUALS resolved as shift
  ! shift/reduce conflict for GREATEREQ resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for GREATERT resolved as shift
  ! shift/reduce conflict for LESST resolved as shift
    RCORCH          reduce using rule 82 (elements -> factor .)
    COMMA           shift and go to state 179
    TIMES           reduce using rule 62 (term -> factor .)
    DIVIDE          reduce using rule 62 (term -> factor .)
    EXPONENT        reduce using rule 62 (term -> factor .)
    MODULE          reduce using rule 62 (term -> factor .)
    PLUS            reduce using rule 62 (term -> factor .)
    MINUS           reduce using rule 62 (term -> factor .)
    EQUALS          shift and go to state 47
    NEQUALS         shift and go to state 48
    GREATEREQ       shift and go to state 49
    LESSEQ          shift and go to state 50
    GREATERT        shift and go to state 51
    LESST           shift and go to state 52
    AND             shift and go to state 81
    OR              shift and go to state 82
    AND_OP          shift and go to state 83
    OR_OP           shift and go to state 84

  ! EQUALS          [ reduce using rule 62 (term -> factor .) ]
  ! NEQUALS         [ reduce using rule 62 (term -> factor .) ]
  ! GREATEREQ       [ reduce using rule 62 (term -> factor .) ]
  ! LESSEQ          [ reduce using rule 62 (term -> factor .) ]
  ! GREATERT        [ reduce using rule 62 (term -> factor .) ]
  ! LESST           [ reduce using rule 62 (term -> factor .) ]

    logic_op                       shift and go to state 79
    logic_connector                shift and go to state 80

state 143

    (85) hash -> ID ASSIGN LBRACE hash_pairs . RBRACE

    RBRACE          shift and go to state 180


state 144

    (86) hash_pairs -> STRING . COLON factor
    (87) hash_pairs -> STRING . COLON factor COMMA hash_pairs

    COLON           shift and go to state 181


state 145

    (47) assignment -> ID PLUS ASSIGN expression .
    (55) expression -> expression . PLUS term
    (56) expression -> expression . MINUS term
    (97) logic_expression -> expression . logic_op expression
    (98) logic_op -> . EQUALS
    (99) logic_op -> . NEQUALS
    (100) logic_op -> . GREATEREQ
    (101) logic_op -> . LESSEQ
    (102) logic_op -> . GREATERT
    (103) logic_op -> . LESST

    ID              reduce using rule 47 (assignment -> ID PLUS ASSIGN expression .)
    VAR_INST        reduce using rule 47 (assignment -> ID PLUS ASSIGN expression .)
    PUTS            reduce using rule 47 (assignment -> ID PLUS ASSIGN expression .)
    IF              reduce using rule 47 (assignment -> ID PLUS ASSIGN expression .)
    WHILE           reduce using rule 47 (assignment -> ID PLUS ASSIGN expression .)
    FOR             reduce using rule 47 (assignment -> ID PLUS ASSIGN expression .)
    LPAREN          reduce using rule 47 (assignment -> ID PLUS ASSIGN expression .)
    INTEGER         reduce using rule 47 (assignment -> ID PLUS ASSIGN expression .)
    DEF             reduce using rule 47 (assignment -> ID PLUS ASSIGN expression .)
    CLASS           reduce using rule 47 (assignment -> ID PLUS ASSIGN expression .)
    RETURN          reduce using rule 47 (assignment -> ID PLUS ASSIGN expression .)
    BREAK           reduce using rule 47 (assignment -> ID PLUS ASSIGN expression .)
    FLOAT           reduce using rule 47 (assignment -> ID PLUS ASSIGN expression .)
    STRING          reduce using rule 47 (assignment -> ID PLUS ASSIGN expression .)
    BOOLEAN         reduce using rule 47 (assignment -> ID PLUS ASSIGN expression .)
    TRUE            reduce using rule 47 (assignment -> ID PLUS ASSIGN expression .)
    FALSE           reduce using rule 47 (assignment -> ID PLUS ASSIGN expression .)
    NIL             reduce using rule 47 (assignment -> ID PLUS ASSIGN expression .)
    $end            reduce using rule 47 (assignment -> ID PLUS ASSIGN expression .)
    END             reduce using rule 47 (assignment -> ID PLUS ASSIGN expression .)
    ELSE            reduce using rule 47 (assignment -> ID PLUS ASSIGN expression .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    EQUALS          shift and go to state 47
    NEQUALS         shift and go to state 48
    GREATEREQ       shift and go to state 49
    LESSEQ          shift and go to state 50
    GREATERT        shift and go to state 51
    LESST           shift and go to state 52

    logic_op                       shift and go to state 46

state 146

    (48) assignment -> ID MINUS ASSIGN expression .
    (55) expression -> expression . PLUS term
    (56) expression -> expression . MINUS term
    (97) logic_expression -> expression . logic_op expression
    (98) logic_op -> . EQUALS
    (99) logic_op -> . NEQUALS
    (100) logic_op -> . GREATEREQ
    (101) logic_op -> . LESSEQ
    (102) logic_op -> . GREATERT
    (103) logic_op -> . LESST

    ID              reduce using rule 48 (assignment -> ID MINUS ASSIGN expression .)
    VAR_INST        reduce using rule 48 (assignment -> ID MINUS ASSIGN expression .)
    PUTS            reduce using rule 48 (assignment -> ID MINUS ASSIGN expression .)
    IF              reduce using rule 48 (assignment -> ID MINUS ASSIGN expression .)
    WHILE           reduce using rule 48 (assignment -> ID MINUS ASSIGN expression .)
    FOR             reduce using rule 48 (assignment -> ID MINUS ASSIGN expression .)
    LPAREN          reduce using rule 48 (assignment -> ID MINUS ASSIGN expression .)
    INTEGER         reduce using rule 48 (assignment -> ID MINUS ASSIGN expression .)
    DEF             reduce using rule 48 (assignment -> ID MINUS ASSIGN expression .)
    CLASS           reduce using rule 48 (assignment -> ID MINUS ASSIGN expression .)
    RETURN          reduce using rule 48 (assignment -> ID MINUS ASSIGN expression .)
    BREAK           reduce using rule 48 (assignment -> ID MINUS ASSIGN expression .)
    FLOAT           reduce using rule 48 (assignment -> ID MINUS ASSIGN expression .)
    STRING          reduce using rule 48 (assignment -> ID MINUS ASSIGN expression .)
    BOOLEAN         reduce using rule 48 (assignment -> ID MINUS ASSIGN expression .)
    TRUE            reduce using rule 48 (assignment -> ID MINUS ASSIGN expression .)
    FALSE           reduce using rule 48 (assignment -> ID MINUS ASSIGN expression .)
    NIL             reduce using rule 48 (assignment -> ID MINUS ASSIGN expression .)
    $end            reduce using rule 48 (assignment -> ID MINUS ASSIGN expression .)
    END             reduce using rule 48 (assignment -> ID MINUS ASSIGN expression .)
    ELSE            reduce using rule 48 (assignment -> ID MINUS ASSIGN expression .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    EQUALS          shift and go to state 47
    NEQUALS         shift and go to state 48
    GREATEREQ       shift and go to state 49
    LESSEQ          shift and go to state 50
    GREATERT        shift and go to state 51
    LESST           shift and go to state 52

    logic_op                       shift and go to state 46

state 147

    (49) assignment -> ID TIMES ASSIGN expression .
    (55) expression -> expression . PLUS term
    (56) expression -> expression . MINUS term
    (97) logic_expression -> expression . logic_op expression
    (98) logic_op -> . EQUALS
    (99) logic_op -> . NEQUALS
    (100) logic_op -> . GREATEREQ
    (101) logic_op -> . LESSEQ
    (102) logic_op -> . GREATERT
    (103) logic_op -> . LESST

    ID              reduce using rule 49 (assignment -> ID TIMES ASSIGN expression .)
    VAR_INST        reduce using rule 49 (assignment -> ID TIMES ASSIGN expression .)
    PUTS            reduce using rule 49 (assignment -> ID TIMES ASSIGN expression .)
    IF              reduce using rule 49 (assignment -> ID TIMES ASSIGN expression .)
    WHILE           reduce using rule 49 (assignment -> ID TIMES ASSIGN expression .)
    FOR             reduce using rule 49 (assignment -> ID TIMES ASSIGN expression .)
    LPAREN          reduce using rule 49 (assignment -> ID TIMES ASSIGN expression .)
    INTEGER         reduce using rule 49 (assignment -> ID TIMES ASSIGN expression .)
    DEF             reduce using rule 49 (assignment -> ID TIMES ASSIGN expression .)
    CLASS           reduce using rule 49 (assignment -> ID TIMES ASSIGN expression .)
    RETURN          reduce using rule 49 (assignment -> ID TIMES ASSIGN expression .)
    BREAK           reduce using rule 49 (assignment -> ID TIMES ASSIGN expression .)
    FLOAT           reduce using rule 49 (assignment -> ID TIMES ASSIGN expression .)
    STRING          reduce using rule 49 (assignment -> ID TIMES ASSIGN expression .)
    BOOLEAN         reduce using rule 49 (assignment -> ID TIMES ASSIGN expression .)
    TRUE            reduce using rule 49 (assignment -> ID TIMES ASSIGN expression .)
    FALSE           reduce using rule 49 (assignment -> ID TIMES ASSIGN expression .)
    NIL             reduce using rule 49 (assignment -> ID TIMES ASSIGN expression .)
    $end            reduce using rule 49 (assignment -> ID TIMES ASSIGN expression .)
    END             reduce using rule 49 (assignment -> ID TIMES ASSIGN expression .)
    ELSE            reduce using rule 49 (assignment -> ID TIMES ASSIGN expression .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    EQUALS          shift and go to state 47
    NEQUALS         shift and go to state 48
    GREATEREQ       shift and go to state 49
    LESSEQ          shift and go to state 50
    GREATERT        shift and go to state 51
    LESST           shift and go to state 52

    logic_op                       shift and go to state 46

state 148

    (50) assignment -> ID DIVIDE ASSIGN expression .
    (55) expression -> expression . PLUS term
    (56) expression -> expression . MINUS term
    (97) logic_expression -> expression . logic_op expression
    (98) logic_op -> . EQUALS
    (99) logic_op -> . NEQUALS
    (100) logic_op -> . GREATEREQ
    (101) logic_op -> . LESSEQ
    (102) logic_op -> . GREATERT
    (103) logic_op -> . LESST

    ID              reduce using rule 50 (assignment -> ID DIVIDE ASSIGN expression .)
    VAR_INST        reduce using rule 50 (assignment -> ID DIVIDE ASSIGN expression .)
    PUTS            reduce using rule 50 (assignment -> ID DIVIDE ASSIGN expression .)
    IF              reduce using rule 50 (assignment -> ID DIVIDE ASSIGN expression .)
    WHILE           reduce using rule 50 (assignment -> ID DIVIDE ASSIGN expression .)
    FOR             reduce using rule 50 (assignment -> ID DIVIDE ASSIGN expression .)
    LPAREN          reduce using rule 50 (assignment -> ID DIVIDE ASSIGN expression .)
    INTEGER         reduce using rule 50 (assignment -> ID DIVIDE ASSIGN expression .)
    DEF             reduce using rule 50 (assignment -> ID DIVIDE ASSIGN expression .)
    CLASS           reduce using rule 50 (assignment -> ID DIVIDE ASSIGN expression .)
    RETURN          reduce using rule 50 (assignment -> ID DIVIDE ASSIGN expression .)
    BREAK           reduce using rule 50 (assignment -> ID DIVIDE ASSIGN expression .)
    FLOAT           reduce using rule 50 (assignment -> ID DIVIDE ASSIGN expression .)
    STRING          reduce using rule 50 (assignment -> ID DIVIDE ASSIGN expression .)
    BOOLEAN         reduce using rule 50 (assignment -> ID DIVIDE ASSIGN expression .)
    TRUE            reduce using rule 50 (assignment -> ID DIVIDE ASSIGN expression .)
    FALSE           reduce using rule 50 (assignment -> ID DIVIDE ASSIGN expression .)
    NIL             reduce using rule 50 (assignment -> ID DIVIDE ASSIGN expression .)
    $end            reduce using rule 50 (assignment -> ID DIVIDE ASSIGN expression .)
    END             reduce using rule 50 (assignment -> ID DIVIDE ASSIGN expression .)
    ELSE            reduce using rule 50 (assignment -> ID DIVIDE ASSIGN expression .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    EQUALS          shift and go to state 47
    NEQUALS         shift and go to state 48
    GREATEREQ       shift and go to state 49
    LESSEQ          shift and go to state 50
    GREATERT        shift and go to state 51
    LESST           shift and go to state 52

    logic_op                       shift and go to state 46

state 149

    (80) expression -> ID DOT ID LPAREN . args_opt RPAREN
    (17) args_opt -> . args
    (18) args_opt -> . empty
    (15) args -> . arg
    (16) args -> . arg COMMA args
    (108) empty -> .
    (6) arg -> . ID
    (7) arg -> . ID ASSIGN expression
    (8) arg -> . STRING
    (9) arg -> . INTEGER
    (10) arg -> . FLOAT
    (11) arg -> . BOOLEAN
    (12) arg -> . TRUE
    (13) arg -> . FALSE
    (14) arg -> . NIL

    RPAREN          reduce using rule 108 (empty -> .)
    ID              shift and go to state 107
    STRING          shift and go to state 111
    INTEGER         shift and go to state 112
    FLOAT           shift and go to state 113
    BOOLEAN         shift and go to state 114
    TRUE            shift and go to state 115
    FALSE           shift and go to state 116
    NIL             shift and go to state 117

    args_opt                       shift and go to state 182
    args                           shift and go to state 167
    empty                          shift and go to state 168
    arg                            shift and go to state 110

state 150

    (7) arg -> ID ASSIGN . expression
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . term
    (80) expression -> . ID DOT ID LPAREN args_opt RPAREN
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term EXPONENT factor
    (61) term -> . term MODULE factor
    (62) term -> . factor
    (63) factor -> . INTEGER
    (64) factor -> . FLOAT
    (65) factor -> . STRING
    (66) factor -> . BOOLEAN
    (67) factor -> . ID
    (68) factor -> . VAR_INST
    (69) factor -> . TRUE
    (70) factor -> . FALSE
    (71) factor -> . NIL
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . logic_expression
    (74) factor -> . range_incl
    (75) factor -> . range_excl
    (76) factor -> . function_call_args
    (77) factor -> . function_call_empty
    (95) logic_expression -> . factor logic_op factor
    (96) logic_expression -> . factor logic_connector factor
    (97) logic_expression -> . expression logic_op expression
    (89) range_incl -> . LPAREN INTEGER RANGE_INCL INTEGER RPAREN
    (90) range_incl -> . INTEGER RANGE_INCL INTEGER
    (91) range_excl -> . LPAREN INTEGER RANGE_EXCL INTEGER RPAREN
    (92) range_excl -> . INTEGER RANGE_EXCL INTEGER
    (79) function_call_args -> . ID LPAREN args RPAREN
    (78) function_call_empty -> . ID LPAREN RPAREN

    ID              shift and go to state 68
    INTEGER         shift and go to state 76
    FLOAT           shift and go to state 38
    STRING          shift and go to state 28
    BOOLEAN         shift and go to state 39
    VAR_INST        shift and go to state 69
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    NIL             shift and go to state 42
    LPAREN          shift and go to state 65

    expression                     shift and go to state 183
    term                           shift and go to state 24
    factor                         shift and go to state 27
    logic_expression               shift and go to state 30
    range_incl                     shift and go to state 70
    range_excl                     shift and go to state 71
    function_call_args             shift and go to state 72
    function_call_empty            shift and go to state 73

state 151

    (79) function_call_args -> ID LPAREN args RPAREN .

    ID              reduce using rule 79 (function_call_args -> ID LPAREN args RPAREN .)
    VAR_INST        reduce using rule 79 (function_call_args -> ID LPAREN args RPAREN .)
    PUTS            reduce using rule 79 (function_call_args -> ID LPAREN args RPAREN .)
    IF              reduce using rule 79 (function_call_args -> ID LPAREN args RPAREN .)
    WHILE           reduce using rule 79 (function_call_args -> ID LPAREN args RPAREN .)
    FOR             reduce using rule 79 (function_call_args -> ID LPAREN args RPAREN .)
    LPAREN          reduce using rule 79 (function_call_args -> ID LPAREN args RPAREN .)
    INTEGER         reduce using rule 79 (function_call_args -> ID LPAREN args RPAREN .)
    DEF             reduce using rule 79 (function_call_args -> ID LPAREN args RPAREN .)
    CLASS           reduce using rule 79 (function_call_args -> ID LPAREN args RPAREN .)
    RETURN          reduce using rule 79 (function_call_args -> ID LPAREN args RPAREN .)
    BREAK           reduce using rule 79 (function_call_args -> ID LPAREN args RPAREN .)
    FLOAT           reduce using rule 79 (function_call_args -> ID LPAREN args RPAREN .)
    STRING          reduce using rule 79 (function_call_args -> ID LPAREN args RPAREN .)
    BOOLEAN         reduce using rule 79 (function_call_args -> ID LPAREN args RPAREN .)
    TRUE            reduce using rule 79 (function_call_args -> ID LPAREN args RPAREN .)
    FALSE           reduce using rule 79 (function_call_args -> ID LPAREN args RPAREN .)
    NIL             reduce using rule 79 (function_call_args -> ID LPAREN args RPAREN .)
    $end            reduce using rule 79 (function_call_args -> ID LPAREN args RPAREN .)
    EQUALS          reduce using rule 79 (function_call_args -> ID LPAREN args RPAREN .)
    NEQUALS         reduce using rule 79 (function_call_args -> ID LPAREN args RPAREN .)
    GREATEREQ       reduce using rule 79 (function_call_args -> ID LPAREN args RPAREN .)
    LESSEQ          reduce using rule 79 (function_call_args -> ID LPAREN args RPAREN .)
    GREATERT        reduce using rule 79 (function_call_args -> ID LPAREN args RPAREN .)
    LESST           reduce using rule 79 (function_call_args -> ID LPAREN args RPAREN .)
    AND             reduce using rule 79 (function_call_args -> ID LPAREN args RPAREN .)
    OR              reduce using rule 79 (function_call_args -> ID LPAREN args RPAREN .)
    AND_OP          reduce using rule 79 (function_call_args -> ID LPAREN args RPAREN .)
    OR_OP           reduce using rule 79 (function_call_args -> ID LPAREN args RPAREN .)
    TIMES           reduce using rule 79 (function_call_args -> ID LPAREN args RPAREN .)
    DIVIDE          reduce using rule 79 (function_call_args -> ID LPAREN args RPAREN .)
    EXPONENT        reduce using rule 79 (function_call_args -> ID LPAREN args RPAREN .)
    MODULE          reduce using rule 79 (function_call_args -> ID LPAREN args RPAREN .)
    PLUS            reduce using rule 79 (function_call_args -> ID LPAREN args RPAREN .)
    MINUS           reduce using rule 79 (function_call_args -> ID LPAREN args RPAREN .)
    RPAREN          reduce using rule 79 (function_call_args -> ID LPAREN args RPAREN .)
    END             reduce using rule 79 (function_call_args -> ID LPAREN args RPAREN .)
    ELSE            reduce using rule 79 (function_call_args -> ID LPAREN args RPAREN .)
    COMMA           reduce using rule 79 (function_call_args -> ID LPAREN args RPAREN .)
    RCORCH          reduce using rule 79 (function_call_args -> ID LPAREN args RPAREN .)
    RBRACE          reduce using rule 79 (function_call_args -> ID LPAREN args RPAREN .)


state 152

    (16) args -> arg COMMA . args
    (15) args -> . arg
    (16) args -> . arg COMMA args
    (6) arg -> . ID
    (7) arg -> . ID ASSIGN expression
    (8) arg -> . STRING
    (9) arg -> . INTEGER
    (10) arg -> . FLOAT
    (11) arg -> . BOOLEAN
    (12) arg -> . TRUE
    (13) arg -> . FALSE
    (14) arg -> . NIL

    ID              shift and go to state 107
    STRING          shift and go to state 111
    INTEGER         shift and go to state 112
    FLOAT           shift and go to state 113
    BOOLEAN         shift and go to state 114
    TRUE            shift and go to state 115
    FALSE           shift and go to state 116
    NIL             shift and go to state 117

    arg                            shift and go to state 110
    args                           shift and go to state 184

state 153

    (89) range_incl -> LPAREN INTEGER RANGE_INCL INTEGER . RPAREN
    (90) range_incl -> INTEGER RANGE_INCL INTEGER .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 185
    EQUALS          reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    NEQUALS         reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    GREATEREQ       reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    LESSEQ          reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    GREATERT        reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    LESST           reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    AND             reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    OR              reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    AND_OP          reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    OR_OP           reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    TIMES           reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    DIVIDE          reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    EXPONENT        reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    MODULE          reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    PLUS            reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)
    MINUS           reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .)

  ! RPAREN          [ reduce using rule 90 (range_incl -> INTEGER RANGE_INCL INTEGER .) ]


state 154

    (91) range_excl -> LPAREN INTEGER RANGE_EXCL INTEGER . RPAREN
    (92) range_excl -> INTEGER RANGE_EXCL INTEGER .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 186
    EQUALS          reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    NEQUALS         reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    GREATEREQ       reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    LESSEQ          reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    GREATERT        reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    LESST           reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    AND             reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    OR              reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    AND_OP          reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    OR_OP           reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    TIMES           reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    DIVIDE          reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    EXPONENT        reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    MODULE          reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    PLUS            reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)
    MINUS           reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .)

  ! RPAREN          [ reduce using rule 92 (range_excl -> INTEGER RANGE_EXCL INTEGER .) ]


state 155

    (80) expression -> ID DOT ID . LPAREN args_opt RPAREN

    LPAREN          shift and go to state 149


state 156

    (93) condition -> IF logic_expression body END .

    ID              reduce using rule 93 (condition -> IF logic_expression body END .)
    VAR_INST        reduce using rule 93 (condition -> IF logic_expression body END .)
    PUTS            reduce using rule 93 (condition -> IF logic_expression body END .)
    IF              reduce using rule 93 (condition -> IF logic_expression body END .)
    WHILE           reduce using rule 93 (condition -> IF logic_expression body END .)
    FOR             reduce using rule 93 (condition -> IF logic_expression body END .)
    LPAREN          reduce using rule 93 (condition -> IF logic_expression body END .)
    INTEGER         reduce using rule 93 (condition -> IF logic_expression body END .)
    DEF             reduce using rule 93 (condition -> IF logic_expression body END .)
    CLASS           reduce using rule 93 (condition -> IF logic_expression body END .)
    RETURN          reduce using rule 93 (condition -> IF logic_expression body END .)
    BREAK           reduce using rule 93 (condition -> IF logic_expression body END .)
    FLOAT           reduce using rule 93 (condition -> IF logic_expression body END .)
    STRING          reduce using rule 93 (condition -> IF logic_expression body END .)
    BOOLEAN         reduce using rule 93 (condition -> IF logic_expression body END .)
    TRUE            reduce using rule 93 (condition -> IF logic_expression body END .)
    FALSE           reduce using rule 93 (condition -> IF logic_expression body END .)
    NIL             reduce using rule 93 (condition -> IF logic_expression body END .)
    $end            reduce using rule 93 (condition -> IF logic_expression body END .)
    END             reduce using rule 93 (condition -> IF logic_expression body END .)
    ELSE            reduce using rule 93 (condition -> IF logic_expression body END .)


state 157

    (94) condition -> IF logic_expression body ELSE . body END
    (19) body -> . sentence
    (20) body -> . sentence body
    (24) sentence -> . assignment
    (25) sentence -> . expression
    (26) sentence -> . print
    (27) sentence -> . input
    (28) sentence -> . condition
    (29) sentence -> . while_loop
    (30) sentence -> . for_loop
    (31) sentence -> . array
    (32) sentence -> . range_incl
    (33) sentence -> . range_excl
    (34) sentence -> . hash
    (35) sentence -> . function
    (36) sentence -> . class_def
    (37) sentence -> . return_stmt
    (38) sentence -> . break_stmt
    (39) sentence -> . function_call_empty
    (40) sentence -> . function_call_args
    (41) sentence -> . methods
    (45) assignment -> . ID ASSIGN expression
    (46) assignment -> . VAR_INST ASSIGN expression
    (47) assignment -> . ID PLUS ASSIGN expression
    (48) assignment -> . ID MINUS ASSIGN expression
    (49) assignment -> . ID TIMES ASSIGN expression
    (50) assignment -> . ID DIVIDE ASSIGN expression
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . term
    (80) expression -> . ID DOT ID LPAREN args_opt RPAREN
    (21) print -> . PUTS factor
    (22) print -> . PUTS STRING
    (51) input -> . PUTS STRING
    (52) input -> . ID ASSIGN GETS method_chain
    (93) condition -> . IF logic_expression body END
    (94) condition -> . IF logic_expression body ELSE body END
    (88) while_loop -> . WHILE logic_expression body END
    (84) for_loop -> . FOR ID IN range_incl body END
    (81) array -> . ID ASSIGN LCORCH elements RCORCH
    (89) range_incl -> . LPAREN INTEGER RANGE_INCL INTEGER RPAREN
    (90) range_incl -> . INTEGER RANGE_INCL INTEGER
    (91) range_excl -> . LPAREN INTEGER RANGE_EXCL INTEGER RPAREN
    (92) range_excl -> . INTEGER RANGE_EXCL INTEGER
    (85) hash -> . ID ASSIGN LBRACE hash_pairs RBRACE
    (4) function -> . DEF ID body END
    (5) function -> . DEF ID LPAREN args_opt RPAREN body END
    (23) class_def -> . CLASS ID body END
    (43) return_stmt -> . RETURN factor
    (44) break_stmt -> . BREAK
    (78) function_call_empty -> . ID LPAREN RPAREN
    (79) function_call_args -> . ID LPAREN args RPAREN
    (42) methods -> . ID DOT ID
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term EXPONENT factor
    (61) term -> . term MODULE factor
    (62) term -> . factor
    (63) factor -> . INTEGER
    (64) factor -> . FLOAT
    (65) factor -> . STRING
    (66) factor -> . BOOLEAN
    (67) factor -> . ID
    (68) factor -> . VAR_INST
    (69) factor -> . TRUE
    (70) factor -> . FALSE
    (71) factor -> . NIL
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . logic_expression
    (74) factor -> . range_incl
    (75) factor -> . range_excl
    (76) factor -> . function_call_args
    (77) factor -> . function_call_empty
    (95) logic_expression -> . factor logic_op factor
    (96) logic_expression -> . factor logic_connector factor
    (97) logic_expression -> . expression logic_op expression

    ID              shift and go to state 22
    VAR_INST        shift and go to state 23
    PUTS            shift and go to state 26
    IF              shift and go to state 29
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    LPAREN          shift and go to state 25
    INTEGER         shift and go to state 33
    DEF             shift and go to state 34
    CLASS           shift and go to state 35
    RETURN          shift and go to state 36
    BREAK           shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 28
    BOOLEAN         shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    NIL             shift and go to state 42

    logic_expression               shift and go to state 30
    body                           shift and go to state 187
    sentence                       shift and go to state 131
    assignment                     shift and go to state 4
    expression                     shift and go to state 5
    print                          shift and go to state 6
    input                          shift and go to state 7
    condition                      shift and go to state 8
    while_loop                     shift and go to state 9
    for_loop                       shift and go to state 10
    array                          shift and go to state 11
    range_incl                     shift and go to state 12
    range_excl                     shift and go to state 13
    hash                           shift and go to state 14
    function                       shift and go to state 15
    class_def                      shift and go to state 16
    return_stmt                    shift and go to state 17
    break_stmt                     shift and go to state 18
    function_call_empty            shift and go to state 19
    function_call_args             shift and go to state 20
    methods                        shift and go to state 21
    term                           shift and go to state 24
    factor                         shift and go to state 27

state 158

    (20) body -> sentence body .

    END             reduce using rule 20 (body -> sentence body .)
    ELSE            reduce using rule 20 (body -> sentence body .)


state 159

    (88) while_loop -> WHILE logic_expression body END .

    ID              reduce using rule 88 (while_loop -> WHILE logic_expression body END .)
    VAR_INST        reduce using rule 88 (while_loop -> WHILE logic_expression body END .)
    PUTS            reduce using rule 88 (while_loop -> WHILE logic_expression body END .)
    IF              reduce using rule 88 (while_loop -> WHILE logic_expression body END .)
    WHILE           reduce using rule 88 (while_loop -> WHILE logic_expression body END .)
    FOR             reduce using rule 88 (while_loop -> WHILE logic_expression body END .)
    LPAREN          reduce using rule 88 (while_loop -> WHILE logic_expression body END .)
    INTEGER         reduce using rule 88 (while_loop -> WHILE logic_expression body END .)
    DEF             reduce using rule 88 (while_loop -> WHILE logic_expression body END .)
    CLASS           reduce using rule 88 (while_loop -> WHILE logic_expression body END .)
    RETURN          reduce using rule 88 (while_loop -> WHILE logic_expression body END .)
    BREAK           reduce using rule 88 (while_loop -> WHILE logic_expression body END .)
    FLOAT           reduce using rule 88 (while_loop -> WHILE logic_expression body END .)
    STRING          reduce using rule 88 (while_loop -> WHILE logic_expression body END .)
    BOOLEAN         reduce using rule 88 (while_loop -> WHILE logic_expression body END .)
    TRUE            reduce using rule 88 (while_loop -> WHILE logic_expression body END .)
    FALSE           reduce using rule 88 (while_loop -> WHILE logic_expression body END .)
    NIL             reduce using rule 88 (while_loop -> WHILE logic_expression body END .)
    $end            reduce using rule 88 (while_loop -> WHILE logic_expression body END .)
    END             reduce using rule 88 (while_loop -> WHILE logic_expression body END .)
    ELSE            reduce using rule 88 (while_loop -> WHILE logic_expression body END .)


state 160

    (84) for_loop -> FOR ID IN range_incl . body END
    (19) body -> . sentence
    (20) body -> . sentence body
    (24) sentence -> . assignment
    (25) sentence -> . expression
    (26) sentence -> . print
    (27) sentence -> . input
    (28) sentence -> . condition
    (29) sentence -> . while_loop
    (30) sentence -> . for_loop
    (31) sentence -> . array
    (32) sentence -> . range_incl
    (33) sentence -> . range_excl
    (34) sentence -> . hash
    (35) sentence -> . function
    (36) sentence -> . class_def
    (37) sentence -> . return_stmt
    (38) sentence -> . break_stmt
    (39) sentence -> . function_call_empty
    (40) sentence -> . function_call_args
    (41) sentence -> . methods
    (45) assignment -> . ID ASSIGN expression
    (46) assignment -> . VAR_INST ASSIGN expression
    (47) assignment -> . ID PLUS ASSIGN expression
    (48) assignment -> . ID MINUS ASSIGN expression
    (49) assignment -> . ID TIMES ASSIGN expression
    (50) assignment -> . ID DIVIDE ASSIGN expression
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . term
    (80) expression -> . ID DOT ID LPAREN args_opt RPAREN
    (21) print -> . PUTS factor
    (22) print -> . PUTS STRING
    (51) input -> . PUTS STRING
    (52) input -> . ID ASSIGN GETS method_chain
    (93) condition -> . IF logic_expression body END
    (94) condition -> . IF logic_expression body ELSE body END
    (88) while_loop -> . WHILE logic_expression body END
    (84) for_loop -> . FOR ID IN range_incl body END
    (81) array -> . ID ASSIGN LCORCH elements RCORCH
    (89) range_incl -> . LPAREN INTEGER RANGE_INCL INTEGER RPAREN
    (90) range_incl -> . INTEGER RANGE_INCL INTEGER
    (91) range_excl -> . LPAREN INTEGER RANGE_EXCL INTEGER RPAREN
    (92) range_excl -> . INTEGER RANGE_EXCL INTEGER
    (85) hash -> . ID ASSIGN LBRACE hash_pairs RBRACE
    (4) function -> . DEF ID body END
    (5) function -> . DEF ID LPAREN args_opt RPAREN body END
    (23) class_def -> . CLASS ID body END
    (43) return_stmt -> . RETURN factor
    (44) break_stmt -> . BREAK
    (78) function_call_empty -> . ID LPAREN RPAREN
    (79) function_call_args -> . ID LPAREN args RPAREN
    (42) methods -> . ID DOT ID
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term EXPONENT factor
    (61) term -> . term MODULE factor
    (62) term -> . factor
    (63) factor -> . INTEGER
    (64) factor -> . FLOAT
    (65) factor -> . STRING
    (66) factor -> . BOOLEAN
    (67) factor -> . ID
    (68) factor -> . VAR_INST
    (69) factor -> . TRUE
    (70) factor -> . FALSE
    (71) factor -> . NIL
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . logic_expression
    (74) factor -> . range_incl
    (75) factor -> . range_excl
    (76) factor -> . function_call_args
    (77) factor -> . function_call_empty
    (95) logic_expression -> . factor logic_op factor
    (96) logic_expression -> . factor logic_connector factor
    (97) logic_expression -> . expression logic_op expression

    ID              shift and go to state 22
    VAR_INST        shift and go to state 23
    PUTS            shift and go to state 26
    IF              shift and go to state 29
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    LPAREN          shift and go to state 25
    INTEGER         shift and go to state 33
    DEF             shift and go to state 34
    CLASS           shift and go to state 35
    RETURN          shift and go to state 36
    BREAK           shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 28
    BOOLEAN         shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    NIL             shift and go to state 42

    range_incl                     shift and go to state 12
    body                           shift and go to state 188
    sentence                       shift and go to state 131
    assignment                     shift and go to state 4
    expression                     shift and go to state 5
    print                          shift and go to state 6
    input                          shift and go to state 7
    condition                      shift and go to state 8
    while_loop                     shift and go to state 9
    for_loop                       shift and go to state 10
    array                          shift and go to state 11
    range_excl                     shift and go to state 13
    hash                           shift and go to state 14
    function                       shift and go to state 15
    class_def                      shift and go to state 16
    return_stmt                    shift and go to state 17
    break_stmt                     shift and go to state 18
    function_call_empty            shift and go to state 19
    function_call_args             shift and go to state 20
    methods                        shift and go to state 21
    term                           shift and go to state 24
    factor                         shift and go to state 27
    logic_expression               shift and go to state 30

state 161

    (89) range_incl -> LPAREN . INTEGER RANGE_INCL INTEGER RPAREN

    INTEGER         shift and go to state 189


state 162

    (90) range_incl -> INTEGER . RANGE_INCL INTEGER

    RANGE_INCL      shift and go to state 90


state 163

    (4) function -> DEF ID body END .

    ID              reduce using rule 4 (function -> DEF ID body END .)
    VAR_INST        reduce using rule 4 (function -> DEF ID body END .)
    PUTS            reduce using rule 4 (function -> DEF ID body END .)
    IF              reduce using rule 4 (function -> DEF ID body END .)
    WHILE           reduce using rule 4 (function -> DEF ID body END .)
    FOR             reduce using rule 4 (function -> DEF ID body END .)
    LPAREN          reduce using rule 4 (function -> DEF ID body END .)
    INTEGER         reduce using rule 4 (function -> DEF ID body END .)
    DEF             reduce using rule 4 (function -> DEF ID body END .)
    CLASS           reduce using rule 4 (function -> DEF ID body END .)
    RETURN          reduce using rule 4 (function -> DEF ID body END .)
    BREAK           reduce using rule 4 (function -> DEF ID body END .)
    FLOAT           reduce using rule 4 (function -> DEF ID body END .)
    STRING          reduce using rule 4 (function -> DEF ID body END .)
    BOOLEAN         reduce using rule 4 (function -> DEF ID body END .)
    TRUE            reduce using rule 4 (function -> DEF ID body END .)
    FALSE           reduce using rule 4 (function -> DEF ID body END .)
    NIL             reduce using rule 4 (function -> DEF ID body END .)
    $end            reduce using rule 4 (function -> DEF ID body END .)
    END             reduce using rule 4 (function -> DEF ID body END .)
    ELSE            reduce using rule 4 (function -> DEF ID body END .)


state 164

    (80) expression -> ID . DOT ID LPAREN args_opt RPAREN
    (6) arg -> ID .
    (7) arg -> ID . ASSIGN expression
    (67) factor -> ID .
    (79) function_call_args -> ID . LPAREN args RPAREN
    (78) function_call_empty -> ID . LPAREN RPAREN

  ! reduce/reduce conflict for RPAREN resolved using rule 6 (arg -> ID .)
    DOT             shift and go to state 126
    COMMA           reduce using rule 6 (arg -> ID .)
    RPAREN          reduce using rule 6 (arg -> ID .)
    ASSIGN          shift and go to state 150
    EQUALS          reduce using rule 67 (factor -> ID .)
    NEQUALS         reduce using rule 67 (factor -> ID .)
    GREATEREQ       reduce using rule 67 (factor -> ID .)
    LESSEQ          reduce using rule 67 (factor -> ID .)
    GREATERT        reduce using rule 67 (factor -> ID .)
    LESST           reduce using rule 67 (factor -> ID .)
    AND             reduce using rule 67 (factor -> ID .)
    OR              reduce using rule 67 (factor -> ID .)
    AND_OP          reduce using rule 67 (factor -> ID .)
    OR_OP           reduce using rule 67 (factor -> ID .)
    TIMES           reduce using rule 67 (factor -> ID .)
    DIVIDE          reduce using rule 67 (factor -> ID .)
    EXPONENT        reduce using rule 67 (factor -> ID .)
    MODULE          reduce using rule 67 (factor -> ID .)
    PLUS            reduce using rule 67 (factor -> ID .)
    MINUS           reduce using rule 67 (factor -> ID .)
    LPAREN          shift and go to state 127

  ! RPAREN          [ reduce using rule 67 (factor -> ID .) ]


state 165

    (5) function -> DEF ID LPAREN args_opt . RPAREN body END

    RPAREN          shift and go to state 190


state 166

    (89) range_incl -> LPAREN INTEGER . RANGE_INCL INTEGER RPAREN
    (91) range_excl -> LPAREN INTEGER . RANGE_EXCL INTEGER RPAREN
    (9) arg -> INTEGER .
    (63) factor -> INTEGER .
    (90) range_incl -> INTEGER . RANGE_INCL INTEGER
    (92) range_excl -> INTEGER . RANGE_EXCL INTEGER

  ! reduce/reduce conflict for RPAREN resolved using rule 9 (arg -> INTEGER .)
    RANGE_INCL      shift and go to state 123
    RANGE_EXCL      shift and go to state 124
    COMMA           reduce using rule 9 (arg -> INTEGER .)
    RPAREN          reduce using rule 9 (arg -> INTEGER .)
    EQUALS          reduce using rule 63 (factor -> INTEGER .)
    NEQUALS         reduce using rule 63 (factor -> INTEGER .)
    GREATEREQ       reduce using rule 63 (factor -> INTEGER .)
    LESSEQ          reduce using rule 63 (factor -> INTEGER .)
    GREATERT        reduce using rule 63 (factor -> INTEGER .)
    LESST           reduce using rule 63 (factor -> INTEGER .)
    AND             reduce using rule 63 (factor -> INTEGER .)
    OR              reduce using rule 63 (factor -> INTEGER .)
    AND_OP          reduce using rule 63 (factor -> INTEGER .)
    OR_OP           reduce using rule 63 (factor -> INTEGER .)
    TIMES           reduce using rule 63 (factor -> INTEGER .)
    DIVIDE          reduce using rule 63 (factor -> INTEGER .)
    EXPONENT        reduce using rule 63 (factor -> INTEGER .)
    MODULE          reduce using rule 63 (factor -> INTEGER .)
    PLUS            reduce using rule 63 (factor -> INTEGER .)
    MINUS           reduce using rule 63 (factor -> INTEGER .)

  ! RPAREN          [ reduce using rule 63 (factor -> INTEGER .) ]


state 167

    (17) args_opt -> args .

    RPAREN          reduce using rule 17 (args_opt -> args .)


state 168

    (18) args_opt -> empty .

    RPAREN          reduce using rule 18 (args_opt -> empty .)


state 169

    (8) arg -> STRING .
    (65) factor -> STRING .

  ! reduce/reduce conflict for RPAREN resolved using rule 8 (arg -> STRING .)
    COMMA           reduce using rule 8 (arg -> STRING .)
    RPAREN          reduce using rule 8 (arg -> STRING .)
    EQUALS          reduce using rule 65 (factor -> STRING .)
    NEQUALS         reduce using rule 65 (factor -> STRING .)
    GREATEREQ       reduce using rule 65 (factor -> STRING .)
    LESSEQ          reduce using rule 65 (factor -> STRING .)
    GREATERT        reduce using rule 65 (factor -> STRING .)
    LESST           reduce using rule 65 (factor -> STRING .)
    AND             reduce using rule 65 (factor -> STRING .)
    OR              reduce using rule 65 (factor -> STRING .)
    AND_OP          reduce using rule 65 (factor -> STRING .)
    OR_OP           reduce using rule 65 (factor -> STRING .)
    TIMES           reduce using rule 65 (factor -> STRING .)
    DIVIDE          reduce using rule 65 (factor -> STRING .)
    EXPONENT        reduce using rule 65 (factor -> STRING .)
    MODULE          reduce using rule 65 (factor -> STRING .)
    PLUS            reduce using rule 65 (factor -> STRING .)
    MINUS           reduce using rule 65 (factor -> STRING .)

  ! RPAREN          [ reduce using rule 65 (factor -> STRING .) ]


state 170

    (10) arg -> FLOAT .
    (64) factor -> FLOAT .

  ! reduce/reduce conflict for RPAREN resolved using rule 10 (arg -> FLOAT .)
    COMMA           reduce using rule 10 (arg -> FLOAT .)
    RPAREN          reduce using rule 10 (arg -> FLOAT .)
    EQUALS          reduce using rule 64 (factor -> FLOAT .)
    NEQUALS         reduce using rule 64 (factor -> FLOAT .)
    GREATEREQ       reduce using rule 64 (factor -> FLOAT .)
    LESSEQ          reduce using rule 64 (factor -> FLOAT .)
    GREATERT        reduce using rule 64 (factor -> FLOAT .)
    LESST           reduce using rule 64 (factor -> FLOAT .)
    AND             reduce using rule 64 (factor -> FLOAT .)
    OR              reduce using rule 64 (factor -> FLOAT .)
    AND_OP          reduce using rule 64 (factor -> FLOAT .)
    OR_OP           reduce using rule 64 (factor -> FLOAT .)
    TIMES           reduce using rule 64 (factor -> FLOAT .)
    DIVIDE          reduce using rule 64 (factor -> FLOAT .)
    EXPONENT        reduce using rule 64 (factor -> FLOAT .)
    MODULE          reduce using rule 64 (factor -> FLOAT .)
    PLUS            reduce using rule 64 (factor -> FLOAT .)
    MINUS           reduce using rule 64 (factor -> FLOAT .)

  ! RPAREN          [ reduce using rule 64 (factor -> FLOAT .) ]


state 171

    (11) arg -> BOOLEAN .
    (66) factor -> BOOLEAN .

  ! reduce/reduce conflict for RPAREN resolved using rule 11 (arg -> BOOLEAN .)
    COMMA           reduce using rule 11 (arg -> BOOLEAN .)
    RPAREN          reduce using rule 11 (arg -> BOOLEAN .)
    EQUALS          reduce using rule 66 (factor -> BOOLEAN .)
    NEQUALS         reduce using rule 66 (factor -> BOOLEAN .)
    GREATEREQ       reduce using rule 66 (factor -> BOOLEAN .)
    LESSEQ          reduce using rule 66 (factor -> BOOLEAN .)
    GREATERT        reduce using rule 66 (factor -> BOOLEAN .)
    LESST           reduce using rule 66 (factor -> BOOLEAN .)
    AND             reduce using rule 66 (factor -> BOOLEAN .)
    OR              reduce using rule 66 (factor -> BOOLEAN .)
    AND_OP          reduce using rule 66 (factor -> BOOLEAN .)
    OR_OP           reduce using rule 66 (factor -> BOOLEAN .)
    TIMES           reduce using rule 66 (factor -> BOOLEAN .)
    DIVIDE          reduce using rule 66 (factor -> BOOLEAN .)
    EXPONENT        reduce using rule 66 (factor -> BOOLEAN .)
    MODULE          reduce using rule 66 (factor -> BOOLEAN .)
    PLUS            reduce using rule 66 (factor -> BOOLEAN .)
    MINUS           reduce using rule 66 (factor -> BOOLEAN .)

  ! RPAREN          [ reduce using rule 66 (factor -> BOOLEAN .) ]


state 172

    (12) arg -> TRUE .
    (69) factor -> TRUE .

  ! reduce/reduce conflict for RPAREN resolved using rule 12 (arg -> TRUE .)
    COMMA           reduce using rule 12 (arg -> TRUE .)
    RPAREN          reduce using rule 12 (arg -> TRUE .)
    EQUALS          reduce using rule 69 (factor -> TRUE .)
    NEQUALS         reduce using rule 69 (factor -> TRUE .)
    GREATEREQ       reduce using rule 69 (factor -> TRUE .)
    LESSEQ          reduce using rule 69 (factor -> TRUE .)
    GREATERT        reduce using rule 69 (factor -> TRUE .)
    LESST           reduce using rule 69 (factor -> TRUE .)
    AND             reduce using rule 69 (factor -> TRUE .)
    OR              reduce using rule 69 (factor -> TRUE .)
    AND_OP          reduce using rule 69 (factor -> TRUE .)
    OR_OP           reduce using rule 69 (factor -> TRUE .)
    TIMES           reduce using rule 69 (factor -> TRUE .)
    DIVIDE          reduce using rule 69 (factor -> TRUE .)
    EXPONENT        reduce using rule 69 (factor -> TRUE .)
    MODULE          reduce using rule 69 (factor -> TRUE .)
    PLUS            reduce using rule 69 (factor -> TRUE .)
    MINUS           reduce using rule 69 (factor -> TRUE .)

  ! RPAREN          [ reduce using rule 69 (factor -> TRUE .) ]


state 173

    (13) arg -> FALSE .
    (70) factor -> FALSE .

  ! reduce/reduce conflict for RPAREN resolved using rule 13 (arg -> FALSE .)
    COMMA           reduce using rule 13 (arg -> FALSE .)
    RPAREN          reduce using rule 13 (arg -> FALSE .)
    EQUALS          reduce using rule 70 (factor -> FALSE .)
    NEQUALS         reduce using rule 70 (factor -> FALSE .)
    GREATEREQ       reduce using rule 70 (factor -> FALSE .)
    LESSEQ          reduce using rule 70 (factor -> FALSE .)
    GREATERT        reduce using rule 70 (factor -> FALSE .)
    LESST           reduce using rule 70 (factor -> FALSE .)
    AND             reduce using rule 70 (factor -> FALSE .)
    OR              reduce using rule 70 (factor -> FALSE .)
    AND_OP          reduce using rule 70 (factor -> FALSE .)
    OR_OP           reduce using rule 70 (factor -> FALSE .)
    TIMES           reduce using rule 70 (factor -> FALSE .)
    DIVIDE          reduce using rule 70 (factor -> FALSE .)
    EXPONENT        reduce using rule 70 (factor -> FALSE .)
    MODULE          reduce using rule 70 (factor -> FALSE .)
    PLUS            reduce using rule 70 (factor -> FALSE .)
    MINUS           reduce using rule 70 (factor -> FALSE .)

  ! RPAREN          [ reduce using rule 70 (factor -> FALSE .) ]


state 174

    (14) arg -> NIL .
    (71) factor -> NIL .

  ! reduce/reduce conflict for RPAREN resolved using rule 14 (arg -> NIL .)
    COMMA           reduce using rule 14 (arg -> NIL .)
    RPAREN          reduce using rule 14 (arg -> NIL .)
    EQUALS          reduce using rule 71 (factor -> NIL .)
    NEQUALS         reduce using rule 71 (factor -> NIL .)
    GREATEREQ       reduce using rule 71 (factor -> NIL .)
    LESSEQ          reduce using rule 71 (factor -> NIL .)
    GREATERT        reduce using rule 71 (factor -> NIL .)
    LESST           reduce using rule 71 (factor -> NIL .)
    AND             reduce using rule 71 (factor -> NIL .)
    OR              reduce using rule 71 (factor -> NIL .)
    AND_OP          reduce using rule 71 (factor -> NIL .)
    OR_OP           reduce using rule 71 (factor -> NIL .)
    TIMES           reduce using rule 71 (factor -> NIL .)
    DIVIDE          reduce using rule 71 (factor -> NIL .)
    EXPONENT        reduce using rule 71 (factor -> NIL .)
    MODULE          reduce using rule 71 (factor -> NIL .)
    PLUS            reduce using rule 71 (factor -> NIL .)
    MINUS           reduce using rule 71 (factor -> NIL .)

  ! RPAREN          [ reduce using rule 71 (factor -> NIL .) ]


state 175

    (23) class_def -> CLASS ID body END .

    ID              reduce using rule 23 (class_def -> CLASS ID body END .)
    VAR_INST        reduce using rule 23 (class_def -> CLASS ID body END .)
    PUTS            reduce using rule 23 (class_def -> CLASS ID body END .)
    IF              reduce using rule 23 (class_def -> CLASS ID body END .)
    WHILE           reduce using rule 23 (class_def -> CLASS ID body END .)
    FOR             reduce using rule 23 (class_def -> CLASS ID body END .)
    LPAREN          reduce using rule 23 (class_def -> CLASS ID body END .)
    INTEGER         reduce using rule 23 (class_def -> CLASS ID body END .)
    DEF             reduce using rule 23 (class_def -> CLASS ID body END .)
    CLASS           reduce using rule 23 (class_def -> CLASS ID body END .)
    RETURN          reduce using rule 23 (class_def -> CLASS ID body END .)
    BREAK           reduce using rule 23 (class_def -> CLASS ID body END .)
    FLOAT           reduce using rule 23 (class_def -> CLASS ID body END .)
    STRING          reduce using rule 23 (class_def -> CLASS ID body END .)
    BOOLEAN         reduce using rule 23 (class_def -> CLASS ID body END .)
    TRUE            reduce using rule 23 (class_def -> CLASS ID body END .)
    FALSE           reduce using rule 23 (class_def -> CLASS ID body END .)
    NIL             reduce using rule 23 (class_def -> CLASS ID body END .)
    $end            reduce using rule 23 (class_def -> CLASS ID body END .)
    END             reduce using rule 23 (class_def -> CLASS ID body END .)
    ELSE            reduce using rule 23 (class_def -> CLASS ID body END .)


state 176

    (54) method_chain -> method_chain DOT . ID

    ID              shift and go to state 191


state 177

    (53) method_chain -> DOT ID .

    DOT             reduce using rule 53 (method_chain -> DOT ID .)
    ID              reduce using rule 53 (method_chain -> DOT ID .)
    VAR_INST        reduce using rule 53 (method_chain -> DOT ID .)
    PUTS            reduce using rule 53 (method_chain -> DOT ID .)
    IF              reduce using rule 53 (method_chain -> DOT ID .)
    WHILE           reduce using rule 53 (method_chain -> DOT ID .)
    FOR             reduce using rule 53 (method_chain -> DOT ID .)
    LPAREN          reduce using rule 53 (method_chain -> DOT ID .)
    INTEGER         reduce using rule 53 (method_chain -> DOT ID .)
    DEF             reduce using rule 53 (method_chain -> DOT ID .)
    CLASS           reduce using rule 53 (method_chain -> DOT ID .)
    RETURN          reduce using rule 53 (method_chain -> DOT ID .)
    BREAK           reduce using rule 53 (method_chain -> DOT ID .)
    FLOAT           reduce using rule 53 (method_chain -> DOT ID .)
    STRING          reduce using rule 53 (method_chain -> DOT ID .)
    BOOLEAN         reduce using rule 53 (method_chain -> DOT ID .)
    TRUE            reduce using rule 53 (method_chain -> DOT ID .)
    FALSE           reduce using rule 53 (method_chain -> DOT ID .)
    NIL             reduce using rule 53 (method_chain -> DOT ID .)
    $end            reduce using rule 53 (method_chain -> DOT ID .)
    END             reduce using rule 53 (method_chain -> DOT ID .)
    ELSE            reduce using rule 53 (method_chain -> DOT ID .)


state 178

    (81) array -> ID ASSIGN LCORCH elements RCORCH .

    ID              reduce using rule 81 (array -> ID ASSIGN LCORCH elements RCORCH .)
    VAR_INST        reduce using rule 81 (array -> ID ASSIGN LCORCH elements RCORCH .)
    PUTS            reduce using rule 81 (array -> ID ASSIGN LCORCH elements RCORCH .)
    IF              reduce using rule 81 (array -> ID ASSIGN LCORCH elements RCORCH .)
    WHILE           reduce using rule 81 (array -> ID ASSIGN LCORCH elements RCORCH .)
    FOR             reduce using rule 81 (array -> ID ASSIGN LCORCH elements RCORCH .)
    LPAREN          reduce using rule 81 (array -> ID ASSIGN LCORCH elements RCORCH .)
    INTEGER         reduce using rule 81 (array -> ID ASSIGN LCORCH elements RCORCH .)
    DEF             reduce using rule 81 (array -> ID ASSIGN LCORCH elements RCORCH .)
    CLASS           reduce using rule 81 (array -> ID ASSIGN LCORCH elements RCORCH .)
    RETURN          reduce using rule 81 (array -> ID ASSIGN LCORCH elements RCORCH .)
    BREAK           reduce using rule 81 (array -> ID ASSIGN LCORCH elements RCORCH .)
    FLOAT           reduce using rule 81 (array -> ID ASSIGN LCORCH elements RCORCH .)
    STRING          reduce using rule 81 (array -> ID ASSIGN LCORCH elements RCORCH .)
    BOOLEAN         reduce using rule 81 (array -> ID ASSIGN LCORCH elements RCORCH .)
    TRUE            reduce using rule 81 (array -> ID ASSIGN LCORCH elements RCORCH .)
    FALSE           reduce using rule 81 (array -> ID ASSIGN LCORCH elements RCORCH .)
    NIL             reduce using rule 81 (array -> ID ASSIGN LCORCH elements RCORCH .)
    $end            reduce using rule 81 (array -> ID ASSIGN LCORCH elements RCORCH .)
    END             reduce using rule 81 (array -> ID ASSIGN LCORCH elements RCORCH .)
    ELSE            reduce using rule 81 (array -> ID ASSIGN LCORCH elements RCORCH .)


state 179

    (83) elements -> factor COMMA . elements
    (82) elements -> . factor
    (83) elements -> . factor COMMA elements
    (63) factor -> . INTEGER
    (64) factor -> . FLOAT
    (65) factor -> . STRING
    (66) factor -> . BOOLEAN
    (67) factor -> . ID
    (68) factor -> . VAR_INST
    (69) factor -> . TRUE
    (70) factor -> . FALSE
    (71) factor -> . NIL
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . logic_expression
    (74) factor -> . range_incl
    (75) factor -> . range_excl
    (76) factor -> . function_call_args
    (77) factor -> . function_call_empty
    (95) logic_expression -> . factor logic_op factor
    (96) logic_expression -> . factor logic_connector factor
    (97) logic_expression -> . expression logic_op expression
    (89) range_incl -> . LPAREN INTEGER RANGE_INCL INTEGER RPAREN
    (90) range_incl -> . INTEGER RANGE_INCL INTEGER
    (91) range_excl -> . LPAREN INTEGER RANGE_EXCL INTEGER RPAREN
    (92) range_excl -> . INTEGER RANGE_EXCL INTEGER
    (79) function_call_args -> . ID LPAREN args RPAREN
    (78) function_call_empty -> . ID LPAREN RPAREN
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . term
    (80) expression -> . ID DOT ID LPAREN args_opt RPAREN
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term EXPONENT factor
    (61) term -> . term MODULE factor
    (62) term -> . factor

    INTEGER         shift and go to state 76
    FLOAT           shift and go to state 38
    STRING          shift and go to state 28
    BOOLEAN         shift and go to state 39
    ID              shift and go to state 77
    VAR_INST        shift and go to state 69
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    NIL             shift and go to state 42
    LPAREN          shift and go to state 65

    factor                         shift and go to state 142
    elements                       shift and go to state 192
    expression                     shift and go to state 78
    logic_expression               shift and go to state 30
    range_incl                     shift and go to state 70
    range_excl                     shift and go to state 71
    function_call_args             shift and go to state 72
    function_call_empty            shift and go to state 73
    term                           shift and go to state 24

state 180

    (85) hash -> ID ASSIGN LBRACE hash_pairs RBRACE .

    ID              reduce using rule 85 (hash -> ID ASSIGN LBRACE hash_pairs RBRACE .)
    VAR_INST        reduce using rule 85 (hash -> ID ASSIGN LBRACE hash_pairs RBRACE .)
    PUTS            reduce using rule 85 (hash -> ID ASSIGN LBRACE hash_pairs RBRACE .)
    IF              reduce using rule 85 (hash -> ID ASSIGN LBRACE hash_pairs RBRACE .)
    WHILE           reduce using rule 85 (hash -> ID ASSIGN LBRACE hash_pairs RBRACE .)
    FOR             reduce using rule 85 (hash -> ID ASSIGN LBRACE hash_pairs RBRACE .)
    LPAREN          reduce using rule 85 (hash -> ID ASSIGN LBRACE hash_pairs RBRACE .)
    INTEGER         reduce using rule 85 (hash -> ID ASSIGN LBRACE hash_pairs RBRACE .)
    DEF             reduce using rule 85 (hash -> ID ASSIGN LBRACE hash_pairs RBRACE .)
    CLASS           reduce using rule 85 (hash -> ID ASSIGN LBRACE hash_pairs RBRACE .)
    RETURN          reduce using rule 85 (hash -> ID ASSIGN LBRACE hash_pairs RBRACE .)
    BREAK           reduce using rule 85 (hash -> ID ASSIGN LBRACE hash_pairs RBRACE .)
    FLOAT           reduce using rule 85 (hash -> ID ASSIGN LBRACE hash_pairs RBRACE .)
    STRING          reduce using rule 85 (hash -> ID ASSIGN LBRACE hash_pairs RBRACE .)
    BOOLEAN         reduce using rule 85 (hash -> ID ASSIGN LBRACE hash_pairs RBRACE .)
    TRUE            reduce using rule 85 (hash -> ID ASSIGN LBRACE hash_pairs RBRACE .)
    FALSE           reduce using rule 85 (hash -> ID ASSIGN LBRACE hash_pairs RBRACE .)
    NIL             reduce using rule 85 (hash -> ID ASSIGN LBRACE hash_pairs RBRACE .)
    $end            reduce using rule 85 (hash -> ID ASSIGN LBRACE hash_pairs RBRACE .)
    END             reduce using rule 85 (hash -> ID ASSIGN LBRACE hash_pairs RBRACE .)
    ELSE            reduce using rule 85 (hash -> ID ASSIGN LBRACE hash_pairs RBRACE .)


state 181

    (86) hash_pairs -> STRING COLON . factor
    (87) hash_pairs -> STRING COLON . factor COMMA hash_pairs
    (63) factor -> . INTEGER
    (64) factor -> . FLOAT
    (65) factor -> . STRING
    (66) factor -> . BOOLEAN
    (67) factor -> . ID
    (68) factor -> . VAR_INST
    (69) factor -> . TRUE
    (70) factor -> . FALSE
    (71) factor -> . NIL
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . logic_expression
    (74) factor -> . range_incl
    (75) factor -> . range_excl
    (76) factor -> . function_call_args
    (77) factor -> . function_call_empty
    (95) logic_expression -> . factor logic_op factor
    (96) logic_expression -> . factor logic_connector factor
    (97) logic_expression -> . expression logic_op expression
    (89) range_incl -> . LPAREN INTEGER RANGE_INCL INTEGER RPAREN
    (90) range_incl -> . INTEGER RANGE_INCL INTEGER
    (91) range_excl -> . LPAREN INTEGER RANGE_EXCL INTEGER RPAREN
    (92) range_excl -> . INTEGER RANGE_EXCL INTEGER
    (79) function_call_args -> . ID LPAREN args RPAREN
    (78) function_call_empty -> . ID LPAREN RPAREN
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . term
    (80) expression -> . ID DOT ID LPAREN args_opt RPAREN
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term EXPONENT factor
    (61) term -> . term MODULE factor
    (62) term -> . factor

    INTEGER         shift and go to state 76
    FLOAT           shift and go to state 38
    STRING          shift and go to state 28
    BOOLEAN         shift and go to state 39
    ID              shift and go to state 77
    VAR_INST        shift and go to state 69
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    NIL             shift and go to state 42
    LPAREN          shift and go to state 65

    factor                         shift and go to state 193
    expression                     shift and go to state 78
    logic_expression               shift and go to state 30
    range_incl                     shift and go to state 70
    range_excl                     shift and go to state 71
    function_call_args             shift and go to state 72
    function_call_empty            shift and go to state 73
    term                           shift and go to state 24

state 182

    (80) expression -> ID DOT ID LPAREN args_opt . RPAREN

    RPAREN          shift and go to state 194


state 183

    (7) arg -> ID ASSIGN expression .
    (55) expression -> expression . PLUS term
    (56) expression -> expression . MINUS term
    (97) logic_expression -> expression . logic_op expression
    (98) logic_op -> . EQUALS
    (99) logic_op -> . NEQUALS
    (100) logic_op -> . GREATEREQ
    (101) logic_op -> . LESSEQ
    (102) logic_op -> . GREATERT
    (103) logic_op -> . LESST

    COMMA           reduce using rule 7 (arg -> ID ASSIGN expression .)
    RPAREN          reduce using rule 7 (arg -> ID ASSIGN expression .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    EQUALS          shift and go to state 47
    NEQUALS         shift and go to state 48
    GREATEREQ       shift and go to state 49
    LESSEQ          shift and go to state 50
    GREATERT        shift and go to state 51
    LESST           shift and go to state 52

    logic_op                       shift and go to state 46

state 184

    (16) args -> arg COMMA args .

    RPAREN          reduce using rule 16 (args -> arg COMMA args .)


state 185

    (89) range_incl -> LPAREN INTEGER RANGE_INCL INTEGER RPAREN .

    ID              reduce using rule 89 (range_incl -> LPAREN INTEGER RANGE_INCL INTEGER RPAREN .)
    VAR_INST        reduce using rule 89 (range_incl -> LPAREN INTEGER RANGE_INCL INTEGER RPAREN .)
    PUTS            reduce using rule 89 (range_incl -> LPAREN INTEGER RANGE_INCL INTEGER RPAREN .)
    IF              reduce using rule 89 (range_incl -> LPAREN INTEGER RANGE_INCL INTEGER RPAREN .)
    WHILE           reduce using rule 89 (range_incl -> LPAREN INTEGER RANGE_INCL INTEGER RPAREN .)
    FOR             reduce using rule 89 (range_incl -> LPAREN INTEGER RANGE_INCL INTEGER RPAREN .)
    LPAREN          reduce using rule 89 (range_incl -> LPAREN INTEGER RANGE_INCL INTEGER RPAREN .)
    INTEGER         reduce using rule 89 (range_incl -> LPAREN INTEGER RANGE_INCL INTEGER RPAREN .)
    DEF             reduce using rule 89 (range_incl -> LPAREN INTEGER RANGE_INCL INTEGER RPAREN .)
    CLASS           reduce using rule 89 (range_incl -> LPAREN INTEGER RANGE_INCL INTEGER RPAREN .)
    RETURN          reduce using rule 89 (range_incl -> LPAREN INTEGER RANGE_INCL INTEGER RPAREN .)
    BREAK           reduce using rule 89 (range_incl -> LPAREN INTEGER RANGE_INCL INTEGER RPAREN .)
    FLOAT           reduce using rule 89 (range_incl -> LPAREN INTEGER RANGE_INCL INTEGER RPAREN .)
    STRING          reduce using rule 89 (range_incl -> LPAREN INTEGER RANGE_INCL INTEGER RPAREN .)
    BOOLEAN         reduce using rule 89 (range_incl -> LPAREN INTEGER RANGE_INCL INTEGER RPAREN .)
    TRUE            reduce using rule 89 (range_incl -> LPAREN INTEGER RANGE_INCL INTEGER RPAREN .)
    FALSE           reduce using rule 89 (range_incl -> LPAREN INTEGER RANGE_INCL INTEGER RPAREN .)
    NIL             reduce using rule 89 (range_incl -> LPAREN INTEGER RANGE_INCL INTEGER RPAREN .)
    $end            reduce using rule 89 (range_incl -> LPAREN INTEGER RANGE_INCL INTEGER RPAREN .)
    EQUALS          reduce using rule 89 (range_incl -> LPAREN INTEGER RANGE_INCL INTEGER RPAREN .)
    NEQUALS         reduce using rule 89 (range_incl -> LPAREN INTEGER RANGE_INCL INTEGER RPAREN .)
    GREATEREQ       reduce using rule 89 (range_incl -> LPAREN INTEGER RANGE_INCL INTEGER RPAREN .)
    LESSEQ          reduce using rule 89 (range_incl -> LPAREN INTEGER RANGE_INCL INTEGER RPAREN .)
    GREATERT        reduce using rule 89 (range_incl -> LPAREN INTEGER RANGE_INCL INTEGER RPAREN .)
    LESST           reduce using rule 89 (range_incl -> LPAREN INTEGER RANGE_INCL INTEGER RPAREN .)
    AND             reduce using rule 89 (range_incl -> LPAREN INTEGER RANGE_INCL INTEGER RPAREN .)
    OR              reduce using rule 89 (range_incl -> LPAREN INTEGER RANGE_INCL INTEGER RPAREN .)
    AND_OP          reduce using rule 89 (range_incl -> LPAREN INTEGER RANGE_INCL INTEGER RPAREN .)
    OR_OP           reduce using rule 89 (range_incl -> LPAREN INTEGER RANGE_INCL INTEGER RPAREN .)
    TIMES           reduce using rule 89 (range_incl -> LPAREN INTEGER RANGE_INCL INTEGER RPAREN .)
    DIVIDE          reduce using rule 89 (range_incl -> LPAREN INTEGER RANGE_INCL INTEGER RPAREN .)
    EXPONENT        reduce using rule 89 (range_incl -> LPAREN INTEGER RANGE_INCL INTEGER RPAREN .)
    MODULE          reduce using rule 89 (range_incl -> LPAREN INTEGER RANGE_INCL INTEGER RPAREN .)
    PLUS            reduce using rule 89 (range_incl -> LPAREN INTEGER RANGE_INCL INTEGER RPAREN .)
    MINUS           reduce using rule 89 (range_incl -> LPAREN INTEGER RANGE_INCL INTEGER RPAREN .)
    RPAREN          reduce using rule 89 (range_incl -> LPAREN INTEGER RANGE_INCL INTEGER RPAREN .)
    END             reduce using rule 89 (range_incl -> LPAREN INTEGER RANGE_INCL INTEGER RPAREN .)
    ELSE            reduce using rule 89 (range_incl -> LPAREN INTEGER RANGE_INCL INTEGER RPAREN .)
    COMMA           reduce using rule 89 (range_incl -> LPAREN INTEGER RANGE_INCL INTEGER RPAREN .)
    RCORCH          reduce using rule 89 (range_incl -> LPAREN INTEGER RANGE_INCL INTEGER RPAREN .)
    RBRACE          reduce using rule 89 (range_incl -> LPAREN INTEGER RANGE_INCL INTEGER RPAREN .)


state 186

    (91) range_excl -> LPAREN INTEGER RANGE_EXCL INTEGER RPAREN .

    ID              reduce using rule 91 (range_excl -> LPAREN INTEGER RANGE_EXCL INTEGER RPAREN .)
    VAR_INST        reduce using rule 91 (range_excl -> LPAREN INTEGER RANGE_EXCL INTEGER RPAREN .)
    PUTS            reduce using rule 91 (range_excl -> LPAREN INTEGER RANGE_EXCL INTEGER RPAREN .)
    IF              reduce using rule 91 (range_excl -> LPAREN INTEGER RANGE_EXCL INTEGER RPAREN .)
    WHILE           reduce using rule 91 (range_excl -> LPAREN INTEGER RANGE_EXCL INTEGER RPAREN .)
    FOR             reduce using rule 91 (range_excl -> LPAREN INTEGER RANGE_EXCL INTEGER RPAREN .)
    LPAREN          reduce using rule 91 (range_excl -> LPAREN INTEGER RANGE_EXCL INTEGER RPAREN .)
    INTEGER         reduce using rule 91 (range_excl -> LPAREN INTEGER RANGE_EXCL INTEGER RPAREN .)
    DEF             reduce using rule 91 (range_excl -> LPAREN INTEGER RANGE_EXCL INTEGER RPAREN .)
    CLASS           reduce using rule 91 (range_excl -> LPAREN INTEGER RANGE_EXCL INTEGER RPAREN .)
    RETURN          reduce using rule 91 (range_excl -> LPAREN INTEGER RANGE_EXCL INTEGER RPAREN .)
    BREAK           reduce using rule 91 (range_excl -> LPAREN INTEGER RANGE_EXCL INTEGER RPAREN .)
    FLOAT           reduce using rule 91 (range_excl -> LPAREN INTEGER RANGE_EXCL INTEGER RPAREN .)
    STRING          reduce using rule 91 (range_excl -> LPAREN INTEGER RANGE_EXCL INTEGER RPAREN .)
    BOOLEAN         reduce using rule 91 (range_excl -> LPAREN INTEGER RANGE_EXCL INTEGER RPAREN .)
    TRUE            reduce using rule 91 (range_excl -> LPAREN INTEGER RANGE_EXCL INTEGER RPAREN .)
    FALSE           reduce using rule 91 (range_excl -> LPAREN INTEGER RANGE_EXCL INTEGER RPAREN .)
    NIL             reduce using rule 91 (range_excl -> LPAREN INTEGER RANGE_EXCL INTEGER RPAREN .)
    $end            reduce using rule 91 (range_excl -> LPAREN INTEGER RANGE_EXCL INTEGER RPAREN .)
    EQUALS          reduce using rule 91 (range_excl -> LPAREN INTEGER RANGE_EXCL INTEGER RPAREN .)
    NEQUALS         reduce using rule 91 (range_excl -> LPAREN INTEGER RANGE_EXCL INTEGER RPAREN .)
    GREATEREQ       reduce using rule 91 (range_excl -> LPAREN INTEGER RANGE_EXCL INTEGER RPAREN .)
    LESSEQ          reduce using rule 91 (range_excl -> LPAREN INTEGER RANGE_EXCL INTEGER RPAREN .)
    GREATERT        reduce using rule 91 (range_excl -> LPAREN INTEGER RANGE_EXCL INTEGER RPAREN .)
    LESST           reduce using rule 91 (range_excl -> LPAREN INTEGER RANGE_EXCL INTEGER RPAREN .)
    AND             reduce using rule 91 (range_excl -> LPAREN INTEGER RANGE_EXCL INTEGER RPAREN .)
    OR              reduce using rule 91 (range_excl -> LPAREN INTEGER RANGE_EXCL INTEGER RPAREN .)
    AND_OP          reduce using rule 91 (range_excl -> LPAREN INTEGER RANGE_EXCL INTEGER RPAREN .)
    OR_OP           reduce using rule 91 (range_excl -> LPAREN INTEGER RANGE_EXCL INTEGER RPAREN .)
    TIMES           reduce using rule 91 (range_excl -> LPAREN INTEGER RANGE_EXCL INTEGER RPAREN .)
    DIVIDE          reduce using rule 91 (range_excl -> LPAREN INTEGER RANGE_EXCL INTEGER RPAREN .)
    EXPONENT        reduce using rule 91 (range_excl -> LPAREN INTEGER RANGE_EXCL INTEGER RPAREN .)
    MODULE          reduce using rule 91 (range_excl -> LPAREN INTEGER RANGE_EXCL INTEGER RPAREN .)
    PLUS            reduce using rule 91 (range_excl -> LPAREN INTEGER RANGE_EXCL INTEGER RPAREN .)
    MINUS           reduce using rule 91 (range_excl -> LPAREN INTEGER RANGE_EXCL INTEGER RPAREN .)
    RPAREN          reduce using rule 91 (range_excl -> LPAREN INTEGER RANGE_EXCL INTEGER RPAREN .)
    END             reduce using rule 91 (range_excl -> LPAREN INTEGER RANGE_EXCL INTEGER RPAREN .)
    ELSE            reduce using rule 91 (range_excl -> LPAREN INTEGER RANGE_EXCL INTEGER RPAREN .)
    COMMA           reduce using rule 91 (range_excl -> LPAREN INTEGER RANGE_EXCL INTEGER RPAREN .)
    RCORCH          reduce using rule 91 (range_excl -> LPAREN INTEGER RANGE_EXCL INTEGER RPAREN .)
    RBRACE          reduce using rule 91 (range_excl -> LPAREN INTEGER RANGE_EXCL INTEGER RPAREN .)


state 187

    (94) condition -> IF logic_expression body ELSE body . END

    END             shift and go to state 195


state 188

    (84) for_loop -> FOR ID IN range_incl body . END

    END             shift and go to state 196


state 189

    (89) range_incl -> LPAREN INTEGER . RANGE_INCL INTEGER RPAREN

    RANGE_INCL      shift and go to state 197


state 190

    (5) function -> DEF ID LPAREN args_opt RPAREN . body END
    (19) body -> . sentence
    (20) body -> . sentence body
    (24) sentence -> . assignment
    (25) sentence -> . expression
    (26) sentence -> . print
    (27) sentence -> . input
    (28) sentence -> . condition
    (29) sentence -> . while_loop
    (30) sentence -> . for_loop
    (31) sentence -> . array
    (32) sentence -> . range_incl
    (33) sentence -> . range_excl
    (34) sentence -> . hash
    (35) sentence -> . function
    (36) sentence -> . class_def
    (37) sentence -> . return_stmt
    (38) sentence -> . break_stmt
    (39) sentence -> . function_call_empty
    (40) sentence -> . function_call_args
    (41) sentence -> . methods
    (45) assignment -> . ID ASSIGN expression
    (46) assignment -> . VAR_INST ASSIGN expression
    (47) assignment -> . ID PLUS ASSIGN expression
    (48) assignment -> . ID MINUS ASSIGN expression
    (49) assignment -> . ID TIMES ASSIGN expression
    (50) assignment -> . ID DIVIDE ASSIGN expression
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . term
    (80) expression -> . ID DOT ID LPAREN args_opt RPAREN
    (21) print -> . PUTS factor
    (22) print -> . PUTS STRING
    (51) input -> . PUTS STRING
    (52) input -> . ID ASSIGN GETS method_chain
    (93) condition -> . IF logic_expression body END
    (94) condition -> . IF logic_expression body ELSE body END
    (88) while_loop -> . WHILE logic_expression body END
    (84) for_loop -> . FOR ID IN range_incl body END
    (81) array -> . ID ASSIGN LCORCH elements RCORCH
    (89) range_incl -> . LPAREN INTEGER RANGE_INCL INTEGER RPAREN
    (90) range_incl -> . INTEGER RANGE_INCL INTEGER
    (91) range_excl -> . LPAREN INTEGER RANGE_EXCL INTEGER RPAREN
    (92) range_excl -> . INTEGER RANGE_EXCL INTEGER
    (85) hash -> . ID ASSIGN LBRACE hash_pairs RBRACE
    (4) function -> . DEF ID body END
    (5) function -> . DEF ID LPAREN args_opt RPAREN body END
    (23) class_def -> . CLASS ID body END
    (43) return_stmt -> . RETURN factor
    (44) break_stmt -> . BREAK
    (78) function_call_empty -> . ID LPAREN RPAREN
    (79) function_call_args -> . ID LPAREN args RPAREN
    (42) methods -> . ID DOT ID
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) term -> . term EXPONENT factor
    (61) term -> . term MODULE factor
    (62) term -> . factor
    (63) factor -> . INTEGER
    (64) factor -> . FLOAT
    (65) factor -> . STRING
    (66) factor -> . BOOLEAN
    (67) factor -> . ID
    (68) factor -> . VAR_INST
    (69) factor -> . TRUE
    (70) factor -> . FALSE
    (71) factor -> . NIL
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . logic_expression
    (74) factor -> . range_incl
    (75) factor -> . range_excl
    (76) factor -> . function_call_args
    (77) factor -> . function_call_empty
    (95) logic_expression -> . factor logic_op factor
    (96) logic_expression -> . factor logic_connector factor
    (97) logic_expression -> . expression logic_op expression

    ID              shift and go to state 22
    VAR_INST        shift and go to state 23
    PUTS            shift and go to state 26
    IF              shift and go to state 29
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    LPAREN          shift and go to state 25
    INTEGER         shift and go to state 33
    DEF             shift and go to state 34
    CLASS           shift and go to state 35
    RETURN          shift and go to state 36
    BREAK           shift and go to state 37
    FLOAT           shift and go to state 38
    STRING          shift and go to state 28
    BOOLEAN         shift and go to state 39
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    NIL             shift and go to state 42

    body                           shift and go to state 198
    sentence                       shift and go to state 131
    assignment                     shift and go to state 4
    expression                     shift and go to state 5
    print                          shift and go to state 6
    input                          shift and go to state 7
    condition                      shift and go to state 8
    while_loop                     shift and go to state 9
    for_loop                       shift and go to state 10
    array                          shift and go to state 11
    range_incl                     shift and go to state 12
    range_excl                     shift and go to state 13
    hash                           shift and go to state 14
    function                       shift and go to state 15
    class_def                      shift and go to state 16
    return_stmt                    shift and go to state 17
    break_stmt                     shift and go to state 18
    function_call_empty            shift and go to state 19
    function_call_args             shift and go to state 20
    methods                        shift and go to state 21
    term                           shift and go to state 24
    factor                         shift and go to state 27
    logic_expression               shift and go to state 30

state 191

    (54) method_chain -> method_chain DOT ID .

    DOT             reduce using rule 54 (method_chain -> method_chain DOT ID .)
    ID              reduce using rule 54 (method_chain -> method_chain DOT ID .)
    VAR_INST        reduce using rule 54 (method_chain -> method_chain DOT ID .)
    PUTS            reduce using rule 54 (method_chain -> method_chain DOT ID .)
    IF              reduce using rule 54 (method_chain -> method_chain DOT ID .)
    WHILE           reduce using rule 54 (method_chain -> method_chain DOT ID .)
    FOR             reduce using rule 54 (method_chain -> method_chain DOT ID .)
    LPAREN          reduce using rule 54 (method_chain -> method_chain DOT ID .)
    INTEGER         reduce using rule 54 (method_chain -> method_chain DOT ID .)
    DEF             reduce using rule 54 (method_chain -> method_chain DOT ID .)
    CLASS           reduce using rule 54 (method_chain -> method_chain DOT ID .)
    RETURN          reduce using rule 54 (method_chain -> method_chain DOT ID .)
    BREAK           reduce using rule 54 (method_chain -> method_chain DOT ID .)
    FLOAT           reduce using rule 54 (method_chain -> method_chain DOT ID .)
    STRING          reduce using rule 54 (method_chain -> method_chain DOT ID .)
    BOOLEAN         reduce using rule 54 (method_chain -> method_chain DOT ID .)
    TRUE            reduce using rule 54 (method_chain -> method_chain DOT ID .)
    FALSE           reduce using rule 54 (method_chain -> method_chain DOT ID .)
    NIL             reduce using rule 54 (method_chain -> method_chain DOT ID .)
    $end            reduce using rule 54 (method_chain -> method_chain DOT ID .)
    END             reduce using rule 54 (method_chain -> method_chain DOT ID .)
    ELSE            reduce using rule 54 (method_chain -> method_chain DOT ID .)


state 192

    (83) elements -> factor COMMA elements .

    RCORCH          reduce using rule 83 (elements -> factor COMMA elements .)


state 193

    (86) hash_pairs -> STRING COLON factor .
    (87) hash_pairs -> STRING COLON factor . COMMA hash_pairs
    (95) logic_expression -> factor . logic_op factor
    (96) logic_expression -> factor . logic_connector factor
    (62) term -> factor .
    (98) logic_op -> . EQUALS
    (99) logic_op -> . NEQUALS
    (100) logic_op -> . GREATEREQ
    (101) logic_op -> . LESSEQ
    (102) logic_op -> . GREATERT
    (103) logic_op -> . LESST
    (104) logic_connector -> . AND
    (105) logic_connector -> . OR
    (106) logic_connector -> . AND_OP
    (107) logic_connector -> . OR_OP

  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NEQUALS resolved as shift
  ! shift/reduce conflict for GREATEREQ resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for GREATERT resolved as shift
  ! shift/reduce conflict for LESST resolved as shift
    RBRACE          reduce using rule 86 (hash_pairs -> STRING COLON factor .)
    COMMA           shift and go to state 199
    TIMES           reduce using rule 62 (term -> factor .)
    DIVIDE          reduce using rule 62 (term -> factor .)
    EXPONENT        reduce using rule 62 (term -> factor .)
    MODULE          reduce using rule 62 (term -> factor .)
    PLUS            reduce using rule 62 (term -> factor .)
    MINUS           reduce using rule 62 (term -> factor .)
    EQUALS          shift and go to state 47
    NEQUALS         shift and go to state 48
    GREATEREQ       shift and go to state 49
    LESSEQ          shift and go to state 50
    GREATERT        shift and go to state 51
    LESST           shift and go to state 52
    AND             shift and go to state 81
    OR              shift and go to state 82
    AND_OP          shift and go to state 83
    OR_OP           shift and go to state 84

  ! EQUALS          [ reduce using rule 62 (term -> factor .) ]
  ! NEQUALS         [ reduce using rule 62 (term -> factor .) ]
  ! GREATEREQ       [ reduce using rule 62 (term -> factor .) ]
  ! LESSEQ          [ reduce using rule 62 (term -> factor .) ]
  ! GREATERT        [ reduce using rule 62 (term -> factor .) ]
  ! LESST           [ reduce using rule 62 (term -> factor .) ]

    logic_op                       shift and go to state 79
    logic_connector                shift and go to state 80

state 194

    (80) expression -> ID DOT ID LPAREN args_opt RPAREN .

    PLUS            reduce using rule 80 (expression -> ID DOT ID LPAREN args_opt RPAREN .)
    MINUS           reduce using rule 80 (expression -> ID DOT ID LPAREN args_opt RPAREN .)
    EQUALS          reduce using rule 80 (expression -> ID DOT ID LPAREN args_opt RPAREN .)
    NEQUALS         reduce using rule 80 (expression -> ID DOT ID LPAREN args_opt RPAREN .)
    GREATEREQ       reduce using rule 80 (expression -> ID DOT ID LPAREN args_opt RPAREN .)
    LESSEQ          reduce using rule 80 (expression -> ID DOT ID LPAREN args_opt RPAREN .)
    GREATERT        reduce using rule 80 (expression -> ID DOT ID LPAREN args_opt RPAREN .)
    LESST           reduce using rule 80 (expression -> ID DOT ID LPAREN args_opt RPAREN .)
    ID              reduce using rule 80 (expression -> ID DOT ID LPAREN args_opt RPAREN .)
    VAR_INST        reduce using rule 80 (expression -> ID DOT ID LPAREN args_opt RPAREN .)
    PUTS            reduce using rule 80 (expression -> ID DOT ID LPAREN args_opt RPAREN .)
    IF              reduce using rule 80 (expression -> ID DOT ID LPAREN args_opt RPAREN .)
    WHILE           reduce using rule 80 (expression -> ID DOT ID LPAREN args_opt RPAREN .)
    FOR             reduce using rule 80 (expression -> ID DOT ID LPAREN args_opt RPAREN .)
    LPAREN          reduce using rule 80 (expression -> ID DOT ID LPAREN args_opt RPAREN .)
    INTEGER         reduce using rule 80 (expression -> ID DOT ID LPAREN args_opt RPAREN .)
    DEF             reduce using rule 80 (expression -> ID DOT ID LPAREN args_opt RPAREN .)
    CLASS           reduce using rule 80 (expression -> ID DOT ID LPAREN args_opt RPAREN .)
    RETURN          reduce using rule 80 (expression -> ID DOT ID LPAREN args_opt RPAREN .)
    BREAK           reduce using rule 80 (expression -> ID DOT ID LPAREN args_opt RPAREN .)
    FLOAT           reduce using rule 80 (expression -> ID DOT ID LPAREN args_opt RPAREN .)
    STRING          reduce using rule 80 (expression -> ID DOT ID LPAREN args_opt RPAREN .)
    BOOLEAN         reduce using rule 80 (expression -> ID DOT ID LPAREN args_opt RPAREN .)
    TRUE            reduce using rule 80 (expression -> ID DOT ID LPAREN args_opt RPAREN .)
    FALSE           reduce using rule 80 (expression -> ID DOT ID LPAREN args_opt RPAREN .)
    NIL             reduce using rule 80 (expression -> ID DOT ID LPAREN args_opt RPAREN .)
    $end            reduce using rule 80 (expression -> ID DOT ID LPAREN args_opt RPAREN .)
    RPAREN          reduce using rule 80 (expression -> ID DOT ID LPAREN args_opt RPAREN .)
    TIMES           reduce using rule 80 (expression -> ID DOT ID LPAREN args_opt RPAREN .)
    DIVIDE          reduce using rule 80 (expression -> ID DOT ID LPAREN args_opt RPAREN .)
    EXPONENT        reduce using rule 80 (expression -> ID DOT ID LPAREN args_opt RPAREN .)
    MODULE          reduce using rule 80 (expression -> ID DOT ID LPAREN args_opt RPAREN .)
    AND             reduce using rule 80 (expression -> ID DOT ID LPAREN args_opt RPAREN .)
    OR              reduce using rule 80 (expression -> ID DOT ID LPAREN args_opt RPAREN .)
    AND_OP          reduce using rule 80 (expression -> ID DOT ID LPAREN args_opt RPAREN .)
    OR_OP           reduce using rule 80 (expression -> ID DOT ID LPAREN args_opt RPAREN .)
    END             reduce using rule 80 (expression -> ID DOT ID LPAREN args_opt RPAREN .)
    ELSE            reduce using rule 80 (expression -> ID DOT ID LPAREN args_opt RPAREN .)
    COMMA           reduce using rule 80 (expression -> ID DOT ID LPAREN args_opt RPAREN .)
    RCORCH          reduce using rule 80 (expression -> ID DOT ID LPAREN args_opt RPAREN .)
    RBRACE          reduce using rule 80 (expression -> ID DOT ID LPAREN args_opt RPAREN .)


state 195

    (94) condition -> IF logic_expression body ELSE body END .

    ID              reduce using rule 94 (condition -> IF logic_expression body ELSE body END .)
    VAR_INST        reduce using rule 94 (condition -> IF logic_expression body ELSE body END .)
    PUTS            reduce using rule 94 (condition -> IF logic_expression body ELSE body END .)
    IF              reduce using rule 94 (condition -> IF logic_expression body ELSE body END .)
    WHILE           reduce using rule 94 (condition -> IF logic_expression body ELSE body END .)
    FOR             reduce using rule 94 (condition -> IF logic_expression body ELSE body END .)
    LPAREN          reduce using rule 94 (condition -> IF logic_expression body ELSE body END .)
    INTEGER         reduce using rule 94 (condition -> IF logic_expression body ELSE body END .)
    DEF             reduce using rule 94 (condition -> IF logic_expression body ELSE body END .)
    CLASS           reduce using rule 94 (condition -> IF logic_expression body ELSE body END .)
    RETURN          reduce using rule 94 (condition -> IF logic_expression body ELSE body END .)
    BREAK           reduce using rule 94 (condition -> IF logic_expression body ELSE body END .)
    FLOAT           reduce using rule 94 (condition -> IF logic_expression body ELSE body END .)
    STRING          reduce using rule 94 (condition -> IF logic_expression body ELSE body END .)
    BOOLEAN         reduce using rule 94 (condition -> IF logic_expression body ELSE body END .)
    TRUE            reduce using rule 94 (condition -> IF logic_expression body ELSE body END .)
    FALSE           reduce using rule 94 (condition -> IF logic_expression body ELSE body END .)
    NIL             reduce using rule 94 (condition -> IF logic_expression body ELSE body END .)
    $end            reduce using rule 94 (condition -> IF logic_expression body ELSE body END .)
    END             reduce using rule 94 (condition -> IF logic_expression body ELSE body END .)
    ELSE            reduce using rule 94 (condition -> IF logic_expression body ELSE body END .)


state 196

    (84) for_loop -> FOR ID IN range_incl body END .

    ID              reduce using rule 84 (for_loop -> FOR ID IN range_incl body END .)
    VAR_INST        reduce using rule 84 (for_loop -> FOR ID IN range_incl body END .)
    PUTS            reduce using rule 84 (for_loop -> FOR ID IN range_incl body END .)
    IF              reduce using rule 84 (for_loop -> FOR ID IN range_incl body END .)
    WHILE           reduce using rule 84 (for_loop -> FOR ID IN range_incl body END .)
    FOR             reduce using rule 84 (for_loop -> FOR ID IN range_incl body END .)
    LPAREN          reduce using rule 84 (for_loop -> FOR ID IN range_incl body END .)
    INTEGER         reduce using rule 84 (for_loop -> FOR ID IN range_incl body END .)
    DEF             reduce using rule 84 (for_loop -> FOR ID IN range_incl body END .)
    CLASS           reduce using rule 84 (for_loop -> FOR ID IN range_incl body END .)
    RETURN          reduce using rule 84 (for_loop -> FOR ID IN range_incl body END .)
    BREAK           reduce using rule 84 (for_loop -> FOR ID IN range_incl body END .)
    FLOAT           reduce using rule 84 (for_loop -> FOR ID IN range_incl body END .)
    STRING          reduce using rule 84 (for_loop -> FOR ID IN range_incl body END .)
    BOOLEAN         reduce using rule 84 (for_loop -> FOR ID IN range_incl body END .)
    TRUE            reduce using rule 84 (for_loop -> FOR ID IN range_incl body END .)
    FALSE           reduce using rule 84 (for_loop -> FOR ID IN range_incl body END .)
    NIL             reduce using rule 84 (for_loop -> FOR ID IN range_incl body END .)
    $end            reduce using rule 84 (for_loop -> FOR ID IN range_incl body END .)
    END             reduce using rule 84 (for_loop -> FOR ID IN range_incl body END .)
    ELSE            reduce using rule 84 (for_loop -> FOR ID IN range_incl body END .)


state 197

    (89) range_incl -> LPAREN INTEGER RANGE_INCL . INTEGER RPAREN

    INTEGER         shift and go to state 200


state 198

    (5) function -> DEF ID LPAREN args_opt RPAREN body . END

    END             shift and go to state 201


state 199

    (87) hash_pairs -> STRING COLON factor COMMA . hash_pairs
    (86) hash_pairs -> . STRING COLON factor
    (87) hash_pairs -> . STRING COLON factor COMMA hash_pairs

    STRING          shift and go to state 144

    hash_pairs                     shift and go to state 202

state 200

    (89) range_incl -> LPAREN INTEGER RANGE_INCL INTEGER . RPAREN

    RPAREN          shift and go to state 185


state 201

    (5) function -> DEF ID LPAREN args_opt RPAREN body END .

    ID              reduce using rule 5 (function -> DEF ID LPAREN args_opt RPAREN body END .)
    VAR_INST        reduce using rule 5 (function -> DEF ID LPAREN args_opt RPAREN body END .)
    PUTS            reduce using rule 5 (function -> DEF ID LPAREN args_opt RPAREN body END .)
    IF              reduce using rule 5 (function -> DEF ID LPAREN args_opt RPAREN body END .)
    WHILE           reduce using rule 5 (function -> DEF ID LPAREN args_opt RPAREN body END .)
    FOR             reduce using rule 5 (function -> DEF ID LPAREN args_opt RPAREN body END .)
    LPAREN          reduce using rule 5 (function -> DEF ID LPAREN args_opt RPAREN body END .)
    INTEGER         reduce using rule 5 (function -> DEF ID LPAREN args_opt RPAREN body END .)
    DEF             reduce using rule 5 (function -> DEF ID LPAREN args_opt RPAREN body END .)
    CLASS           reduce using rule 5 (function -> DEF ID LPAREN args_opt RPAREN body END .)
    RETURN          reduce using rule 5 (function -> DEF ID LPAREN args_opt RPAREN body END .)
    BREAK           reduce using rule 5 (function -> DEF ID LPAREN args_opt RPAREN body END .)
    FLOAT           reduce using rule 5 (function -> DEF ID LPAREN args_opt RPAREN body END .)
    STRING          reduce using rule 5 (function -> DEF ID LPAREN args_opt RPAREN body END .)
    BOOLEAN         reduce using rule 5 (function -> DEF ID LPAREN args_opt RPAREN body END .)
    TRUE            reduce using rule 5 (function -> DEF ID LPAREN args_opt RPAREN body END .)
    FALSE           reduce using rule 5 (function -> DEF ID LPAREN args_opt RPAREN body END .)
    NIL             reduce using rule 5 (function -> DEF ID LPAREN args_opt RPAREN body END .)
    $end            reduce using rule 5 (function -> DEF ID LPAREN args_opt RPAREN body END .)
    END             reduce using rule 5 (function -> DEF ID LPAREN args_opt RPAREN body END .)
    ELSE            reduce using rule 5 (function -> DEF ID LPAREN args_opt RPAREN body END .)


state 202

    (87) hash_pairs -> STRING COLON factor COMMA hash_pairs .

    RBRACE          reduce using rule 87 (hash_pairs -> STRING COLON factor COMMA hash_pairs .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for TIMES in state 22 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 22 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 22 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 22 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 22 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 24 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 24 resolved as shift
WARNING: shift/reduce conflict for EXPONENT in state 24 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 24 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 27 resolved as shift
WARNING: shift/reduce conflict for NEQUALS in state 27 resolved as shift
WARNING: shift/reduce conflict for GREATEREQ in state 27 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 27 resolved as shift
WARNING: shift/reduce conflict for GREATERT in state 27 resolved as shift
WARNING: shift/reduce conflict for LESST in state 27 resolved as shift
WARNING: shift/reduce conflict for AND in state 27 resolved as shift
WARNING: shift/reduce conflict for OR in state 27 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 27 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 27 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 68 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 74 resolved as shift
WARNING: shift/reduce conflict for NEQUALS in state 74 resolved as shift
WARNING: shift/reduce conflict for GREATEREQ in state 74 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 74 resolved as shift
WARNING: shift/reduce conflict for GREATERT in state 74 resolved as shift
WARNING: shift/reduce conflict for LESST in state 74 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 77 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 86 resolved as shift
WARNING: shift/reduce conflict for NEQUALS in state 86 resolved as shift
WARNING: shift/reduce conflict for GREATEREQ in state 86 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 86 resolved as shift
WARNING: shift/reduce conflict for GREATERT in state 86 resolved as shift
WARNING: shift/reduce conflict for LESST in state 86 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 94 resolved as shift
WARNING: shift/reduce conflict for NEQUALS in state 94 resolved as shift
WARNING: shift/reduce conflict for GREATEREQ in state 94 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 94 resolved as shift
WARNING: shift/reduce conflict for GREATERT in state 94 resolved as shift
WARNING: shift/reduce conflict for LESST in state 94 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 95 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 95 resolved as shift
WARNING: shift/reduce conflict for EXPONENT in state 95 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 95 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 96 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 96 resolved as shift
WARNING: shift/reduce conflict for EXPONENT in state 96 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 96 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 97 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 97 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 97 resolved as shift
WARNING: shift/reduce conflict for NEQUALS in state 97 resolved as shift
WARNING: shift/reduce conflict for GREATEREQ in state 97 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 97 resolved as shift
WARNING: shift/reduce conflict for GREATERT in state 97 resolved as shift
WARNING: shift/reduce conflict for LESST in state 97 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 106 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 119 resolved as shift
WARNING: shift/reduce conflict for NEQUALS in state 119 resolved as shift
WARNING: shift/reduce conflict for GREATEREQ in state 119 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 119 resolved as shift
WARNING: shift/reduce conflict for GREATERT in state 119 resolved as shift
WARNING: shift/reduce conflict for LESST in state 119 resolved as shift
WARNING: shift/reduce conflict for AND in state 119 resolved as shift
WARNING: shift/reduce conflict for OR in state 119 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 119 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 119 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 120 resolved as shift
WARNING: shift/reduce conflict for NEQUALS in state 120 resolved as shift
WARNING: shift/reduce conflict for GREATEREQ in state 120 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 120 resolved as shift
WARNING: shift/reduce conflict for GREATERT in state 120 resolved as shift
WARNING: shift/reduce conflict for LESST in state 120 resolved as shift
WARNING: shift/reduce conflict for AND in state 120 resolved as shift
WARNING: shift/reduce conflict for OR in state 120 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 120 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 120 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 121 resolved as shift
WARNING: shift/reduce conflict for NEQUALS in state 121 resolved as shift
WARNING: shift/reduce conflict for GREATEREQ in state 121 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 121 resolved as shift
WARNING: shift/reduce conflict for GREATERT in state 121 resolved as shift
WARNING: shift/reduce conflict for LESST in state 121 resolved as shift
WARNING: shift/reduce conflict for AND in state 121 resolved as shift
WARNING: shift/reduce conflict for OR in state 121 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 121 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 121 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 122 resolved as shift
WARNING: shift/reduce conflict for NEQUALS in state 122 resolved as shift
WARNING: shift/reduce conflict for GREATEREQ in state 122 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 122 resolved as shift
WARNING: shift/reduce conflict for GREATERT in state 122 resolved as shift
WARNING: shift/reduce conflict for LESST in state 122 resolved as shift
WARNING: shift/reduce conflict for AND in state 122 resolved as shift
WARNING: shift/reduce conflict for OR in state 122 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 122 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 122 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 128 resolved as shift
WARNING: shift/reduce conflict for NEQUALS in state 128 resolved as shift
WARNING: shift/reduce conflict for GREATEREQ in state 128 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 128 resolved as shift
WARNING: shift/reduce conflict for GREATERT in state 128 resolved as shift
WARNING: shift/reduce conflict for LESST in state 128 resolved as shift
WARNING: shift/reduce conflict for AND in state 128 resolved as shift
WARNING: shift/reduce conflict for OR in state 128 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 128 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 128 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 129 resolved as shift
WARNING: shift/reduce conflict for NEQUALS in state 129 resolved as shift
WARNING: shift/reduce conflict for GREATEREQ in state 129 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 129 resolved as shift
WARNING: shift/reduce conflict for GREATERT in state 129 resolved as shift
WARNING: shift/reduce conflict for LESST in state 129 resolved as shift
WARNING: shift/reduce conflict for AND in state 129 resolved as shift
WARNING: shift/reduce conflict for OR in state 129 resolved as shift
WARNING: shift/reduce conflict for AND_OP in state 129 resolved as shift
WARNING: shift/reduce conflict for OR_OP in state 129 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 142 resolved as shift
WARNING: shift/reduce conflict for NEQUALS in state 142 resolved as shift
WARNING: shift/reduce conflict for GREATEREQ in state 142 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 142 resolved as shift
WARNING: shift/reduce conflict for GREATERT in state 142 resolved as shift
WARNING: shift/reduce conflict for LESST in state 142 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 153 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 154 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 193 resolved as shift
WARNING: shift/reduce conflict for NEQUALS in state 193 resolved as shift
WARNING: shift/reduce conflict for GREATEREQ in state 193 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 193 resolved as shift
WARNING: shift/reduce conflict for GREATERT in state 193 resolved as shift
WARNING: shift/reduce conflict for LESST in state 193 resolved as shift
WARNING: reduce/reduce conflict in state 12 resolved using rule (sentence -> range_incl)
WARNING: rejected rule (factor -> range_incl) in state 12
WARNING: reduce/reduce conflict in state 13 resolved using rule (sentence -> range_excl)
WARNING: rejected rule (factor -> range_excl) in state 13
WARNING: reduce/reduce conflict in state 19 resolved using rule (sentence -> function_call_empty)
WARNING: rejected rule (factor -> function_call_empty) in state 19
WARNING: reduce/reduce conflict in state 20 resolved using rule (sentence -> function_call_args)
WARNING: rejected rule (factor -> function_call_args) in state 20
WARNING: reduce/reduce conflict in state 75 resolved using rule (print -> PUTS STRING)
WARNING: rejected rule (input -> PUTS STRING) in state 75
WARNING: reduce/reduce conflict in state 75 resolved using rule (print -> PUTS STRING)
WARNING: rejected rule (factor -> STRING) in state 75
WARNING: reduce/reduce conflict in state 95 resolved using rule (expression -> expression PLUS term)
WARNING: rejected rule (expression -> term) in state 95
WARNING: reduce/reduce conflict in state 96 resolved using rule (expression -> expression MINUS term)
WARNING: rejected rule (expression -> term) in state 96
WARNING: reduce/reduce conflict in state 119 resolved using rule (term -> term TIMES factor)
WARNING: rejected rule (term -> factor) in state 119
WARNING: reduce/reduce conflict in state 120 resolved using rule (term -> term DIVIDE factor)
WARNING: rejected rule (term -> factor) in state 120
WARNING: reduce/reduce conflict in state 121 resolved using rule (term -> term EXPONENT factor)
WARNING: rejected rule (term -> factor) in state 121
WARNING: reduce/reduce conflict in state 122 resolved using rule (term -> term MODULE factor)
WARNING: rejected rule (term -> factor) in state 122
WARNING: reduce/reduce conflict in state 128 resolved using rule (term -> factor)
WARNING: rejected rule (logic_expression -> factor logic_op factor) in state 128
WARNING: reduce/reduce conflict in state 129 resolved using rule (term -> factor)
WARNING: rejected rule (logic_expression -> factor logic_connector factor) in state 129
WARNING: reduce/reduce conflict in state 164 resolved using rule (arg -> ID)
WARNING: rejected rule (factor -> ID) in state 164
WARNING: reduce/reduce conflict in state 166 resolved using rule (arg -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 166
WARNING: reduce/reduce conflict in state 169 resolved using rule (arg -> STRING)
WARNING: rejected rule (factor -> STRING) in state 169
WARNING: reduce/reduce conflict in state 170 resolved using rule (arg -> FLOAT)
WARNING: rejected rule (factor -> FLOAT) in state 170
WARNING: reduce/reduce conflict in state 171 resolved using rule (arg -> BOOLEAN)
WARNING: rejected rule (factor -> BOOLEAN) in state 171
WARNING: reduce/reduce conflict in state 172 resolved using rule (arg -> TRUE)
WARNING: rejected rule (factor -> TRUE) in state 172
WARNING: reduce/reduce conflict in state 173 resolved using rule (arg -> FALSE)
WARNING: rejected rule (factor -> FALSE) in state 173
WARNING: reduce/reduce conflict in state 174 resolved using rule (arg -> NIL)
WARNING: rejected rule (factor -> NIL) in state 174
WARNING: Rule (input -> PUTS STRING) is never reduced

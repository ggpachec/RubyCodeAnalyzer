LexToken(COMMENT,'# Algoritmo de prueba para el analizador léxico en Ruby',1,0)
LexToken(COMMENT,'# Comentario de una sola línea',2,56)
LexToken(COMMENT,'# Definición de variables',4,88)
LexToken(ID,'edad',5,114)
LexToken(ASSIGN,'=',5,119)
LexToken(INTEGER,25,5,121)
LexToken(COMMENT,'# Variable de tipo Integer',5,138)
LexToken(ID,'nombre',6,165)
LexToken(ASSIGN,'=',6,172)
LexToken(STRING,'Luis',6,174)
LexToken(COMMENT,'# Variable de tipo String',6,189)
LexToken(ID,'activo',7,215)
LexToken(ASSIGN,'=',7,222)
LexToken(TRUE,'true',7,224)
LexToken(COMMENT,'# Variable de tipo Boolean',7,239)
LexToken(ID,'temperatura',8,266)
LexToken(ASSIGN,'=',8,278)
LexToken(FLOAT,23.5,8,280)
LexToken(COMMENT,'# Variable de tipo Float',8,290)
LexToken(COMMENT,'# Casos incorrectos',10,316)
LexToken(INTEGER,1,11,336)
LexToken(ID,'edad',11,337)
LexToken(ASSIGN,'=',11,342)
LexToken(INTEGER,30,11,344)
LexToken(COMMENT,'# ERROR: Variable no puede empezar con un número',11,360)
LexToken(ID,'nombre',12,409)
LexToken(ASSIGN,'=',12,416)
LexToken(STRING,"Carlos'       # ERROR: Comillas no cerradas en el String\nactivo = ",12,418)
LexToken(ID,'verdadero',12,486)
LexToken(STRING,'    # ERROR: Asignación de String a un Boolean\ntemperatura = ',12,495)
LexToken(ID,'veintitres',12,558)
LexToken(STRING,'  # ERROR: Asignación de String a un Float\n\n# Estructura de control (if-else)\nif edad >= 18\n    puts ',12,568)
LexToken(ID,'Mayor',12,671)
LexToken(ID,'de',12,677)
LexToken(ID,'edad',12,680)
LexToken(STRING,'\nelse\n    puts ',12,684)
LexToken(ID,'Menor',12,701)
LexToken(ID,'de',12,707)
LexToken(ID,'edad',12,710)
LexToken(STRING,'\nend\n\n# Casos incorrectos\nif 18 >= edad            # ERROR: Operación lógica con tipos incorrectos\n    puts ',12,714)
LexToken(ID,'Este',12,824)
LexToken(ID,'es',12,829)
LexToken(ID,'un',12,832)
LexToken(ID,'error',12,835)
LexToken(STRING,'\nend\n\n# Operaciones aritméticas\nsuma = 10 + 5\nresta = 10 - 4\nmultiplicacion = 6 * 2\ndivision = 10 / 2\npotencia = 2 ** 3       # Exponente\n\n# Casos incorrectos\nsuma = 10 + ',12,840)
LexToken(INTEGER,5,12,1013)
LexToken(STRING,'         # ERROR: No se puede sumar un Integer con un String\nmultiplicacion = ',12,1014)
LexToken(INTEGER,2,12,1094)
LexToken(STRING,' * 2  # ERROR: No se puede multiplicar un String con un Integer\n\n# Operaciones lógicas\nes_valido = true && false\nes_igual = nombre == ',12,1095)
LexToken(ID,'Luis',12,1231)
LexToken(STRING,'\n\n# Casos incorrectos\nes_valido = ',12,1235)
LexToken(TRUE,'true',12,1271)
LexToken(STRING,' && false  # ERROR: String no se puede combinar con Boolean\nes_igual = 10 == ',12,1275)
LexToken(ID,'Luis',12,1354)
LexToken(STRING,'      # ERROR: Comparación entre tipos incompatibles\n\n# Operaciones de comparación\nmayor = edad > 18\nigual = nombre == ',12,1358)
LexToken(ID,'Luis',12,1479)
LexToken(STRING,'\ndiferente = edad != 30\n\n# Casos incorrectos\nmayor = edad > ',12,1483)
LexToken(INTEGER,18,12,1545)
LexToken(STRING,'          # ERROR: Comparación de tipos incompatibles\nigual = ',12,1547)
LexToken(ID,'Luis',12,1611)
LexToken(STRING,' == true       # ERROR: Comparación de String con Boolean\n\n# Estructura de control (for)\nfor i in 1..5\n    puts i\nend\n\n# Casos incorrectos\nfor i in ',12,1615)
LexToken(INTEGER,1,12,1765)
LexToken(RANGE_INCL,'..',12,1766)
LexToken(INTEGER,5,12,1768)
LexToken(COMMENT,'# ERROR: El rango no puede ser un String',12,1783)
LexToken(PUTS,'puts',13,1828)
LexToken(ID,'i',13,1833)
LexToken(END,'end',14,1835)
LexToken(COMMENT,'# Uso de rangos (inclusive y exclusivo)',16,1840)
LexToken(ID,'rango_incl',17,1880)
LexToken(ASSIGN,'=',17,1891)
LexToken(LPAREN,'(',17,1893)
LexToken(INTEGER,1,17,1894)
LexToken(RANGE_INCL,'..',17,1895)
LexToken(INTEGER,5,17,1897)
LexToken(RPAREN,')',17,1898)
LexToken(COMMENT,'# Rango inclusivo',17,1902)
LexToken(ID,'rango_excl',18,1920)
LexToken(ASSIGN,'=',18,1931)
LexToken(LPAREN,'(',18,1933)
LexToken(INTEGER,1,18,1934)
LexToken(RANGE_EXCL,'...',18,1935)
LexToken(INTEGER,5,18,1938)
LexToken(RPAREN,')',18,1939)
LexToken(COMMENT,'# Rango exclusivo',18,1942)
LexToken(COMMENT,'# Casos incorrectos',20,1961)
LexToken(ID,'rango_incl',21,1981)
LexToken(ASSIGN,'=',21,1992)
LexToken(LPAREN,'(',21,1994)
LexToken(INTEGER,1,21,1995)
LexToken(RANGE_INCL,'..',21,1996)
LexToken(INTEGER,5,21,1998)
LexToken(RPAREN,')',21,1999)
LexToken(COMMENT,'# ERROR: Rango no es válido si no se asigna adecuadamente',21,2003)
LexToken(ID,'rango_excl',22,2061)
LexToken(ASSIGN,'=',22,2072)
LexToken(LCORCH,'[',22,2074)
LexToken(INTEGER,1,22,2075)
LexToken(RANGE_EXCL,'...',22,2076)
LexToken(INTEGER,5,22,2079)
LexToken(RCORCH,']',22,2080)
LexToken(COMMENT,'# ERROR: El rango debería estar en un formato correcto',22,2083)
LexToken(COMMENT,'# Comentario multilínea',24,2139)
LexToken(COMMENT,'# Casos incorrectos',27,2218)
LexToken(COMMENT,'# Fin del algoritmo',30,2301)

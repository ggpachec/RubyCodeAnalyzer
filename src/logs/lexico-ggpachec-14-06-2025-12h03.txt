LexToken(COMMENT,'#CASO DE PRUEBA- GENESIS PACHECO',2,1)
LexToken(COMMENT,'## SECCION 1: DECLARACION DE VARIABLES',6,131)
LexToken(ID,'nombre',8,171)
LexToken(ASSIGN,'=',8,178)
LexToken(STRING,'María',8,180)
LexToken(COMMENT,'# ✅ Simple',8,204)
LexToken(ID,'edad_correcta',9,215)
LexToken(ASSIGN,'=',9,229)
LexToken(INTEGER,10,9,231)
LexToken(COMMENT,'# ✅ Numérica',9,248)
LexToken(ID,'resultado',10,261)
LexToken(ASSIGN,'=',10,271)
LexToken(ID,'edad_correcta',10,273)
LexToken(PLUS,'+',10,287)
LexToken(INTEGER,5,10,289)
LexToken(COMMENT,'# ✅ Con expresión',10,294)
LexToken(ID,'Edad',11,312)
LexToken(ASSIGN,'=',11,317)
LexToken(INTEGER,10,11,319)
LexToken(COMMENT,'# ❌ Error léxico: nombre de variable con mayúscula (se interpreta como constante)',11,345)
LexToken(ID,'edad',12,427)
LexToken(ASSIGN,'=',12,432)
LexToken(STRING,'diez',12,434)
LexToken(COMMENT,'# ❌ Error semántico: String asignado a una variable usada como número',12,460)
LexToken(INTEGER,2,13,530)
LexToken(ID,'variable',13,531)
LexToken(ASSIGN,'=',13,540)
LexToken(STRING,'dato',13,542)
LexToken(COMMENT,'# ❌ Error léxico: no puede empezar con número',13,563)
LexToken(ID,'_1nombres',14,609)
LexToken(ASSIGN,'=',14,619)
LexToken(STRING,'Inválido',14,621)
LexToken(COMMENT,'# ❌ Error léxico: comienza con guion bajo y número',14,642)
LexToken(COMMENT,'## SECCION 2: TIPOS DE DATOS',17,695)
LexToken(COMMENT,'# Tipos Primitivos',19,725)
LexToken(ID,'entero',20,744)
LexToken(ASSIGN,'=',20,751)
LexToken(INTEGER,100,20,753)
LexToken(COMMENT,'# ✅ Integer',20,777)
LexToken(ID,'decimal',21,789)
LexToken(ASSIGN,'=',21,797)
LexToken(FLOAT,3.1415,21,799)
LexToken(COMMENT,'# ✅ Float',21,822)
LexToken(ID,'texto',22,832)
LexToken(ASSIGN,'=',22,838)
LexToken(STRING,'Hola mundo',22,840)
LexToken(COMMENT,'# ✅ String',22,865)
LexToken(ID,'activo',23,876)
LexToken(ASSIGN,'=',23,883)
LexToken(TRUE,'true',23,885)
LexToken(COMMENT,'# ✅ Boolean',23,909)
LexToken(ID,'nulo',24,921)
LexToken(ASSIGN,'=',24,926)
LexToken(NIL,'nil',24,928)
LexToken(COMMENT,'# ✅ Nil',24,954)
LexToken(ID,'booleano',25,962)
LexToken(ASSIGN,'=',25,971)
LexToken(STRING,'true',25,973)
LexToken(COMMENT,'# ❌ Error Semántico: cadena no es valor booleano',25,995)
LexToken(COMMENT,'# Tipos Estructurados',27,1045)
LexToken(COMMENT,'# Hash',28,1067)
LexToken(ID,'usuario',29,1074)
LexToken(ASSIGN,'=',29,1082)
LexToken(LBRACE,'{',29,1084)
LexToken(STRING,'nombre',29,1086)
LexToken(ASSIGN,'=',29,1095)
LexToken(GREATERT,'>',29,1096)
LexToken(STRING,'Ana',29,1098)
LexToken(COMMA,',',29,1103)
LexToken(STRING,'edad',29,1105)
LexToken(ASSIGN,'=',29,1112)
LexToken(GREATERT,'>',29,1113)
LexToken(INTEGER,28,29,1115)
LexToken(RBRACE,'}',29,1118)
LexToken(COMMENT,'# ✅ Hash correcto',29,1122)
LexToken(ID,'persona',30,1140)
LexToken(ASSIGN,'=',30,1148)
LexToken(LBRACE,'{',30,1150)
LexToken(ID,'nombre',30,1152)
LexToken(ASSIGN,'=',30,1159)
LexToken(GREATERT,'>',30,1160)
LexToken(STRING,'Luis',30,1162)
LexToken(COMMA,',',30,1168)
LexToken(ID,'edad',30,1170)
LexToken(ASSIGN,'=',30,1175)
LexToken(GREATERT,'>',30,1176)
LexToken(INTEGER,30,30,1178)
LexToken(RBRACE,'}',30,1181)
LexToken(COMMENT,'# ❌ Error semántico: claves no definidas',30,1188)
LexToken(COMMENT,'# Array',32,1230)
LexToken(ID,'numeros_primos',33,1238)
LexToken(ASSIGN,'=',33,1253)
LexToken(LCORCH,'[',33,1255)
LexToken(INTEGER,2,33,1256)
LexToken(COMMA,',',33,1257)
LexToken(INTEGER,3,33,1259)
LexToken(COMMA,',',33,1260)
LexToken(INTEGER,5,33,1262)
LexToken(COMMA,',',33,1263)
LexToken(INTEGER,7,33,1265)
LexToken(COMMA,',',33,1266)
LexToken(INTEGER,11,33,1268)
LexToken(COMMA,',',33,1270)
LexToken(INTEGER,13,33,1272)
LexToken(RCORCH,']',33,1274)
LexToken(COMMENT,'# ✅ Array',33,1286)
LexToken(COMMENT,'# Range',35,1297)
LexToken(ID,'rango_10',36,1305)
LexToken(ASSIGN,'=',36,1314)
LexToken(LPAREN,'(',36,1316)
LexToken(INTEGER,1,36,1317)
LexToken(RANGE_INCL,'..',36,1318)
LexToken(INTEGER,10,36,1320)
LexToken(RPAREN,')',36,1322)
LexToken(COMMENT,'# ✅ Range',36,1353)
LexToken(COMMENT,'## SECCIÓN 3: OPERADORES',39,1365)
LexToken(COMMENT,'# Aritméticos',41,1391)
LexToken(ID,'suma',42,1405)
LexToken(ASSIGN,'=',42,1410)
LexToken(INTEGER,100,42,1412)
LexToken(PLUS,'+',42,1416)
LexToken(INTEGER,200,42,1418)
LexToken(COMMENT,'# ✅ Operación correcta',42,1438)
LexToken(ID,'division',43,1461)
LexToken(ASSIGN,'=',43,1470)
LexToken(INTEGER,10,43,1472)
LexToken(DIVIDE,'/',43,1475)
LexToken(STRING,'2',43,1477)
LexToken(COMMENT,'# ❌ Error semántico: división entre número y string',43,1494)
LexToken(ID,'division_correcta',44,1546)
LexToken(ASSIGN,'=',44,1564)
LexToken(INTEGER,10,44,1566)
LexToken(DIVIDE,'/',44,1569)
LexToken(INTEGER,2,44,1571)
LexToken(COMMENT,'# ✅ Operación correcta',44,1579)
LexToken(ID,'modul',45,1602)
LexToken(ASSIGN,'=',45,1608)
LexToken(INTEGER,10,45,1610)
LexToken(MODULE,'%',45,1613)
LexToken(INTEGER,2,45,1615)
LexToken(COMMENT,'# ✅ Operación correcta',45,1635)
LexToken(COMMENT,'# Comparación',47,1659)
LexToken(ID,'igual',48,1673)
LexToken(ASSIGN,'=',48,1679)
LexToken(INTEGER,5,48,1681)
LexToken(EQUALS,'==',48,1683)
LexToken(INTEGER,5,48,1686)
LexToken(COMMENT,'# ✅ Operación correcta',48,1706)
LexToken(ID,'comparar',49,1729)
LexToken(ASSIGN,'=',49,1738)
LexToken(STRING,'5',49,1740)
LexToken(GREATERT,'>',49,1744)
LexToken(INTEGER,3,49,1746)
LexToken(COMMENT,'# ❌ Error Semántico: no se puede comparar string con número',49,1762)
LexToken(ID,'comparar_OK',50,1822)
LexToken(ASSIGN,'=',50,1834)
LexToken(INTEGER,5,50,1836)
LexToken(GREATERT,'>',50,1838)
LexToken(INTEGER,3,50,1840)
LexToken(COMMENT,'# ✅ Operación correcta',50,1855)
LexToken(COMMENT,'# Lógicos',52,1879)
LexToken(ID,'es_valido',53,1889)
LexToken(ASSIGN,'=',53,1899)
LexToken(TRUE,'true',53,1901)
LexToken(AND_OP,'&&',53,1906)
LexToken(FALSE,'false',53,1909)
LexToken(COMMENT,'# ✅ Operación correcta',53,1922)
LexToken(ID,'error_logico',54,1945)
LexToken(ASSIGN,'=',54,1958)
LexToken(STRING,'true',54,1960)
LexToken(OR_OP,'||',54,1967)
LexToken(FALSE,'false',54,1970)
LexToken(COMMENT,'# ❌ Error semántico: "true" es string, no booleano',54,1978)
LexToken(COMMENT,'# Asignación',56,2030)
LexToken(ID,'x',57,2043)
LexToken(ASSIGN,'=',57,2045)
LexToken(INTEGER,5,57,2047)
LexToken(COMMENT,'# ✅ Operación correcta',57,2076)
LexToken(ID,'x',58,2099)
LexToken(PLUS,'+',58,2101)
LexToken(ASSIGN,'=',58,2102)
LexToken(INTEGER,3,58,2104)
LexToken(COMMENT,'# ✅ Operación correcta',58,2132)
LexToken(ID,'x',59,2155)
LexToken(DIVIDE,'/',59,2157)
LexToken(ASSIGN,'=',59,2158)
LexToken(STRING,'a',59,2160)
LexToken(COMMENT,'# ❌ Error semántico: no se puede dividir por string',59,2188)
LexToken(COMMENT,'## SECCIÓN 4: EXPRESIONES',62,2242)
LexToken(COMMENT,'# Aritméticas',64,2269)
LexToken(ID,'total',65,2283)
LexToken(ASSIGN,'=',65,2289)
LexToken(LPAREN,'(',65,2291)
LexToken(INTEGER,3,65,2292)
LexToken(PLUS,'+',65,2294)
LexToken(INTEGER,2,65,2296)
LexToken(RPAREN,')',65,2297)
LexToken(TIMES,'*',65,2299)
LexToken(INTEGER,4,65,2301)
LexToken(DIVIDE,'/',65,2303)
LexToken(INTEGER,2,65,2305)
LexToken(COMMENT,'# ✅ Expresión correcta',65,2319)
LexToken(COMMENT,'# Booleanas',67,2343)
LexToken(ID,'condicion',68,2355)
LexToken(ASSIGN,'=',68,2365)
LexToken(LPAREN,'(',68,2367)
LexToken(INTEGER,5,68,2368)
LexToken(GREATERT,'>',68,2370)
LexToken(INTEGER,2,68,2372)
LexToken(RPAREN,')',68,2373)
LexToken(AND_OP,'&&',68,2375)
LexToken(LPAREN,'(',68,2378)
LexToken(INTEGER,3,68,2379)
LexToken(LESST,'<',68,2381)
LexToken(INTEGER,8,68,2383)
LexToken(RPAREN,')',68,2384)
LexToken(COMMENT,'# ✅ Expresión correcta',68,2391)
LexToken(ID,'condicion2',69,2414)
LexToken(ASSIGN,'=',69,2425)
LexToken(LPAREN,'(',69,2427)
LexToken(TRUE,'true',69,2428)
LexToken(AND_OP,'&&',69,2433)
LexToken(STRING,'false',69,2436)
LexToken(RPAREN,')',69,2443)
LexToken(COMMENT,'# ❌ Error semántico: mezcla de booleano y string',69,2450)
LexToken(COMMENT,'## SECCIÓN 5: ESTRUCTURAS DE CONTROL',72,2501)
LexToken(COMMENT,'#While',74,2539)
LexToken(ID,'i',75,2546)
LexToken(ASSIGN,'=',75,2548)
LexToken(INTEGER,0,75,2550)
LexToken(COMMENT,'# ❌ Error sintáctico: falta `end` para cerrar el while',75,2582)
LexToken(WHILE,'while',76,2637)
LexToken(ID,'i',76,2643)
LexToken(LESST,'<',76,2645)
LexToken(INTEGER,3,76,2647)
LexToken(PUTS,'puts',77,2651)
LexToken(STRING,'Iteración #{i}',77,2656)
LexToken(ID,'i',78,2675)
LexToken(PLUS,'+',78,2677)
LexToken(ASSIGN,'=',78,2678)
LexToken(INTEGER,1,78,2680)
LexToken(ID,'i',80,2683)
LexToken(ASSIGN,'=',80,2685)
LexToken(INTEGER,0,80,2687)
LexToken(COMMENT,'# ✅ Estructura de control correctamente definida',80,2719)
LexToken(WHILE,'while',81,2768)
LexToken(ID,'i',81,2774)
LexToken(LESST,'<',81,2776)
LexToken(INTEGER,3,81,2778)
LexToken(PUTS,'puts',82,2782)
LexToken(STRING,'Iteración #{i}',82,2787)
LexToken(ID,'i',83,2806)
LexToken(PLUS,'+',83,2808)
LexToken(ASSIGN,'=',83,2809)
LexToken(INTEGER,1,83,2811)
LexToken(END,'end',84,2813)
LexToken(COMMENT,'#if-else',87,2819)
LexToken(IF,'if',88,2828)
LexToken(ID,'IMC',88,2831)
LexToken(GREATEREQ,'>=',88,2835)
LexToken(INTEGER,25,88,2838)
LexToken(COMMENT,'# ✅ Estructura de control correctamente definida',88,2865)
LexToken(PUTS,'puts',89,2916)
LexToken(STRING,'Indice de Masa Corporal Alto. Sobrepeso - Obesidad',89,2921)
LexToken(ELSE,'else',90,2974)
LexToken(PUTS,'puts',91,2981)
LexToken(STRING,'Indice de Masa Corporal Normal - Bajo.',91,2986)
LexToken(END,'end',92,3027)
LexToken(IF,'if',94,3032)
LexToken(STRING,'activo',94,3035)
LexToken(COMMENT,'# ❌ Error semántico: la condición no es booleana',94,3069)
LexToken(PUTS,'puts',95,3120)
LexToken(STRING,'Activo',95,3125)
LexToken(END,'end',96,3134)
LexToken(COMMENT,'## SECCION 6: DECLARACION DE FUNCIONES',99,3140)
LexToken(COMMENT,'# Función con valor por defecto',101,3180)
LexToken(DEF,'def',102,3212)
LexToken(ID,'saludo',102,3216)
LexToken(LPAREN,'(',102,3222)
LexToken(ID,'nombre',102,3223)
LexToken(ASSIGN,'=',102,3230)
LexToken(STRING,'Usuario',102,3232)
LexToken(RPAREN,')',102,3241)
LexToken(COMMENT,'# ✅ Función correctamente declarada',102,3249)
LexToken(PUTS,'puts',103,3287)
LexToken(STRING,'Hola, #{nombre}',103,3292)
LexToken(END,'end',104,3310)
LexToken(ID,'saludo',106,3315)
LexToken(LPAREN,'(',106,3321)
LexToken(RPAREN,')',106,3322)
LexToken(ID,'saludo',107,3324)
LexToken(LPAREN,'(',107,3330)
LexToken(STRING,'Genesis',107,3331)
LexToken(RPAREN,')',107,3340)
LexToken(COMMENT,'# Función sin parámetros que retorna un String',110,3344)
LexToken(DEF,'def',111,3391)
LexToken(ID,'obtener_nombre',111,3395)
LexToken(LPAREN,'(',111,3409)
LexToken(RPAREN,')',111,3410)
LexToken(COMMENT,'# ✅ Función correctamente declarada',111,3428)
LexToken(RETURN,'return',112,3466)
LexToken(STRING,'Genesis',112,3473)
LexToken(END,'end',113,3483)
LexToken(PUTS,'puts',114,3487)
LexToken(STRING,'El nombre es #{obtener_nombre()}',114,3492)
LexToken(DEF,'def',116,3528)
LexToken(ID,'obtener_nombre',116,3532)
LexToken(LPAREN,'(',116,3546)
LexToken(RPAREN,')',116,3547)
LexToken(COMMENT,'# ❌ Error semántico: debería devolver un String',116,3565)
LexToken(RETURN,'return',117,3615)
LexToken(INTEGER,42,117,3622)
LexToken(END,'end',118,3625)
LexToken(COMMENT,'# Función con parámetros',121,3631)
LexToken(DEF,'def',122,3656)
LexToken(ID,'multiplicar',122,3660)
LexToken(LPAREN,'(',122,3671)
LexToken(ID,'a',122,3672)
LexToken(COMMA,',',122,3673)
LexToken(ID,'b',122,3675)
LexToken(RPAREN,')',122,3676)
LexToken(COMMENT,'# ✅ Función correctamente declarada',122,3693)
LexToken(ID,'a',123,3731)
LexToken(TIMES,'*',123,3733)
LexToken(ID,'b',123,3735)
LexToken(END,'end',124,3737)
LexToken(ID,'result',125,3741)
LexToken(ASSIGN,'=',125,3748)
LexToken(ID,'multiplicar',125,3750)
LexToken(LPAREN,'(',125,3761)
LexToken(INTEGER,5,125,3762)
LexToken(COMMA,',',125,3763)
LexToken(INTEGER,2,125,3765)
LexToken(RPAREN,')',125,3766)
LexToken(DEF,'def',127,3769)
LexToken(ID,'multiplicar',127,3773)
LexToken(LPAREN,'(',127,3784)
LexToken(ID,'a',127,3785)
LexToken(COMMA,',',127,3786)
LexToken(ID,'b',127,3788)
LexToken(RPAREN,')',127,3789)
LexToken(COMMENT,'# ❌ Error sintáctico: Declaración incompleta, falta `end`',127,3806)
LexToken(ID,'a',128,3866)
LexToken(TIMES,'*',128,3868)
LexToken(ID,'b',128,3870)
LexToken(COMMENT,'## SECCION 7: CLASES Y OBJETOS',131,3874)
LexToken(CLASS,'class',133,3906)
LexToken(ID,'Vehiculo',133,3912)
LexToken(DEF,'def',134,3923)
LexToken(ID,'initialize',134,3927)
LexToken(LPAREN,'(',134,3937)
LexToken(ID,'marca',134,3938)
LexToken(COMMA,',',134,3943)
LexToken(ID,'modelo',134,3945)
LexToken(RPAREN,')',134,3951)
LexToken(VAR_INST,'@marca',135,3957)
LexToken(ASSIGN,'=',135,3964)
LexToken(ID,'marca',135,3966)
LexToken(VAR_INST,'@modelo',136,3976)
LexToken(ASSIGN,'=',136,3984)
LexToken(ID,'modelo',136,3986)
LexToken(END,'end',137,3995)
LexToken(DEF,'def',139,4002)
LexToken(ID,'descripcion',139,4006)
LexToken(RETURN,'return',140,4022)
LexToken(STRING,'Vehículo: #{@marca} #{@modelo}',140,4029)
LexToken(END,'end',141,4064)
LexToken(END,'end',142,4068)
LexToken(ID,'carro',144,4073)
LexToken(ASSIGN,'=',144,4079)
LexToken(ID,'Vehiculo',144,4081)
LexToken(DOT,'.',144,4089)
LexToken(ID,'new',144,4090)
LexToken(LPAREN,'(',144,4093)
LexToken(STRING,'Toyota',144,4094)
LexToken(COMMA,',',144,4102)
LexToken(STRING,'Corolla',144,4104)
LexToken(RPAREN,')',144,4113)
LexToken(COMMENT,'# ✅ Creación de objeto correcta',144,4118)
LexToken(PUTS,'puts',145,4150)
LexToken(ID,'carro',145,4155)
LexToken(DOT,'.',145,4160)
LexToken(ID,'descripcion',145,4161)
LexToken(ID,'objeto',147,4174)
LexToken(ASSIGN,'=',147,4181)
LexToken(ID,'Vehiculo',147,4183)
LexToken(LPAREN,'(',147,4191)
LexToken(STRING,'Mazda',147,4192)
LexToken(COMMA,',',147,4199)
LexToken(STRING,'CX-5',147,4201)
LexToken(RPAREN,')',147,4207)
LexToken(COMMENT,'# ❌ Error sintáctico: falta .new para crear objeto',147,4219)
